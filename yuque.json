[
  {
    "title": "使用语雀管理博客",
    "description": "Test",
    "created_at": "2018-11-09T12:43:26.000Z",
    "updated_at": "2018-11-09T13:33:32.000Z",
    "published_at": "2018-11-09T13:33:32.000Z",
    "format": "asl",
    "slug": "momb9q",
    "last_editor": {
      "id": 183307,
      "type": "User",
      "login": "leafly",
      "name": "leafly",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2018-09-27T09:52:55.000Z",
      "updated_at": "2018-11-09T13:31:57.000Z",
      "_serializer": "v2.user"
    },
    "body": "\n之前一直使用hexo搭建自己的个人博客，用的久了就发现随着博客数量的增加，管理越来越麻烦，之前也尝试过使用[hexo-admin](https://jaredforsyth.com/hexo-admin/)，hexo-admin虽然能够达到管理博客的目的，不过界面有点丑，不能忍，一直想找一个替代方案，最近在语雀中读到了一篇博客[静态博客使用语雀编辑器](https://www.yuque.com/page/luan.ma/yuque2blog)，文中介绍了如何利用语雀管理博客，决定一试。\n\n#### <a name=\"x43bcd\"></a>Hexo搭建博客\n首先需要先利用[hexo](https://hexo.io/zh-cn/index.html)搭建博客，具体的搭建流程可以参考[Github+Hexo搭建个人博客详细教程](http://www.ileafly.com/2018/11/10/yuque/Github+Hexo搭建个人博客详细教程/)\n\n#### <a name=\"wgwlfo\"></a>安装语雀插件\n[yuque-hexo](https://github.com/x-cold/yuque-hexo/)是一个Node.js环境下的语雀下载器。\n1. 安装yuque-hexo\n2. 注册语雀，创建知识库，公开知识库，获得博客知识库的地址，比如我的[语雀知识库地址](https://www.yuque.com/leafly/blog)\n3. 在Hexo博客的目录下面找到package.json文件，进入如下配置：\n```json\n{\n\"name\": \"hexo-blog\", // 这里一般原来就有，直接添加下面的内容即可\n\"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",\n    \"login\": \"leafly\",\n    \"repo\": \"blog\",\n    \"postPath\": \"source/_posts/yuque\"\n  },\n}\n```\n4. 同步文章\n```powershell\n$ yuque-hexo sync\n```\n执行完毕，会自动将语雀上的文章同步到`source/_post/yuque`文件夹下\n```powershell\n$ hexo g\n$ hexo d\n```\n将博客内容同步到github。\n\n#### <a name=\"ol3liq\"></a>如何添加分类、标签、创建时间\n插件支持Front-matter，在文章顶部添加分类、标签、创建时间等信息\n```makedown\ntags: [Hexo]\ncategories: 教程\ndate: 2018-10-10 15:43:50\n```\n\n\n",
    "tags": [
      "Hexo"
    ],
    "categories": "教程"
  },
  {
    "title": "Github+Hexo搭建个人博客详细教程",
    "description": "安装Node.js安装nvm$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash 安装node$ nvm install node 验证node是否安装成功$  node -v...",
    "created_at": "2018-11-10T01:14:00.000Z",
    "updated_at": "2018-11-10T02:45:15.000Z",
    "published_at": "2018-11-10T02:45:15.000Z",
    "format": "asl",
    "slug": "nhbulg",
    "last_editor": {
      "id": 183307,
      "type": "User",
      "login": "leafly",
      "name": "leafly",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2018-09-27T09:52:55.000Z",
      "updated_at": "2018-11-09T13:31:57.000Z",
      "_serializer": "v2.user"
    },
    "body": "\n#### <a name=\"sl6tws\"></a>安装Node.js\n1. 安装nvm\n```powershell\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash\n```\n2. 安装node\n```powershell\n$ nvm install node\n```\n3. 验证node是否安装成功\n```powershell\n$  node -v\n$  v8.12.0\n```\n#### <a name=\"t8a8gr\"></a>安装Hexo\n```powershell\n$ npm install -g hexo\n```\n安装完成后，进入一个文件夹，执行\n```powershell\n$ hexo init\n$ npm install hexo --save\n```\n#### <a name=\"ua2lyy\"></a>Github创建个人仓库\n在Github上创建一个新仓库，并命名为  `你的github用户名.github.io`\n#### <a name=\"oefdft\"></a>配置\\_config.yml\n```plain\ndeploy:\n   type: git\n   repository: https://github.com/username/username.github.io\n   branch: master\n```\n#### <a name=\"s6t5gs\"></a>编写博客\n```plain\n$ hexo new post '文章标题'\n```\n在source/\\_posts/ 文件夹下新建了博客，文件格式为markdown，编辑此文件。\n#### <a name=\"ybauhr\"></a>推送站点\n```powershell\n$ hexo g\n$ hexo d\n```\n上传成功后，访问[https://username.github.io](https://username.github.io)\n\n---\n\n接下来再介绍一些进阶用法：\n#### <a name=\"padgfi\"></a>多台电脑管理hexo博客\n利用github管理博客内容，进行多台电脑的同步，既可以新建一个仓库单独进行博客内容的管理，也可以在现有仓库的基础上新建一个分支进行管理，相比较而言新建分支管理更加便捷。\n1. 新建分支 hexo\n2. 在设置里将hexo设置为默认分支\n3. clone代码到本地，在hexo分支下进行博客的编写，利用hexo d同步到master分支，同时手动同步到hexo分支\n4. 新电脑需要重新安装hexo环境，安装完成后clone代码到本地\n#### <a name=\"xhgmdd\"></a>绑定个人域名\n拥有自己的独立域名能瞬间提升博客的逼格，接下来就是绑定个人域名的流程\n1. 购买域名\n      一般去阿里云购买，具体流程网上很多，就不再细说\n2. 配置DNS地址\n      在阿里云后台配置DNS信息，将[https://username.github.io](https://username.github.io)的ip绑定到你想要绑定的域名上\n3. 配置hexo文件\n      在source目录下，新建文件，命名为`CNAME`，填入域名地址。\n4. 发布到github\n我的博客地址是[http://www.ileafly.com](http://www.ileafly.com)\n#### <a name=\"yst3oh\"></a>绑定语雀管理博客内容\n可以利用语雀管理博客内容，非常方便，详细流程可参考[使用语雀管理博客](http://www.ileafly.com/2018/11/09/yuque/使用语雀管理博客/)。\n\n\n---\n\n未完待续~\n* 如何更换主题\n* 如何配置评论\n\n",
    "tags": [
      "Hexo"
    ],
    "categories": "教程"
  },
  {
    "title": "fastlane指南",
    "description": "fastlane是一套使用Ruby写的自动化工具集，为iOS和Android开发者提供了自动化构建工具，可以帮助开发者将App打包、签名、测试、发布、信息整理、提供AppStore等工作连接起来，实现完全自动化的工作流。fastlane-doc 参考文档。安装# 安装 fastlane gem...",
    "created_at": "2018-11-08T02:20:01.000Z",
    "updated_at": "2018-11-10T03:27:52.000Z",
    "published_at": "2018-11-10T03:27:52.000Z",
    "format": "asl",
    "slug": "qgykm3",
    "last_editor": {
      "id": 183307,
      "type": "User",
      "login": "leafly",
      "name": "leafly",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2018-09-27T09:52:55.000Z",
      "updated_at": "2018-11-09T13:31:57.000Z",
      "_serializer": "v2.user"
    },
    "body": "\n[fastlane](https://github.com/fastlane/fastlane)是一套使用Ruby写的自动化工具集，为iOS和Android开发者提供了自动化构建工具，可以帮助开发者将App打包、签名、测试、发布、信息整理、提供AppStore等工作连接起来，实现完全自动化的工作流。\n[fastlane-doc](https://docs.fastlane.tools) 参考文档。\n\n### <a name=\"ule4kq\"></a>安装\n```powershell\n# 安装 fastlane\ngem install fastlane\n\n# 检查版本 \nfastlane --version\n```\n\n### <a name=\"upokfd\"></a>配置\n```ruby\n# 初始化配置\ncd 项目目录\n## fastlane init期间会有四种配置选择，这里我们选择4 完全自定义，然后一直enter直至完成即可\nfastlane init\n\n# fastlane init执行完成后会在当前目录下创建一个fastlane文件夹，包含Appfile和Fastfile文件\n## Appfile\n\napp_identifier(\"bundle  id\") # The bundle identifier of your app\napple_id(\"********@mail.com\") # Your Apple email address\n\n# For more information about the Appfile, see:\n#     https://docs.fastlane.tools/advanced/#appfile\n\n## Fastline\n\ndefault_platform(:ios)\n\nplatform :ios do\n  desc \"Description of what the lane does\"\n  lane :betaDebug do\n    # add actions here: https://docs.fastlane.tools/actions\n    # pod install\n    cocoapods(use_bundle_exec: false)\n    # build app\n    build_app(workspace: \"app.xcworkspace\", scheme: \"app\", export_method: \"ad-hoc\", output_directory: \"./fastlane/package\", configuration: \"Release\")\n    # upload pgyer\n    pgyer(api_key:  \"****************\",  user_key:  \"***********************\")\n    # send email\n    mailgun(\n      postmaster: \"postmaster@*************************.mailgun.org\",\n      apikey: \"********************-4412457b-38b62932\", \n      to: \"tester1@mail.com,tester2@mail.com,tester3@mail.com\",\n      from: \"author <author@mail.com>\",\n      success: true,  \n      message: \"app 上传蒲公英成功\",\n      app_link: \"https://www.pgyer.com/****\",\n      )\n  end\nend\n```\n\n按照上述流程配置好fastlane，执行`fastlane  betaDebug `不出意外你将看到执行成功的信息，在fastlane\\package目录下找到ipa文件。\n### <a name=\"h1gtce\"></a>上传蒲公英\n1. 安装蒲公英插件\n```plain\nfastlane add_plugin pgyer\n```\n2. 配置蒲公英账号信息\n```ruby\nlane :betaDebug do\n    # add actions here: https://docs.fastlane.tools/actions\n    build_app(workspace: \"app.xcworkspace\", scheme: \"app\", export_method: \"ad-hoc\", output_directory: \"./fastlane/package\", configuration: \"Release\")\n    pgyer(api_key:  \"****************\",  user_key:  \"***********************\")\n  end\n```\n3. 打包上传\n```powershell\nfastlane betaDebug\n```\n### <a name=\"fgh2mb\"></a>pod install\nfastlane集成了`cocoapods`进行pod管理，在终端里输入`fastlane cocoapods`可以查看相关的API文档。\n1. 在Gemfile中添加`gem \"cocoapods\"`\n2. 在Fastfile中添加cocoapods的配置\n```ruby\n# 这里需要注意，我尝试过按照文档里设置Podfile的路径，发现不能成功执行pod install，后来通过调查使用如下命令可以成功执行，具体原因不明\ncocoapods(use_bundle_exec: false)\n```\n### <a name=\"ng4arh\"></a>邮件通知\nfastlane集成了`mailgun` 进行邮件发送，在终端里输入fastlane mailgun可以查看相关的API文档，这里总结一下正确集成mailgun的流程\n\n1. 注册mailgun\n [mailgun](https://www.mailgun.com)是一个开发人员的电子邮件服务，提供了强大的API，每个月可免费发送10000封邮件，而且还可以进行跟踪日志等操作。按照流程注册完后会有一个测试domain，利用测试domain可以发送邮件，不过需要添加收件邮箱的验证，通过添加自定义域名可以使用更强大的功能。\n1. 在Gemfile中添加`gem \"rest-client\"`\n2. 在Fastfile中添加mailgun的配置\n```ruby\n# mailgun 邮件通知    \n    mailgun(\n      postmaster: \"postmaster@****************.mailgun.org\",\n      apikey: \"********************-4412457b-38b62932\", \n      to: \"tester1@mail.com,tester2@mail.com,tester3@mail.com\",\n      from: \"author <author@mail.com>\",\n      success: true,  \n      message: \"app 上传蒲公英成功\",\n      app_link: \"https://www.pgyer.com/****\",\n      )\n```\n4. 终端执行fastlane命令，成功配置时你将看到如下信息\n```ruby\n[10:51:39]: ------------------------------\n[10:51:39]: --- Step: default_platform ---\n[10:51:39]: ------------------------------\n[10:51:39]: Driving the lane 'ios betaDebug' 🚀\n[10:51:39]: ---------------------\n[10:51:39]: --- Step: mailgun ---\n[10:51:39]: ---------------------\n\n+------+-----------------+-------------+\n|           fastlane summary           |\n+------+-----------------+-------------+\n| Step | Action          | Time (in s) |\n+------+-----------------+-------------+\n| 1    | default_platfo  | 0           |\n|      | rm              |             |\n| 2    | mailgun         | 1           |\n+------+-----------------+-------------+\n\n[10:51:41]: fastlane.tools finished successfully 🎉\n```\n\n#### <a name=\"ewqdsv\"></a>mailgun相关注意点\n* mailgun会自动读取git提交message放入邮件内容中\n* mailgun的apikey配置不正确时会提供401认证错误\n* 使用测试域名，配置多个接收邮箱时，有一个邮箱未接收认证，就会导致所有的都失败\n\n### <a name=\"oxgbns\"></a>fastlane进阶\n上面的流程只是帮我们简单实现fastlane打包与上传至蒲公英的流程，绝大多数情况下已经够用，不过fastlane还有很多功能可以挖掘\n\n* [x] fastlane 支持pod install\n* [x] fastlane 上传蒲公英后邮件通知测试人员\n* [ ] fastlane 上传Testflight\n* [ ] fastlane 上传AppStore \n\n### <a name=\"6yx6gx\"></a>使用过程中的一些坑\n1. fastlane配置完成后执行一直报错，编译不能通过，通过分析发现因为我装了两个Xcode，默认使用的是9.0版本的command line，而代码是在Xcode 10中编写的，使用了一些swift 4.2的语法，解决方案是在设置里切换command line版本即可。\n2. cocoapods的使用其他命令尝试了一直报错，只有上面那个命名能够成功，原因还未知\n3. mailgun的集成详细的教程比较少，要多尝试，如果遇到401报错就看看apiKey是否设置正确，另外要注意使用测试域名，接受邮件的邮箱需要先邀请认证，否则会报400错误。\n\n",
    "tags": [
      "自动化、fastlane"
    ],
    "categories": "教程"
  },
  {
    "title": "ZYLoading--自定义loading控件",
    "description": "date: 2017-12-14 19:20:00categories:iOStags:iOS控件封装移动端项目的开发离不开loading控件，通常为了能快速在项目中实现loading效果我们有几个主流的开源库可以选择： MBProgressHUD、SVProgressHUD等然后，为了能让整...",
    "created_at": "2018-11-10T03:40:26.000Z",
    "updated_at": "2018-11-10T03:47:36.000Z",
    "published_at": "2018-11-10T03:47:36.000Z",
    "format": "asl",
    "slug": "ptds2t",
    "last_editor": {
      "id": 183307,
      "type": "User",
      "login": "leafly",
      "name": "leafly",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2018-09-27T09:52:55.000Z",
      "updated_at": "2018-11-09T13:31:57.000Z",
      "_serializer": "v2.user"
    },
    "body": "\n移动端项目的开发离不开loading控件，通常为了能快速在项目中实现loading效果我们有几个主流的开源库可以选择：\n[MBProgressHUD](https://github.com/jdg/MBProgressHUD)、[SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)等\n\n然后，为了能让整体项目的loading效果显得更加贴切我就想创建一个loading控件，希望此控件能够比较方便的开启、停止loading效果，而且能易于集成和更换logo。\n\n为了达到这个目的，我创建了一个名为[ZYLoading](https://github.com/luzhiyongGit/ZYLoading.git)的控件，下面就为大家分享一下我这个控件的原理以及使用方法。\n\n## <a name=\"6gngga\"></a>原理分析\n\n此控件的核心思想是利用runtime机制给分类增加成员属性，通过给UIView扩展开启、停止loading的方法，从而实现任何UIView的实例都能方便的开启、停止loading动画\n\n```\n#import \"UIView+ZYLoadingView.h\"\n\n#import <objc/runtime.h>\n\nstatic char LoadingViewKey;\n\n@implementation UIView (ZYLoadingView)\n\n#pragma mark - Setter\n\n// 将创建的ZYLoadingView实例关联到分类\n- (void)setLoadingView:(ZYLoadingView *)loadingView {\n    [self willChangeValueForKey:@\"LoadingViewKey\"];\n    objc_setAssociatedObject(self, &LoadingViewKey, loadingView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    [self didChangeValueForKey:@\"LoadingViewKey\"];\n}\n\n// 获取关联的ZYLoadingView\n- (ZYLoadingView *)loadingView {\n    return objc_getAssociatedObject(self, &LoadingViewKey);\n}\n\n// 开启动画\n- (void)beginLoading {\n    if (!self.loadingView) {\n        self.loadingView = [[ZYLoadingView alloc] initWithFrame:self.bounds];\n    }\n    \n    [self addSubview:self.loadingView];\n    \n    [self.loadingView startAnimation];\n}\n\n// 停止动画\n- (void)endLoading {\n    if (self.loadingView) {\n        [self.loadingView stopAnimation];\n    }\n}\n\n@end\n\n```\n\n## <a name=\"onp8ux\"></a>使用方法\n\n##### <a name=\"yz1gkc\"></a>通过一组图片组合成动画\n\n```objectivec\n// 通过枚举选择图片组合动画\nZYLoadingConfigInstance.loadingType = ZYLoadingAnimateImages;\n// 图片名称\nZYLoadingConfigInstance.animateImageName = @\"zy_loading_\";\n// 图片尺寸\nZYLoadingConfigInstance.loopImageSize = CGSizeMake(37, 13);\n// 动画过渡时长\nZYLoadingConfigInstance.duration = 1.f;\n```\n\n##### <a name=\"qckoog\"></a>通过一张图旋转形成动画\n\n```objectivec\n// 通过枚举选择通过旋转图片展现loading动画\nZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;\n// 图片名称\nZYLoadingConfigInstance.loopImage = [UIImage imageNamed:@\"loading_circle\"];\n// 图片尺寸    \nZYLoadingConfigInstance.loopImageSize = CGSizeMake(60, 60);\n// 动画过渡时长    \nZYLoadingConfigInstance.duration = 0.25f;\n```\n\n##### <a name=\"1htvcz\"></a>通过一张图片旋转，另一张图片渐隐渐显组合成动画\n\n```objectivec\n// 通过枚举选择通过旋转图片展现loading动画    ZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;\n// 图片名称\nZYLoadingConfigInstance.loopImage = [UIImage imageNamed:@\"loading_circle\"];\n// 图片尺寸    \nZYLoadingConfigInstance.loopImageSize = CGSizeMake(60, 60);\n// logo图片名称\nZYLoadingConfigInstance.logoImage = [UIImage imageNamed:@\"loading_zhangyu\"];\n// logo图片尺寸\nZYLoadingConfigInstance.logoImageSize = CGSizeMake(40, 40);\n// 动画过渡时长\nZYLoadingConfigInstance.duration = 0.25f;\n```\n\n##### <a name=\"1v21fg\"></a>开启、停止动画\n\n```objectivec\n// 开启动画\n[self.view beginLoading];\n\n// 停止动画\n[self.view endLoading];\n```\n\n你也可以直接参考github上的[ZYLoading](https://github.com/luzhiyongGit/ZYLoading.git)\n",
    "date": "2017-12-14 19:20:00 +0800",
    "tags": [
      "ZYLoading"
    ],
    "categories": "组件"
  },
  {
    "title": "Markdown语法初探",
    "description": "",
    "created_at": "2018-11-10T03:32:57.000Z",
    "updated_at": "2018-11-10T03:33:32.000Z",
    "published_at": null,
    "format": "asl",
    "slug": "re8dho",
    "last_editor": {
      "id": 183307,
      "type": "User",
      "login": "leafly",
      "name": "leafly",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2018-09-27T09:52:55.000Z",
      "updated_at": "2018-11-09T13:31:57.000Z",
      "_serializer": "v2.user"
    },
    "body": "\nMarkdown是一种轻量级标记语言，这篇博客会总结一些经常使用的Markdown语法。\n\n#### <a name=\"7vhalw\"></a>标题\n```makedown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n# <a name=\"kb5oaz\"></a>一级标题\n## <a name=\"x39vgn\"></a>二级标题\n### <a name=\"fudbls\"></a>三级标题\n#### <a name=\"uoagan\"></a>四级标题\n##### <a name=\"gplupm\"></a>五级标题\n###### <a name=\"zhergt\"></a>六级标题\n#### <a name=\"171ptb\"></a>引用\n```makedown\n> 这是一段被引用的内容\n```\n> 这是一段被应用的内容\n\n#### <a name=\"mncspy\"></a>链接\n```makedown\n[链接文案](链接地址)\n```\n[链接](#mncspy)\n\n#### <a name=\"lfecoq\"></a>图片\n```makedown\n![Alt  text](image  url)\n```\n\n\n![yuque.jpeg | left | 360x140](https://cdn.nlark.com/yuque/0/2018/jpeg/183307/1541837693964-6f7a229c-9549-483c-9c1b-b487b20edbfa.jpeg \"\")\n\n\n#### <a name=\"t08aav\"></a>分割线\n```makedown\n---\n```\n\n---\n\n#### <a name=\"xilslv\"></a>无序列表\n```plain\n- 第一条\n- 第二条\n- 第三条\n```\n* 第一条\n* 第二条\n* 第三条\n\n#### <a name=\"kwhgeg\"></a>有序列表\n```makedown\n1. 第一条\n2. 第二条\n3. 第三条\n```\n1. 第一条\n2. 第二条\n3. 第三条\n\n#### <a name=\"tw9nqt\"></a>强调\n```makedown\n*斜体字*\n**加重强调**\n```\n*斜体字*\n__加重强调__\n",
    "tags": [
      "markdown"
    ],
    "categories": "教程",
    "date": "2016-08-11 10:19:00 +0800"
  },
  {
    "title": "iOS 技巧合集",
    "description": "tags: [iOS]categories: 开发技巧date: 2017-02-20 11:55:00一行命令，统计OC项目中每个源代码文件的行数以及总行数$ find . &quot;(&quot; -name &quot;*.m&quot; -or -name &quot;*.mm&qu...",
    "created_at": "2018-11-10T08:22:38.000Z",
    "updated_at": "2018-11-10T09:52:33.000Z",
    "published_at": "2018-11-10T09:52:33.000Z",
    "format": "asl",
    "slug": "sokrp0",
    "last_editor": {
      "id": 183307,
      "type": "User",
      "login": "leafly",
      "name": "leafly",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2018-09-27T09:52:55.000Z",
      "updated_at": "2018-11-09T13:31:57.000Z",
      "_serializer": "v2.user"
    },
    "tags": [
      "iOS"
    ],
    "categories": "开发技巧",
    "date": "2017-02-20 11:55:00 +0800",
    "body": "\n#### <a name=\"tf2kgf\"></a>一行命令，统计OC项目中每个源代码文件的行数以及总行数\n```powershell\n$ find . \"(\" -name \"*.m\" -or -name \"*.mm\" -or -name \"*.cpp\" -or -name \"*.h\" -or -name \"*.rss\" \")\" -print | xargs wc -l\n```\n\n#### <a name=\"8wricr\"></a>复制字符串到剪贴板\n```objectivec\nUIPasteboard *pasteboard = [UIPasteboard  generalPasteboard];\npasteborad.string = @\"你需要复制的字符串\";\n```\n\n#### <a name=\"s16fhl\"></a>让子view不响应父view的手势\n正常情况下，父view的手势在子view上点击也会响应，想要在子view中屏蔽父view的手势有以下方法：\n1. 子view中再次添加手势，拦截掉父view的手势\n2. 实现父view的手势代理，在代理中拦截父view手势\n```objectivec\n- (BOOL)gestureRecognizer:(UIGestureRecognizer  *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\n    if ([touch.view  isDescendantOfView:subview]) {\n       return NO;\n    }\n    return YES;\n}\n```\n\n#### <a name=\"nognoh\"></a>自定义xopen快捷打开工程\n利用ruby脚本在终端快速打开工程，ruby脚本内容如下：\n```ruby\n#!/usr/bin/env ruby\nrequire 'shellwords'\n\nproj = Dir['*.xcworkspace'].first\nproj = Dir['*.xcodeproj'].first unless proj\n\nif proj\n   puts \"Opening  #{proj}\"\n   `open #{proj}`\nelse\n  puts \"No  xcworkspace|xcproj  file  found\"\nend\n```\n将脚本文件保存为`xopen`，拷贝到`/usr/local/bin`目录下，添加权限：`chmod 777 xopen`\n在终端中任何需要打开项目的位置，执行xopen即可。\n\n#### <a name=\"fqw2ll\"></a><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">CUICatalog Invalid asset name supplied</span>\n项目中最近在打印<span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>CUICatalog Invalid asset name supplied</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">，调研发现之所以输出这个log是因为传了一个空字符串来获取image，如果项目这种情况比较多，可以添加一个</span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>symbolic breakpoint</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">来定位。</span>\n\n\n![ATz38.png | center | 536x257](https://cdn.nlark.com/yuque/0/2018/png/183307/1541845301865-3989fad5-4209-460a-8ec8-af444c4a9643.png \"\")\n\n\n需要说明一下，\\$arg3用于模拟器，\\$r0用于真机，除了传入值是nil的情况，还可能是@\"\"，这种情况的判断规则是`[$arg3  length] == 0`\n\n#### <a name=\"nim5dg\"></a>iOS导航栏显示与隐藏\n项目中可能存在需要特殊隐藏导航栏的页面，通常情况下我们只需要在特殊页面执行`viewWillAppear`时隐藏导航栏，再在`viewWillDisapper`时显示导航栏以确保不对需要正常显示导航栏的页面产生影响。不过在实际项目中，页面之间的情况远比我们想象的复杂，我们以A、B两个页面为例：\n* A 显示 B 隐藏  这种情况下我们按照上述操作是没有问题的\n* A 隐藏 B 显示  这种情况下我们按照上述操作是没有问题的\n* A 隐藏 B 隐藏  这种情况下就会存在连续执行先显示、再隐藏的情况，频繁操作就会存在导航栏异常的情况\n为了解决这个问题，最佳方案应该是每个页面根据自身需要执行显示或隐藏导航栏的操作，如果让每个页面无形增加了代码量，而且不利于维护。为了进一步优化，我们可以利用`UINavigationControllerDelegate`做些文章。\n```swift\nextension ZYNavigationController: UINavigationControllerDelegate {\n    func navigationController(_ navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool) {\n        // 判断要显示的控制器是否是自己\n        let isHidden = viewController.isKind(of: FourthViewController.self) || viewController.isKind(of: FirstViewController.self)\n        \n        self.setNavigationBarHidden(isHidden, animated: true)\n    }\n}\n```\n\n"
  }
]