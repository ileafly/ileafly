{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":1,"renderable":0},{"_id":"themes/aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":1,"renderable":1},{"_id":"themes/aircloud/source/js/index.js","path":"js/index.js","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/aircloud/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"04ad2e2586430549e28ed3856b8cd567092ac95f","modified":1542089473430},{"_id":"source/CNAME","hash":"ff2f59c6b412222407781fdc7d9a8b96fe7cc391","modified":1541768861223},{"_id":"themes/aircloud/_config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428038},{"_id":"themes/aircloud/.gitignore","hash":"5a4a925cfd624633dafaacaced416c8d7272dcef","modified":1542027428037},{"_id":"themes/aircloud/LICENSE","hash":"218b4bf797149a2751a015812a9adefe368185c1","modified":1542027428038},{"_id":"themes/aircloud/readme-en.md","hash":"2903b1e9db12cd72ed6f8c10be14cd7f6afd82cf","modified":1542027428042},{"_id":"themes/aircloud/readme.md","hash":"f75ff0c361c513bb6cd55159594cbb2f485c4fd9","modified":1542027428042},{"_id":"source/_posts/.DS_Store","hash":"f1974cb2276f693442a9ae19790c4203f8b4830f","modified":1541844270123},{"_id":"source/about/index.md","hash":"b46be744fc45f192f4eb66283a73ee812306f6c8","modified":1542087831828},{"_id":"themes/aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428041},{"_id":"themes/aircloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428041},{"_id":"source/img/.DS_Store","hash":"377245d3633e42a7b41caba2cbae7ea3a7392ae4","modified":1542089473589},{"_id":"source/img/avatar.jpeg","hash":"d2aa8e646ac5c63dea059226c381cdc0caa10ae3","modified":1542088843474},{"_id":"themes/aircloud/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1542027428027},{"_id":"themes/aircloud/.git/config","hash":"1a823c723d63e45d231cc452a05a93c5f4b5d8d3","modified":1542027428029},{"_id":"themes/aircloud/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1542027424424},{"_id":"themes/aircloud/.git/index","hash":"4c084237c3b91e44851998d07cd9223ce2b5111e","modified":1542027428057},{"_id":"themes/aircloud/.git/packed-refs","hash":"37a0194863688d62201a162c2ed75b086db9f14c","modified":1542027428025},{"_id":"source/tags/index.md","hash":"597f8d6c8358e7412ead9e0ef886c09c8f848118","modified":1542028125983},{"_id":"source/categories/index.md","hash":"1264dc90ef1aa2fa525dcb18c26989bf3f3207f8","modified":1542028083356},{"_id":"themes/aircloud/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1542027428038},{"_id":"themes/aircloud/languages/zh.yml","hash":"9ffaff1f5d240c94e44f9ef3b02bbae146af0dd4","modified":1542027428039},{"_id":"themes/aircloud/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1542027428039},{"_id":"themes/aircloud/layout/about.ejs","hash":"cec034166ce08d2f8c961178e07b2f0ceac95cf2","modified":1542027428040},{"_id":"themes/aircloud/layout/archive.ejs","hash":"4fd37643dd1fc8d474b773ec5f365634078fd175","modified":1542027428040},{"_id":"themes/aircloud/layout/index.ejs","hash":"a4ebf04c9fef0e3837c005e8e2c92902fe7c47f8","modified":1542027428041},{"_id":"themes/aircloud/layout/layout.ejs","hash":"7efd113aee90e698e187d0ea1f0b42a1c00d210e","modified":1542027428041},{"_id":"themes/aircloud/layout/post.ejs","hash":"6aa9422ee26dce286f449da1f2fb7883e1c5b9dd","modified":1542027428041},{"_id":"themes/aircloud/layout/tags.ejs","hash":"21990104ff12deafa1b5d25593180bb838358ec3","modified":1542027428041},{"_id":"source/_posts/yuque/Github+Hexo搭建个人博客详细教程.md","hash":"b75032e0fdd94e9528c80a7d3395d6f54a875855","modified":1542094568048},{"_id":"source/_posts/yuque/Markdown语法初探.md","hash":"6b5808ea588ea7fd0318324c5441ed0004b16a8f","modified":1542094568053},{"_id":"source/_posts/yuque/ZYLoading--自定义loading控件.md","hash":"28fc5ed4c861fdd2997e98081017bb93b576e3d2","modified":1542094568052},{"_id":"source/_posts/yuque/iOS 技巧合集.md","hash":"14530ab0df0548ea34d8a81c008f9e99b1f0fdc5","modified":1542094568054},{"_id":"source/_posts/yuque/使用语雀管理博客.md","hash":"f595caff0c1c2739f2f0eae17c10c9ff5b3aee40","modified":1542094568046},{"_id":"source/_posts/yuque/fastlane指南.md","hash":"3f38ecfde61e3919e198fd8d2ba66397f30313d3","modified":1542094568049},{"_id":"themes/aircloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428043},{"_id":"themes/aircloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428043},{"_id":"themes/aircloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428045},{"_id":"themes/aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428045},{"_id":"themes/aircloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428049},{"_id":"themes/aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428050},{"_id":"themes/aircloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428051},{"_id":"themes/aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542027428051},{"_id":"themes/aircloud/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1542027424424},{"_id":"themes/aircloud/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1542027424425},{"_id":"themes/aircloud/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1542027424425},{"_id":"themes/aircloud/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1542027424426},{"_id":"themes/aircloud/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1542027424426},{"_id":"themes/aircloud/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1542027424425},{"_id":"themes/aircloud/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1542027424426},{"_id":"themes/aircloud/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1542027424424},{"_id":"themes/aircloud/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1542027424425},{"_id":"themes/aircloud/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1542027424426},{"_id":"themes/aircloud/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1542027424426},{"_id":"themes/aircloud/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1542027424424},{"_id":"themes/aircloud/.git/logs/HEAD","hash":"7a457fccae73366fd3385276d0ab009e62a9f5a6","modified":1542027428028},{"_id":"themes/aircloud/layout/_partial/donate.ejs","hash":"81c976a3b7fa5c47ef61181d537220eaf1d55eac","modified":1542027428039},{"_id":"themes/aircloud/layout/_partial/head.ejs","hash":"3f18d5d4951a205bab25b08d6bf85b054c84a21b","modified":1542027428040},{"_id":"themes/aircloud/layout/_partial/footer.ejs","hash":"33db88f1b03548c5181c04d44387dc68a9c4cdf6","modified":1542027428039},{"_id":"themes/aircloud/layout/_partial/nav.ejs","hash":"b2a67207b3409802df29ed451e39c5ade872cad0","modified":1542027428040},{"_id":"themes/aircloud/layout/_partial/toc.ejs","hash":"41d11d159011466f0b6272aca9a74df8642b693f","modified":1542027428040},{"_id":"themes/aircloud/source/_less/archive.less","hash":"5538d38614960e69b97a7f80f38b5933851212b8","modified":1542027428044},{"_id":"themes/aircloud/source/_less/archive.css","hash":"905efcc06a62d1e8b60df0e12434afa353378d3a","modified":1542027428043},{"_id":"themes/aircloud/source/_less/common.css","hash":"7f21f9554fc126dc73d5f88884d1a5f94d1c4740","modified":1542027428044},{"_id":"themes/aircloud/source/_less/common.less","hash":"f3bda389953533dbb69651f078a8606b0d9a5820","modified":1542027428045},{"_id":"themes/aircloud/source/_less/donate.less","hash":"d63139f4aa148bf894afa5c1007a4398696a0e4c","modified":1542027428046},{"_id":"themes/aircloud/source/_less/donate.css","hash":"ae6a676a42321512f0536c5230bb53084aaf2c2f","modified":1542027428045},{"_id":"themes/aircloud/source/_less/gitment.css","hash":"7d560b64e367129f98424052c660ae82b03a1d02","modified":1542027428046},{"_id":"themes/aircloud/source/_less/gitment.less","hash":"916deb8ecdee798d7a9b43b544e31dfd5bbd6de4","modified":1542027428046},{"_id":"themes/aircloud/source/_less/hightlight.css","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1542027428047},{"_id":"themes/aircloud/source/_less/hightlight.less","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1542027428047},{"_id":"themes/aircloud/source/_less/index.css","hash":"52fe4d1b93dfb4c9c9d63e24862354b6a0ef47f8","modified":1542027428047},{"_id":"themes/aircloud/source/_less/index.less","hash":"502d689e3568056cc27dd4da7da2499b0be4253e","modified":1542027428048},{"_id":"themes/aircloud/source/_less/layout.css","hash":"7b3163f08ac7060f322853a53d81ad86e2a68d1f","modified":1542027428048},{"_id":"themes/aircloud/source/_less/layout.less","hash":"194ac7db2eeee7307fcb7470302f8172100181fb","modified":1542027428048},{"_id":"themes/aircloud/source/_less/nav.css","hash":"492249435dc74bb311c8a7b71b5feb86078116a6","modified":1542027428049},{"_id":"themes/aircloud/source/_less/nav.less","hash":"b30e0041866d36435ca8cb31a66d06136e2ee1c8","modified":1542027428049},{"_id":"themes/aircloud/source/_less/post.css","hash":"e45dffaeb913f8c33ec80ad436331e0c52775efb","modified":1542027428050},{"_id":"themes/aircloud/source/_less/post.less","hash":"106139ba1d06d50c77088e381f8fabd39427aca0","modified":1542027428050},{"_id":"themes/aircloud/source/_less/tag.css","hash":"3250887aaae0bc62bd82082d000ce3de8cc55ab6","modified":1542027428051},{"_id":"themes/aircloud/source/_less/tag.less","hash":"47e1ce2f55e2b62beefd0f69dfe7deb594e7b309","modified":1542027428051},{"_id":"themes/aircloud/source/_less/toc.css","hash":"152d9b5f718cf3392edef9cb07327b431d0aca5a","modified":1542027428052},{"_id":"themes/aircloud/source/_less/toc.less","hash":"bfe4006edf38f5329e00ecfff5f03240a2184a85","modified":1542027428052},{"_id":"themes/aircloud/source/_less/variables.css","hash":"9768d38beea904c4febc704192a49c8f7ae6e06c","modified":1542027428053},{"_id":"themes/aircloud/source/_less/variables.less","hash":"dbbb6dba6ed3c9b92ebd8109b7fd8eb5dc2b884d","modified":1542027428053},{"_id":"themes/aircloud/source/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1542027428054},{"_id":"themes/aircloud/source/js/index.js","hash":"1a773830be0ba57636f430918c8b888ff7dbc444","modified":1542027428057},{"_id":"themes/aircloud/source/css/aircloud.css","hash":"615ca3dabde179c35a1e5f7c6f36ba49414fb435","modified":1542027428054},{"_id":"themes/aircloud/source/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1542027428055},{"_id":"themes/aircloud/.git/objects/pack/pack-5186e968318c9979b4f191700b34b3c118271134.idx","hash":"182e9f086cf9e1b33ba63086b4379d6638f3c16f","modified":1542027428015},{"_id":"themes/aircloud/.git/refs/heads/master","hash":"43c2c3e66c73508637fced9ce43a3c7e01f94bdd","modified":1542027428028},{"_id":"themes/aircloud/source/_less/_partial/footer.css","hash":"e84340aaa76f8eb303ea2fbcc7d1a49ab024f16b","modified":1542027428043},{"_id":"themes/aircloud/source/_less/_partial/footer.less","hash":"52fc05828f77d9a5a65eb0aca37edc22463d885f","modified":1542027428043},{"_id":"themes/aircloud/source/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1542027428056},{"_id":"themes/aircloud/.git/objects/pack/pack-5186e968318c9979b4f191700b34b3c118271134.pack","hash":"807eaa4f8393a4f4bdc765f53d532a6140d33e88","modified":1542027428015},{"_id":"themes/aircloud/.git/logs/refs/heads/master","hash":"7a457fccae73366fd3385276d0ab009e62a9f5a6","modified":1542027428029},{"_id":"themes/aircloud/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1542027428027},{"_id":"themes/aircloud/.git/logs/refs/remotes/origin/HEAD","hash":"7a457fccae73366fd3385276d0ab009e62a9f5a6","modified":1542027428027},{"_id":"public/about/index.html","hash":"8187a1b28191e148770e021193611fd4b84bd0a8","modified":1542094587076},{"_id":"public/categories/index.html","hash":"b4e4aaf1e31aa16125db8295f4e2cf3ac1fde3f1","modified":1542094587076},{"_id":"public/tags/index.html","hash":"534acafbebf0fbfc284cfab8762316072bff138f","modified":1542094587077},{"_id":"public/2018/11/10/yuque/Github+Hexo搭建个人博客详细教程/index.html","hash":"93a33ccf4ea1cd32bb965bfffe53a60443a93ccd","modified":1542094587077},{"_id":"public/2018/11/09/yuque/使用语雀管理博客/index.html","hash":"690996ea067ba3150d51264de11aba6b1d02015f","modified":1542094587077},{"_id":"public/2016/08/11/yuque/Markdown语法初探/index.html","hash":"e1ddae4058d9724646aedc338647425f773067eb","modified":1542094587077},{"_id":"public/archives/index.html","hash":"1e73ff911bdea73c19617516bac8d4d7442935b8","modified":1542094587077},{"_id":"public/archives/2016/index.html","hash":"1e73ff911bdea73c19617516bac8d4d7442935b8","modified":1542094587077},{"_id":"public/archives/2016/08/index.html","hash":"1e73ff911bdea73c19617516bac8d4d7442935b8","modified":1542094587077},{"_id":"public/archives/2017/index.html","hash":"1e73ff911bdea73c19617516bac8d4d7442935b8","modified":1542094587077},{"_id":"public/archives/2017/02/index.html","hash":"1e73ff911bdea73c19617516bac8d4d7442935b8","modified":1542094587078},{"_id":"public/archives/2017/12/index.html","hash":"1e73ff911bdea73c19617516bac8d4d7442935b8","modified":1542094587078},{"_id":"public/archives/2018/index.html","hash":"1e73ff911bdea73c19617516bac8d4d7442935b8","modified":1542094587078},{"_id":"public/archives/2018/11/index.html","hash":"1e73ff911bdea73c19617516bac8d4d7442935b8","modified":1542094587078},{"_id":"public/categories/教程/index.html","hash":"cc7830bac39b5a176a9ba1b907443fa8e2f4fede","modified":1542094587078},{"_id":"public/categories/组件/index.html","hash":"cc7830bac39b5a176a9ba1b907443fa8e2f4fede","modified":1542094587078},{"_id":"public/categories/开发技巧/index.html","hash":"cc7830bac39b5a176a9ba1b907443fa8e2f4fede","modified":1542094587078},{"_id":"public/tags/Hexo/index.html","hash":"12f85ae2acd9af7e2c1a513c75d06a7b5cfab606","modified":1542094587078},{"_id":"public/tags/markdown/index.html","hash":"12f85ae2acd9af7e2c1a513c75d06a7b5cfab606","modified":1542094587078},{"_id":"public/tags/ZYLoading/index.html","hash":"12f85ae2acd9af7e2c1a513c75d06a7b5cfab606","modified":1542094587078},{"_id":"public/tags/iOS/index.html","hash":"12f85ae2acd9af7e2c1a513c75d06a7b5cfab606","modified":1542094587078},{"_id":"public/tags/自动化、fastlane/index.html","hash":"12f85ae2acd9af7e2c1a513c75d06a7b5cfab606","modified":1542094587079},{"_id":"public/index.html","hash":"f01ccc47008f0120def300586ec9767b43a464b6","modified":1542094587079},{"_id":"public/2018/11/08/yuque/fastlane指南/index.html","hash":"f18da8b6d1dcfb2cc5ae22945bf774df88695fe8","modified":1542094587079},{"_id":"public/2017/12/14/yuque/ZYLoading--自定义loading控件/index.html","hash":"87b435ff4a7346d55271aa563d6539b9c9e33224","modified":1542094587079},{"_id":"public/2017/02/20/yuque/iOS 技巧合集/index.html","hash":"135850f7ab2f041068c9d55d41d7b98b6ac5bd8c","modified":1542094587079},{"_id":"public/CNAME","hash":"ff2f59c6b412222407781fdc7d9a8b96fe7cc391","modified":1542094587083},{"_id":"public/img/avatar.jpeg","hash":"d2aa8e646ac5c63dea059226c381cdc0caa10ae3","modified":1542094587083},{"_id":"public/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1542094587083},{"_id":"public/js/index.js","hash":"1a773830be0ba57636f430918c8b888ff7dbc444","modified":1542094587090},{"_id":"public/css/aircloud.css","hash":"615ca3dabde179c35a1e5f7c6f36ba49414fb435","modified":1542094587090},{"_id":"public/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1542094587090},{"_id":"public/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1542094587090}],"Category":[{"name":"教程","_id":"cjoffau370005d179qbgiadnk"},{"name":"组件","_id":"cjoffau3i000fd1795o8e5nxo"},{"name":"开发技巧","_id":"cjoffau3l000ld179obe4a557"}],"Data":[],"Page":[{"layout":"about","title":"关于","_content":"\n路漫漫其修远兮，吾将上下而求索~","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"关于\"\n---\n\n路漫漫其修远兮，吾将上下而求索~","date":"2018-11-13T05:43:51.828Z","updated":"2018-11-13T05:43:51.828Z","path":"about/index.html","comments":1,"_id":"cjoffau1h0000d1799f3xqvj6","content":"<p>路漫漫其修远兮，吾将上下而求索~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>路漫漫其修远兮，吾将上下而求索~</p>\n"},{"layout":"categories","title":"分类","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"分类\"\n---\n","date":"2018-11-12T13:08:03.356Z","updated":"2018-11-12T13:08:03.356Z","path":"categories/index.html","comments":1,"_id":"cjoffau2y0001d179yvvku5k7","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"标签","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"标签\"\n---\n","date":"2018-11-12T13:08:45.983Z","updated":"2018-11-12T13:08:45.983Z","path":"tags/index.html","comments":1,"_id":"cjoffau340003d179e45b9qjg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Github+Hexo搭建个人博客详细教程","date":"2018-11-10T01:14:00.000Z","_content":"\n#### <a name=\"sl6tws\"></a>安装Node.js\n1. 安装nvm\n```powershell\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash\n```\n2. 安装node\n```powershell\n$ nvm install node\n```\n3. 验证node是否安装成功\n```powershell\n$  node -v\n$  v8.12.0\n```\n#### <a name=\"t8a8gr\"></a>安装Hexo\n```powershell\n$ npm install -g hexo\n```\n安装完成后，进入一个文件夹，执行\n```powershell\n$ hexo init\n$ npm install hexo --save\n```\n#### <a name=\"ua2lyy\"></a>Github创建个人仓库\n在Github上创建一个新仓库，并命名为  `你的github用户名.github.io`\n#### <a name=\"oefdft\"></a>配置\\_config.yml\n```plain\ndeploy:\n   type: git\n   repository: https://github.com/username/username.github.io\n   branch: master\n```\n#### <a name=\"s6t5gs\"></a>编写博客\n```plain\n$ hexo new post '文章标题'\n```\n在source/\\_posts/ 文件夹下新建了博客，文件格式为markdown，编辑此文件。\n#### <a name=\"ybauhr\"></a>推送站点\n```powershell\n$ hexo g\n$ hexo d\n```\n上传成功后，访问[https://username.github.io](https://username.github.io)\n\n---\n\n接下来再介绍一些进阶用法：\n#### <a name=\"padgfi\"></a>多台电脑管理hexo博客\n利用github管理博客内容，进行多台电脑的同步，既可以新建一个仓库单独进行博客内容的管理，也可以在现有仓库的基础上新建一个分支进行管理，相比较而言新建分支管理更加便捷。\n1. 新建分支 hexo\n2. 在设置里将hexo设置为默认分支\n3. clone代码到本地，在hexo分支下进行博客的编写，利用hexo d同步到master分支，同时手动同步到hexo分支\n4. 新电脑需要重新安装hexo环境，安装完成后clone代码到本地\n#### <a name=\"xhgmdd\"></a>绑定个人域名\n拥有自己的独立域名能瞬间提升博客的逼格，接下来就是绑定个人域名的流程\n1. 购买域名\n      一般去阿里云购买，具体流程网上很多，就不再细说\n2. 配置DNS地址\n      在阿里云后台配置DNS信息，将[https://username.github.io](https://username.github.io)的ip绑定到你想要绑定的域名上\n3. 配置hexo文件\n      在source目录下，新建文件，命名为`CNAME`，填入域名地址。\n4. 发布到github\n我的博客地址是[http://www.ileafly.com](http://www.ileafly.com)\n#### <a name=\"yst3oh\"></a>绑定语雀管理博客内容\n可以利用语雀管理博客内容，非常方便，详细流程可参考[使用语雀管理博客](http://www.ileafly.com/2018/11/09/yuque/使用语雀管理博客/)。\n#### <a name=\"qvkuep\"></a>自定义主题\nHexo有非常非常多的主题，你可以在[Themes | Hexo](https://hexo.io/themes/index.html)浏览这些主题，选择你喜欢的主题进行使用。\n我比较喜欢的主题是[Anisina](https://github.com/haojen/hexo-theme-Anisina)和[cafe](https://github.com/giscafer/hexo-theme-cafe)，这里就以[cafe](https://github.com/giscafer/hexo-theme-cafe)为例简述一下集成的流程。\n```\n# 安装\n$ git clone https://github.com/giscafer/hexo-theme-cafe.git themes/cafe\n\n# 修改博客配置文件 `_config.yml` 主题属性 theme 为 `cafe`.\n\n# 更新cafe文件\ncd themes/cafe\ngit pull\n\n# 主题 themes/cafe/_config.yml 文件内容参考说明配置 https://github.com/giscafer/hexo-theme-cafe/blob/master/_config.yml\n```\n#### <a name=\"ctisce\"></a>集成评论\n目前比较好用的评论是[LiveRe](https://www.livere.com)，注册并按照City版，获取uid。在\\_\\_config.yml作如下配置：\n```ruby\ncomment:\n   type: livere\n   livere_id: 'city'\n   livere_uid: '*******'\n```\n\n\n\n","source":"_posts/yuque/Github+Hexo搭建个人博客详细教程.md","raw":"\ntitle: Github+Hexo搭建个人博客详细教程\ndate: 2018-11-10 09:14:00 +0800\ntags: [Hexo]\ncategories: 教程\n---\n\n#### <a name=\"sl6tws\"></a>安装Node.js\n1. 安装nvm\n```powershell\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash\n```\n2. 安装node\n```powershell\n$ nvm install node\n```\n3. 验证node是否安装成功\n```powershell\n$  node -v\n$  v8.12.0\n```\n#### <a name=\"t8a8gr\"></a>安装Hexo\n```powershell\n$ npm install -g hexo\n```\n安装完成后，进入一个文件夹，执行\n```powershell\n$ hexo init\n$ npm install hexo --save\n```\n#### <a name=\"ua2lyy\"></a>Github创建个人仓库\n在Github上创建一个新仓库，并命名为  `你的github用户名.github.io`\n#### <a name=\"oefdft\"></a>配置\\_config.yml\n```plain\ndeploy:\n   type: git\n   repository: https://github.com/username/username.github.io\n   branch: master\n```\n#### <a name=\"s6t5gs\"></a>编写博客\n```plain\n$ hexo new post '文章标题'\n```\n在source/\\_posts/ 文件夹下新建了博客，文件格式为markdown，编辑此文件。\n#### <a name=\"ybauhr\"></a>推送站点\n```powershell\n$ hexo g\n$ hexo d\n```\n上传成功后，访问[https://username.github.io](https://username.github.io)\n\n---\n\n接下来再介绍一些进阶用法：\n#### <a name=\"padgfi\"></a>多台电脑管理hexo博客\n利用github管理博客内容，进行多台电脑的同步，既可以新建一个仓库单独进行博客内容的管理，也可以在现有仓库的基础上新建一个分支进行管理，相比较而言新建分支管理更加便捷。\n1. 新建分支 hexo\n2. 在设置里将hexo设置为默认分支\n3. clone代码到本地，在hexo分支下进行博客的编写，利用hexo d同步到master分支，同时手动同步到hexo分支\n4. 新电脑需要重新安装hexo环境，安装完成后clone代码到本地\n#### <a name=\"xhgmdd\"></a>绑定个人域名\n拥有自己的独立域名能瞬间提升博客的逼格，接下来就是绑定个人域名的流程\n1. 购买域名\n      一般去阿里云购买，具体流程网上很多，就不再细说\n2. 配置DNS地址\n      在阿里云后台配置DNS信息，将[https://username.github.io](https://username.github.io)的ip绑定到你想要绑定的域名上\n3. 配置hexo文件\n      在source目录下，新建文件，命名为`CNAME`，填入域名地址。\n4. 发布到github\n我的博客地址是[http://www.ileafly.com](http://www.ileafly.com)\n#### <a name=\"yst3oh\"></a>绑定语雀管理博客内容\n可以利用语雀管理博客内容，非常方便，详细流程可参考[使用语雀管理博客](http://www.ileafly.com/2018/11/09/yuque/使用语雀管理博客/)。\n#### <a name=\"qvkuep\"></a>自定义主题\nHexo有非常非常多的主题，你可以在[Themes | Hexo](https://hexo.io/themes/index.html)浏览这些主题，选择你喜欢的主题进行使用。\n我比较喜欢的主题是[Anisina](https://github.com/haojen/hexo-theme-Anisina)和[cafe](https://github.com/giscafer/hexo-theme-cafe)，这里就以[cafe](https://github.com/giscafer/hexo-theme-cafe)为例简述一下集成的流程。\n```\n# 安装\n$ git clone https://github.com/giscafer/hexo-theme-cafe.git themes/cafe\n\n# 修改博客配置文件 `_config.yml` 主题属性 theme 为 `cafe`.\n\n# 更新cafe文件\ncd themes/cafe\ngit pull\n\n# 主题 themes/cafe/_config.yml 文件内容参考说明配置 https://github.com/giscafer/hexo-theme-cafe/blob/master/_config.yml\n```\n#### <a name=\"ctisce\"></a>集成评论\n目前比较好用的评论是[LiveRe](https://www.livere.com)，注册并按照City版，获取uid。在\\_\\_config.yml作如下配置：\n```ruby\ncomment:\n   type: livere\n   livere_id: 'city'\n   livere_uid: '*******'\n```\n\n\n\n","slug":"yuque/Github+Hexo搭建个人博客详细教程","published":1,"updated":"2018-11-13T07:36:08.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoffau300002d17993qvkvxj","content":"<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a><a name=\"sl6tws\"></a>安装Node.js</h4><ol>\n<li><p>安装nvm</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.<span class=\"number\">30.2</span>/install.sh | bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装node</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install node</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证node是否安装成功</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  node -v</span><br><span class=\"line\">$  v8.<span class=\"number\">12.0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a><a name=\"t8a8gr\"></a>安装Hexo</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>安装完成后，进入一个文件夹，执行<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ npm install hexo --save</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Github创建个人仓库\"><a href=\"#Github创建个人仓库\" class=\"headerlink\" title=\"Github创建个人仓库\"></a><a name=\"ua2lyy\"></a>Github创建个人仓库</h4><p>在Github上创建一个新仓库，并命名为  <code>你的github用户名.github.io</code></p>\n<h4 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置_config.yml\"></a><a name=\"oefdft\"></a>配置_config.yml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">   type: git</span><br><span class=\"line\">   repository: https://github.com/username/username.github.io</span><br><span class=\"line\">   branch: master</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写博客\"><a href=\"#编写博客\" class=\"headerlink\" title=\"编写博客\"></a><a name=\"s6t5gs\"></a>编写博客</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post &apos;文章标题&apos;</span><br></pre></td></tr></table></figure>\n<p>在source/_posts/ 文件夹下新建了博客，文件格式为markdown，编辑此文件。</p>\n<h4 id=\"推送站点\"><a href=\"#推送站点\" class=\"headerlink\" title=\"推送站点\"></a><a name=\"ybauhr\"></a>推送站点</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>上传成功后，访问<a href=\"https://username.github.io\" target=\"_blank\" rel=\"noopener\">https://username.github.io</a></p>\n<hr>\n<p>接下来再介绍一些进阶用法：</p>\n<h4 id=\"多台电脑管理hexo博客\"><a href=\"#多台电脑管理hexo博客\" class=\"headerlink\" title=\"多台电脑管理hexo博客\"></a><a name=\"padgfi\"></a>多台电脑管理hexo博客</h4><p>利用github管理博客内容，进行多台电脑的同步，既可以新建一个仓库单独进行博客内容的管理，也可以在现有仓库的基础上新建一个分支进行管理，相比较而言新建分支管理更加便捷。</p>\n<ol>\n<li>新建分支 hexo</li>\n<li>在设置里将hexo设置为默认分支</li>\n<li>clone代码到本地，在hexo分支下进行博客的编写，利用hexo d同步到master分支，同时手动同步到hexo分支</li>\n<li>新电脑需要重新安装hexo环境，安装完成后clone代码到本地<h4 id=\"绑定个人域名\"><a href=\"#绑定个人域名\" class=\"headerlink\" title=\"绑定个人域名\"></a><a name=\"xhgmdd\"></a>绑定个人域名</h4>拥有自己的独立域名能瞬间提升博客的逼格，接下来就是绑定个人域名的流程</li>\n<li>购买域名<br>   一般去阿里云购买，具体流程网上很多，就不再细说</li>\n<li>配置DNS地址<br>   在阿里云后台配置DNS信息，将<a href=\"https://username.github.io\" target=\"_blank\" rel=\"noopener\">https://username.github.io</a>的ip绑定到你想要绑定的域名上</li>\n<li>配置hexo文件<br>   在source目录下，新建文件，命名为<code>CNAME</code>，填入域名地址。</li>\n<li>发布到github<br>我的博客地址是<a href=\"http://www.ileafly.com\">http://www.ileafly.com</a><h4 id=\"绑定语雀管理博客内容\"><a href=\"#绑定语雀管理博客内容\" class=\"headerlink\" title=\"绑定语雀管理博客内容\"></a><a name=\"yst3oh\"></a>绑定语雀管理博客内容</h4>可以利用语雀管理博客内容，非常方便，详细流程可参考<a href=\"http://www.ileafly.com/2018/11/09/yuque/使用语雀管理博客/\">使用语雀管理博客</a>。<h4 id=\"自定义主题\"><a href=\"#自定义主题\" class=\"headerlink\" title=\"自定义主题\"></a><a name=\"qvkuep\"></a>自定义主题</h4>Hexo有非常非常多的主题，你可以在<a href=\"https://hexo.io/themes/index.html\" target=\"_blank\" rel=\"noopener\">Themes | Hexo</a>浏览这些主题，选择你喜欢的主题进行使用。<br>我比较喜欢的主题是<a href=\"https://github.com/haojen/hexo-theme-Anisina\" target=\"_blank\" rel=\"noopener\">Anisina</a>和<a href=\"https://github.com/giscafer/hexo-theme-cafe\" target=\"_blank\" rel=\"noopener\">cafe</a>，这里就以<a href=\"https://github.com/giscafer/hexo-theme-cafe\" target=\"_blank\" rel=\"noopener\">cafe</a>为例简述一下集成的流程。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">$ git clone https://github.com/giscafer/hexo-theme-cafe.git themes/cafe</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改博客配置文件 `_config.yml` 主题属性 theme 为 `cafe`.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新cafe文件</span><br><span class=\"line\">cd themes/cafe</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"># 主题 themes/cafe/_config.yml 文件内容参考说明配置 https://github.com/giscafer/hexo-theme-cafe/blob/master/_config.yml</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"集成评论\"><a href=\"#集成评论\" class=\"headerlink\" title=\"集成评论\"></a><a name=\"ctisce\"></a>集成评论</h4><p>目前比较好用的评论是<a href=\"https://www.livere.com\" target=\"_blank\" rel=\"noopener\">LiveRe</a>，注册并按照City版，获取uid。在__config.yml作如下配置：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">comment:</span></span><br><span class=\"line\">   <span class=\"symbol\">type:</span> livere</span><br><span class=\"line\">   <span class=\"symbol\">livere_id:</span> <span class=\"string\">'city'</span></span><br><span class=\"line\">   <span class=\"symbol\">livere_uid:</span> <span class=\"string\">'*******'</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a><a name=\"sl6tws\"></a>安装Node.js</h4><ol>\n<li><p>安装nvm</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.<span class=\"number\">30.2</span>/install.sh | bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装node</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install node</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证node是否安装成功</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  node -v</span><br><span class=\"line\">$  v8.<span class=\"number\">12.0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a><a name=\"t8a8gr\"></a>安装Hexo</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n<p>安装完成后，进入一个文件夹，执行<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ npm install hexo --save</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Github创建个人仓库\"><a href=\"#Github创建个人仓库\" class=\"headerlink\" title=\"Github创建个人仓库\"></a><a name=\"ua2lyy\"></a>Github创建个人仓库</h4><p>在Github上创建一个新仓库，并命名为  <code>你的github用户名.github.io</code></p>\n<h4 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置_config.yml\"></a><a name=\"oefdft\"></a>配置_config.yml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">   type: git</span><br><span class=\"line\">   repository: https://github.com/username/username.github.io</span><br><span class=\"line\">   branch: master</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写博客\"><a href=\"#编写博客\" class=\"headerlink\" title=\"编写博客\"></a><a name=\"s6t5gs\"></a>编写博客</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post &apos;文章标题&apos;</span><br></pre></td></tr></table></figure>\n<p>在source/_posts/ 文件夹下新建了博客，文件格式为markdown，编辑此文件。</p>\n<h4 id=\"推送站点\"><a href=\"#推送站点\" class=\"headerlink\" title=\"推送站点\"></a><a name=\"ybauhr\"></a>推送站点</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>上传成功后，访问<a href=\"https://username.github.io\" target=\"_blank\" rel=\"noopener\">https://username.github.io</a></p>\n<hr>\n<p>接下来再介绍一些进阶用法：</p>\n<h4 id=\"多台电脑管理hexo博客\"><a href=\"#多台电脑管理hexo博客\" class=\"headerlink\" title=\"多台电脑管理hexo博客\"></a><a name=\"padgfi\"></a>多台电脑管理hexo博客</h4><p>利用github管理博客内容，进行多台电脑的同步，既可以新建一个仓库单独进行博客内容的管理，也可以在现有仓库的基础上新建一个分支进行管理，相比较而言新建分支管理更加便捷。</p>\n<ol>\n<li>新建分支 hexo</li>\n<li>在设置里将hexo设置为默认分支</li>\n<li>clone代码到本地，在hexo分支下进行博客的编写，利用hexo d同步到master分支，同时手动同步到hexo分支</li>\n<li>新电脑需要重新安装hexo环境，安装完成后clone代码到本地<h4 id=\"绑定个人域名\"><a href=\"#绑定个人域名\" class=\"headerlink\" title=\"绑定个人域名\"></a><a name=\"xhgmdd\"></a>绑定个人域名</h4>拥有自己的独立域名能瞬间提升博客的逼格，接下来就是绑定个人域名的流程</li>\n<li>购买域名<br>   一般去阿里云购买，具体流程网上很多，就不再细说</li>\n<li>配置DNS地址<br>   在阿里云后台配置DNS信息，将<a href=\"https://username.github.io\" target=\"_blank\" rel=\"noopener\">https://username.github.io</a>的ip绑定到你想要绑定的域名上</li>\n<li>配置hexo文件<br>   在source目录下，新建文件，命名为<code>CNAME</code>，填入域名地址。</li>\n<li>发布到github<br>我的博客地址是<a href=\"http://www.ileafly.com\">http://www.ileafly.com</a><h4 id=\"绑定语雀管理博客内容\"><a href=\"#绑定语雀管理博客内容\" class=\"headerlink\" title=\"绑定语雀管理博客内容\"></a><a name=\"yst3oh\"></a>绑定语雀管理博客内容</h4>可以利用语雀管理博客内容，非常方便，详细流程可参考<a href=\"http://www.ileafly.com/2018/11/09/yuque/使用语雀管理博客/\">使用语雀管理博客</a>。<h4 id=\"自定义主题\"><a href=\"#自定义主题\" class=\"headerlink\" title=\"自定义主题\"></a><a name=\"qvkuep\"></a>自定义主题</h4>Hexo有非常非常多的主题，你可以在<a href=\"https://hexo.io/themes/index.html\" target=\"_blank\" rel=\"noopener\">Themes | Hexo</a>浏览这些主题，选择你喜欢的主题进行使用。<br>我比较喜欢的主题是<a href=\"https://github.com/haojen/hexo-theme-Anisina\" target=\"_blank\" rel=\"noopener\">Anisina</a>和<a href=\"https://github.com/giscafer/hexo-theme-cafe\" target=\"_blank\" rel=\"noopener\">cafe</a>，这里就以<a href=\"https://github.com/giscafer/hexo-theme-cafe\" target=\"_blank\" rel=\"noopener\">cafe</a>为例简述一下集成的流程。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">$ git clone https://github.com/giscafer/hexo-theme-cafe.git themes/cafe</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改博客配置文件 `_config.yml` 主题属性 theme 为 `cafe`.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新cafe文件</span><br><span class=\"line\">cd themes/cafe</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"># 主题 themes/cafe/_config.yml 文件内容参考说明配置 https://github.com/giscafer/hexo-theme-cafe/blob/master/_config.yml</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"集成评论\"><a href=\"#集成评论\" class=\"headerlink\" title=\"集成评论\"></a><a name=\"ctisce\"></a>集成评论</h4><p>目前比较好用的评论是<a href=\"https://www.livere.com\" target=\"_blank\" rel=\"noopener\">LiveRe</a>，注册并按照City版，获取uid。在__config.yml作如下配置：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">comment:</span></span><br><span class=\"line\">   <span class=\"symbol\">type:</span> livere</span><br><span class=\"line\">   <span class=\"symbol\">livere_id:</span> <span class=\"string\">'city'</span></span><br><span class=\"line\">   <span class=\"symbol\">livere_uid:</span> <span class=\"string\">'*******'</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Markdown语法初探","date":"2016-08-11T02:19:00.000Z","_content":"\nMarkdown是一种轻量级标记语言，这篇博客会总结一些经常使用的Markdown语法。\n\n#### <a name=\"7vhalw\"></a>标题\n```makedown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n# <a name=\"kb5oaz\"></a>一级标题\n## <a name=\"x39vgn\"></a>二级标题\n### <a name=\"fudbls\"></a>三级标题\n#### <a name=\"uoagan\"></a>四级标题\n##### <a name=\"gplupm\"></a>五级标题\n###### <a name=\"zhergt\"></a>六级标题\n#### <a name=\"171ptb\"></a>引用\n```makedown\n> 这是一段被引用的内容\n```\n> 这是一段被应用的内容\n\n#### <a name=\"mncspy\"></a>链接\n```makedown\n[链接文案](链接地址)\n```\n[链接](#mncspy)\n\n#### <a name=\"lfecoq\"></a>图片\n```makedown\n![Alt  text](image  url)\n```\n\n\n![yuque.jpeg | left | 360x140](https://cdn.nlark.com/yuque/0/2018/jpeg/183307/1541837693964-6f7a229c-9549-483c-9c1b-b487b20edbfa.jpeg \"\")\n\n\n#### <a name=\"t08aav\"></a>分割线\n```makedown\n---\n```\n\n---\n\n#### <a name=\"xilslv\"></a>无序列表\n```plain\n- 第一条\n- 第二条\n- 第三条\n```\n* 第一条\n* 第二条\n* 第三条\n\n#### <a name=\"kwhgeg\"></a>有序列表\n```makedown\n1. 第一条\n2. 第二条\n3. 第三条\n```\n1. 第一条\n2. 第二条\n3. 第三条\n\n#### <a name=\"tw9nqt\"></a>强调\n```makedown\n*斜体字*\n**加重强调**\n```\n*斜体字*\n__加重强调__\n\n","source":"_posts/yuque/Markdown语法初探.md","raw":"\ntitle: Markdown语法初探\ndate: 2016-08-11 10:19:00 +0800\ntags: [markdown]\ncategories: 教程\n---\n\nMarkdown是一种轻量级标记语言，这篇博客会总结一些经常使用的Markdown语法。\n\n#### <a name=\"7vhalw\"></a>标题\n```makedown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n# <a name=\"kb5oaz\"></a>一级标题\n## <a name=\"x39vgn\"></a>二级标题\n### <a name=\"fudbls\"></a>三级标题\n#### <a name=\"uoagan\"></a>四级标题\n##### <a name=\"gplupm\"></a>五级标题\n###### <a name=\"zhergt\"></a>六级标题\n#### <a name=\"171ptb\"></a>引用\n```makedown\n> 这是一段被引用的内容\n```\n> 这是一段被应用的内容\n\n#### <a name=\"mncspy\"></a>链接\n```makedown\n[链接文案](链接地址)\n```\n[链接](#mncspy)\n\n#### <a name=\"lfecoq\"></a>图片\n```makedown\n![Alt  text](image  url)\n```\n\n\n![yuque.jpeg | left | 360x140](https://cdn.nlark.com/yuque/0/2018/jpeg/183307/1541837693964-6f7a229c-9549-483c-9c1b-b487b20edbfa.jpeg \"\")\n\n\n#### <a name=\"t08aav\"></a>分割线\n```makedown\n---\n```\n\n---\n\n#### <a name=\"xilslv\"></a>无序列表\n```plain\n- 第一条\n- 第二条\n- 第三条\n```\n* 第一条\n* 第二条\n* 第三条\n\n#### <a name=\"kwhgeg\"></a>有序列表\n```makedown\n1. 第一条\n2. 第二条\n3. 第三条\n```\n1. 第一条\n2. 第二条\n3. 第三条\n\n#### <a name=\"tw9nqt\"></a>强调\n```makedown\n*斜体字*\n**加重强调**\n```\n*斜体字*\n__加重强调__\n\n","slug":"yuque/Markdown语法初探","published":1,"updated":"2018-11-13T07:36:08.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoffau350004d1799gqau5ba","content":"<p>Markdown是一种轻量级标记语言，这篇博客会总结一些经常使用的Markdown语法。</p>\n<h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a><a name=\"7vhalw\"></a>标题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a><a name=\"kb5oaz\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a><a name=\"x39vgn\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a><a name=\"fudbls\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a><a name=\"uoagan\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a><a name=\"gplupm\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a><a name=\"zhergt\"></a>六级标题</h6><h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a><a name=\"171ptb\"></a>引用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这是一段被引用的内容</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这是一段被应用的内容</p>\n</blockquote>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a><a name=\"mncspy\"></a>链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[链接文案](链接地址)</span><br></pre></td></tr></table></figure>\n<p><a href=\"#mncspy\">链接</a></p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a><a name=\"lfecoq\"></a>图片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![Alt  text](image  url)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2018/jpeg/183307/1541837693964-6f7a229c-9549-483c-9c1b-b487b20edbfa.jpeg\" alt=\"yuque.jpeg | left | 360x140\"></p>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a><a name=\"t08aav\"></a>分割线</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a><a name=\"xilslv\"></a>无序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 第一条</span><br><span class=\"line\">- 第二条</span><br><span class=\"line\">- 第三条</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一条</li>\n<li>第二条</li>\n<li>第三条</li>\n</ul>\n<h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a><a name=\"kwhgeg\"></a>有序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 第一条</span><br><span class=\"line\">2. 第二条</span><br><span class=\"line\">3. 第三条</span><br></pre></td></tr></table></figure>\n<ol>\n<li>第一条</li>\n<li>第二条</li>\n<li>第三条</li>\n</ol>\n<h4 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a><a name=\"tw9nqt\"></a>强调</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体字*</span><br><span class=\"line\">**加重强调**</span><br></pre></td></tr></table></figure>\n<p><em>斜体字</em><br><strong>加重强调</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Markdown是一种轻量级标记语言，这篇博客会总结一些经常使用的Markdown语法。</p>\n<h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a><a name=\"7vhalw\"></a>标题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a><a name=\"kb5oaz\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a><a name=\"x39vgn\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a><a name=\"fudbls\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a><a name=\"uoagan\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a><a name=\"gplupm\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a><a name=\"zhergt\"></a>六级标题</h6><h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a><a name=\"171ptb\"></a>引用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这是一段被引用的内容</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这是一段被应用的内容</p>\n</blockquote>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a><a name=\"mncspy\"></a>链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[链接文案](链接地址)</span><br></pre></td></tr></table></figure>\n<p><a href=\"#mncspy\">链接</a></p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a><a name=\"lfecoq\"></a>图片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![Alt  text](image  url)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2018/jpeg/183307/1541837693964-6f7a229c-9549-483c-9c1b-b487b20edbfa.jpeg\" alt=\"yuque.jpeg | left | 360x140\"></p>\n<h4 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a><a name=\"t08aav\"></a>分割线</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a><a name=\"xilslv\"></a>无序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 第一条</span><br><span class=\"line\">- 第二条</span><br><span class=\"line\">- 第三条</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一条</li>\n<li>第二条</li>\n<li>第三条</li>\n</ul>\n<h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a><a name=\"kwhgeg\"></a>有序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 第一条</span><br><span class=\"line\">2. 第二条</span><br><span class=\"line\">3. 第三条</span><br></pre></td></tr></table></figure>\n<ol>\n<li>第一条</li>\n<li>第二条</li>\n<li>第三条</li>\n</ol>\n<h4 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a><a name=\"tw9nqt\"></a>强调</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体字*</span><br><span class=\"line\">**加重强调**</span><br></pre></td></tr></table></figure>\n<p><em>斜体字</em><br><strong>加重强调</strong></p>\n"},{"title":"ZYLoading--自定义loading控件","date":"2017-12-14T11:20:00.000Z","_content":"\n移动端项目的开发离不开loading控件，通常为了能快速在项目中实现loading效果我们有几个主流的开源库可以选择：\n[MBProgressHUD](https://github.com/jdg/MBProgressHUD)、[SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)等\n\n然后，为了能让整体项目的loading效果显得更加贴切我就想创建一个loading控件，希望此控件能够比较方便的开启、停止loading效果，而且能易于集成和更换logo。\n\n为了达到这个目的，我创建了一个名为[ZYLoading](https://github.com/luzhiyongGit/ZYLoading.git)的控件，下面就为大家分享一下我这个控件的原理以及使用方法。\n\n## <a name=\"6gngga\"></a>原理分析\n\n此控件的核心思想是利用runtime机制给分类增加成员属性，通过给UIView扩展开启、停止loading的方法，从而实现任何UIView的实例都能方便的开启、停止loading动画\n\n```\n#import \"UIView+ZYLoadingView.h\"\n\n#import <objc/runtime.h>\n\nstatic char LoadingViewKey;\n\n@implementation UIView (ZYLoadingView)\n\n#pragma mark - Setter\n\n// 将创建的ZYLoadingView实例关联到分类\n- (void)setLoadingView:(ZYLoadingView *)loadingView {\n    [self willChangeValueForKey:@\"LoadingViewKey\"];\n    objc_setAssociatedObject(self, &LoadingViewKey, loadingView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    [self didChangeValueForKey:@\"LoadingViewKey\"];\n}\n\n// 获取关联的ZYLoadingView\n- (ZYLoadingView *)loadingView {\n    return objc_getAssociatedObject(self, &LoadingViewKey);\n}\n\n// 开启动画\n- (void)beginLoading {\n    if (!self.loadingView) {\n        self.loadingView = [[ZYLoadingView alloc] initWithFrame:self.bounds];\n    }\n    \n    [self addSubview:self.loadingView];\n    \n    [self.loadingView startAnimation];\n}\n\n// 停止动画\n- (void)endLoading {\n    if (self.loadingView) {\n        [self.loadingView stopAnimation];\n    }\n}\n\n@end\n\n```\n\n## <a name=\"onp8ux\"></a>使用方法\n\n##### <a name=\"yz1gkc\"></a>通过一组图片组合成动画\n\n```objectivec\n// 通过枚举选择图片组合动画\nZYLoadingConfigInstance.loadingType = ZYLoadingAnimateImages;\n// 图片名称\nZYLoadingConfigInstance.animateImageName = @\"zy_loading_\";\n// 图片尺寸\nZYLoadingConfigInstance.loopImageSize = CGSizeMake(37, 13);\n// 动画过渡时长\nZYLoadingConfigInstance.duration = 1.f;\n```\n\n##### <a name=\"qckoog\"></a>通过一张图旋转形成动画\n\n```objectivec\n// 通过枚举选择通过旋转图片展现loading动画\nZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;\n// 图片名称\nZYLoadingConfigInstance.loopImage = [UIImage imageNamed:@\"loading_circle\"];\n// 图片尺寸    \nZYLoadingConfigInstance.loopImageSize = CGSizeMake(60, 60);\n// 动画过渡时长    \nZYLoadingConfigInstance.duration = 0.25f;\n```\n\n##### <a name=\"1htvcz\"></a>通过一张图片旋转，另一张图片渐隐渐显组合成动画\n\n```objectivec\n// 通过枚举选择通过旋转图片展现loading动画    ZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;\n// 图片名称\nZYLoadingConfigInstance.loopImage = [UIImage imageNamed:@\"loading_circle\"];\n// 图片尺寸    \nZYLoadingConfigInstance.loopImageSize = CGSizeMake(60, 60);\n// logo图片名称\nZYLoadingConfigInstance.logoImage = [UIImage imageNamed:@\"loading_zhangyu\"];\n// logo图片尺寸\nZYLoadingConfigInstance.logoImageSize = CGSizeMake(40, 40);\n// 动画过渡时长\nZYLoadingConfigInstance.duration = 0.25f;\n```\n\n##### <a name=\"1v21fg\"></a>开启、停止动画\n\n```objectivec\n// 开启动画\n[self.view beginLoading];\n\n// 停止动画\n[self.view endLoading];\n```\n\n你也可以直接参考github上的[ZYLoading](https://github.com/luzhiyongGit/ZYLoading.git)\n\n","source":"_posts/yuque/ZYLoading--自定义loading控件.md","raw":"\ntitle: ZYLoading--自定义loading控件\ndate: 2017-12-14 19:20:00 +0800\ntags: [ZYLoading]\ncategories: 组件\n---\n\n移动端项目的开发离不开loading控件，通常为了能快速在项目中实现loading效果我们有几个主流的开源库可以选择：\n[MBProgressHUD](https://github.com/jdg/MBProgressHUD)、[SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD)等\n\n然后，为了能让整体项目的loading效果显得更加贴切我就想创建一个loading控件，希望此控件能够比较方便的开启、停止loading效果，而且能易于集成和更换logo。\n\n为了达到这个目的，我创建了一个名为[ZYLoading](https://github.com/luzhiyongGit/ZYLoading.git)的控件，下面就为大家分享一下我这个控件的原理以及使用方法。\n\n## <a name=\"6gngga\"></a>原理分析\n\n此控件的核心思想是利用runtime机制给分类增加成员属性，通过给UIView扩展开启、停止loading的方法，从而实现任何UIView的实例都能方便的开启、停止loading动画\n\n```\n#import \"UIView+ZYLoadingView.h\"\n\n#import <objc/runtime.h>\n\nstatic char LoadingViewKey;\n\n@implementation UIView (ZYLoadingView)\n\n#pragma mark - Setter\n\n// 将创建的ZYLoadingView实例关联到分类\n- (void)setLoadingView:(ZYLoadingView *)loadingView {\n    [self willChangeValueForKey:@\"LoadingViewKey\"];\n    objc_setAssociatedObject(self, &LoadingViewKey, loadingView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    [self didChangeValueForKey:@\"LoadingViewKey\"];\n}\n\n// 获取关联的ZYLoadingView\n- (ZYLoadingView *)loadingView {\n    return objc_getAssociatedObject(self, &LoadingViewKey);\n}\n\n// 开启动画\n- (void)beginLoading {\n    if (!self.loadingView) {\n        self.loadingView = [[ZYLoadingView alloc] initWithFrame:self.bounds];\n    }\n    \n    [self addSubview:self.loadingView];\n    \n    [self.loadingView startAnimation];\n}\n\n// 停止动画\n- (void)endLoading {\n    if (self.loadingView) {\n        [self.loadingView stopAnimation];\n    }\n}\n\n@end\n\n```\n\n## <a name=\"onp8ux\"></a>使用方法\n\n##### <a name=\"yz1gkc\"></a>通过一组图片组合成动画\n\n```objectivec\n// 通过枚举选择图片组合动画\nZYLoadingConfigInstance.loadingType = ZYLoadingAnimateImages;\n// 图片名称\nZYLoadingConfigInstance.animateImageName = @\"zy_loading_\";\n// 图片尺寸\nZYLoadingConfigInstance.loopImageSize = CGSizeMake(37, 13);\n// 动画过渡时长\nZYLoadingConfigInstance.duration = 1.f;\n```\n\n##### <a name=\"qckoog\"></a>通过一张图旋转形成动画\n\n```objectivec\n// 通过枚举选择通过旋转图片展现loading动画\nZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;\n// 图片名称\nZYLoadingConfigInstance.loopImage = [UIImage imageNamed:@\"loading_circle\"];\n// 图片尺寸    \nZYLoadingConfigInstance.loopImageSize = CGSizeMake(60, 60);\n// 动画过渡时长    \nZYLoadingConfigInstance.duration = 0.25f;\n```\n\n##### <a name=\"1htvcz\"></a>通过一张图片旋转，另一张图片渐隐渐显组合成动画\n\n```objectivec\n// 通过枚举选择通过旋转图片展现loading动画    ZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;\n// 图片名称\nZYLoadingConfigInstance.loopImage = [UIImage imageNamed:@\"loading_circle\"];\n// 图片尺寸    \nZYLoadingConfigInstance.loopImageSize = CGSizeMake(60, 60);\n// logo图片名称\nZYLoadingConfigInstance.logoImage = [UIImage imageNamed:@\"loading_zhangyu\"];\n// logo图片尺寸\nZYLoadingConfigInstance.logoImageSize = CGSizeMake(40, 40);\n// 动画过渡时长\nZYLoadingConfigInstance.duration = 0.25f;\n```\n\n##### <a name=\"1v21fg\"></a>开启、停止动画\n\n```objectivec\n// 开启动画\n[self.view beginLoading];\n\n// 停止动画\n[self.view endLoading];\n```\n\n你也可以直接参考github上的[ZYLoading](https://github.com/luzhiyongGit/ZYLoading.git)\n\n","slug":"yuque/ZYLoading--自定义loading控件","published":1,"updated":"2018-11-13T07:36:08.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoffau3a0007d17965m6k9lz","content":"<p>移动端项目的开发离不开loading控件，通常为了能快速在项目中实现loading效果我们有几个主流的开源库可以选择：<br><a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"noopener\">MBProgressHUD</a>、<a href=\"https://github.com/SVProgressHUD/SVProgressHUD\" target=\"_blank\" rel=\"noopener\">SVProgressHUD</a>等</p>\n<p>然后，为了能让整体项目的loading效果显得更加贴切我就想创建一个loading控件，希望此控件能够比较方便的开启、停止loading效果，而且能易于集成和更换logo。</p>\n<p>为了达到这个目的，我创建了一个名为<a href=\"https://github.com/luzhiyongGit/ZYLoading.git\" target=\"_blank\" rel=\"noopener\">ZYLoading</a>的控件，下面就为大家分享一下我这个控件的原理以及使用方法。</p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a><a name=\"6gngga\"></a>原理分析</h2><p>此控件的核心思想是利用runtime机制给分类增加成员属性，通过给UIView扩展开启、停止loading的方法，从而实现任何UIView的实例都能方便的开启、停止loading动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;UIView+ZYLoadingView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;objc/runtime.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">static char LoadingViewKey;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation UIView (ZYLoadingView)</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - Setter</span><br><span class=\"line\"></span><br><span class=\"line\">// 将创建的ZYLoadingView实例关联到分类</span><br><span class=\"line\">- (void)setLoadingView:(ZYLoadingView *)loadingView &#123;</span><br><span class=\"line\">    [self willChangeValueForKey:@&quot;LoadingViewKey&quot;];</span><br><span class=\"line\">    objc_setAssociatedObject(self, &amp;LoadingViewKey, loadingView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class=\"line\">    [self didChangeValueForKey:@&quot;LoadingViewKey&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取关联的ZYLoadingView</span><br><span class=\"line\">- (ZYLoadingView *)loadingView &#123;</span><br><span class=\"line\">    return objc_getAssociatedObject(self, &amp;LoadingViewKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 开启动画</span><br><span class=\"line\">- (void)beginLoading &#123;</span><br><span class=\"line\">    if (!self.loadingView) &#123;</span><br><span class=\"line\">        self.loadingView = [[ZYLoadingView alloc] initWithFrame:self.bounds];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self addSubview:self.loadingView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.loadingView startAnimation];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 停止动画</span><br><span class=\"line\">- (void)endLoading &#123;</span><br><span class=\"line\">    if (self.loadingView) &#123;</span><br><span class=\"line\">        [self.loadingView stopAnimation];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a><a name=\"onp8ux\"></a>使用方法</h2><h5 id=\"通过一组图片组合成动画\"><a href=\"#通过一组图片组合成动画\" class=\"headerlink\" title=\"通过一组图片组合成动画\"></a><a name=\"yz1gkc\"></a>通过一组图片组合成动画</h5><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过枚举选择图片组合动画</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loadingType = ZYLoadingAnimateImages;</span><br><span class=\"line\"><span class=\"comment\">// 图片名称</span></span><br><span class=\"line\">ZYLoadingConfigInstance.animateImageName = <span class=\"string\">@\"zy_loading_\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 图片尺寸</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImageSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">37</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\"><span class=\"comment\">// 动画过渡时长</span></span><br><span class=\"line\">ZYLoadingConfigInstance.duration = <span class=\"number\">1.</span>f;</span><br></pre></td></tr></table></figure>\n<h5 id=\"通过一张图旋转形成动画\"><a href=\"#通过一张图旋转形成动画\" class=\"headerlink\" title=\"通过一张图旋转形成动画\"></a><a name=\"qckoog\"></a>通过一张图旋转形成动画</h5><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过枚举选择通过旋转图片展现loading动画</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;</span><br><span class=\"line\"><span class=\"comment\">// 图片名称</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"loading_circle\"</span>];</span><br><span class=\"line\"><span class=\"comment\">// 图片尺寸    </span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImageSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">60</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"comment\">// 动画过渡时长    </span></span><br><span class=\"line\">ZYLoadingConfigInstance.duration = <span class=\"number\">0.25</span>f;</span><br></pre></td></tr></table></figure>\n<h5 id=\"通过一张图片旋转，另一张图片渐隐渐显组合成动画\"><a href=\"#通过一张图片旋转，另一张图片渐隐渐显组合成动画\" class=\"headerlink\" title=\"通过一张图片旋转，另一张图片渐隐渐显组合成动画\"></a><a name=\"1htvcz\"></a>通过一张图片旋转，另一张图片渐隐渐显组合成动画</h5><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过枚举选择通过旋转图片展现loading动画    ZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;</span></span><br><span class=\"line\"><span class=\"comment\">// 图片名称</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"loading_circle\"</span>];</span><br><span class=\"line\"><span class=\"comment\">// 图片尺寸    </span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImageSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">60</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"comment\">// logo图片名称</span></span><br><span class=\"line\">ZYLoadingConfigInstance.logoImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"loading_zhangyu\"</span>];</span><br><span class=\"line\"><span class=\"comment\">// logo图片尺寸</span></span><br><span class=\"line\">ZYLoadingConfigInstance.logoImageSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">40</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\"><span class=\"comment\">// 动画过渡时长</span></span><br><span class=\"line\">ZYLoadingConfigInstance.duration = <span class=\"number\">0.25</span>f;</span><br></pre></td></tr></table></figure>\n<h5 id=\"开启、停止动画\"><a href=\"#开启、停止动画\" class=\"headerlink\" title=\"开启、停止动画\"></a><a name=\"1v21fg\"></a>开启、停止动画</h5><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开启动画</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view beginLoading];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 停止动画</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view endLoading];</span><br></pre></td></tr></table></figure>\n<p>你也可以直接参考github上的<a href=\"https://github.com/luzhiyongGit/ZYLoading.git\" target=\"_blank\" rel=\"noopener\">ZYLoading</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>移动端项目的开发离不开loading控件，通常为了能快速在项目中实现loading效果我们有几个主流的开源库可以选择：<br><a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"noopener\">MBProgressHUD</a>、<a href=\"https://github.com/SVProgressHUD/SVProgressHUD\" target=\"_blank\" rel=\"noopener\">SVProgressHUD</a>等</p>\n<p>然后，为了能让整体项目的loading效果显得更加贴切我就想创建一个loading控件，希望此控件能够比较方便的开启、停止loading效果，而且能易于集成和更换logo。</p>\n<p>为了达到这个目的，我创建了一个名为<a href=\"https://github.com/luzhiyongGit/ZYLoading.git\" target=\"_blank\" rel=\"noopener\">ZYLoading</a>的控件，下面就为大家分享一下我这个控件的原理以及使用方法。</p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a><a name=\"6gngga\"></a>原理分析</h2><p>此控件的核心思想是利用runtime机制给分类增加成员属性，通过给UIView扩展开启、停止loading的方法，从而实现任何UIView的实例都能方便的开启、停止loading动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;UIView+ZYLoadingView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;objc/runtime.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">static char LoadingViewKey;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation UIView (ZYLoadingView)</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - Setter</span><br><span class=\"line\"></span><br><span class=\"line\">// 将创建的ZYLoadingView实例关联到分类</span><br><span class=\"line\">- (void)setLoadingView:(ZYLoadingView *)loadingView &#123;</span><br><span class=\"line\">    [self willChangeValueForKey:@&quot;LoadingViewKey&quot;];</span><br><span class=\"line\">    objc_setAssociatedObject(self, &amp;LoadingViewKey, loadingView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class=\"line\">    [self didChangeValueForKey:@&quot;LoadingViewKey&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取关联的ZYLoadingView</span><br><span class=\"line\">- (ZYLoadingView *)loadingView &#123;</span><br><span class=\"line\">    return objc_getAssociatedObject(self, &amp;LoadingViewKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 开启动画</span><br><span class=\"line\">- (void)beginLoading &#123;</span><br><span class=\"line\">    if (!self.loadingView) &#123;</span><br><span class=\"line\">        self.loadingView = [[ZYLoadingView alloc] initWithFrame:self.bounds];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self addSubview:self.loadingView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.loadingView startAnimation];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 停止动画</span><br><span class=\"line\">- (void)endLoading &#123;</span><br><span class=\"line\">    if (self.loadingView) &#123;</span><br><span class=\"line\">        [self.loadingView stopAnimation];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a><a name=\"onp8ux\"></a>使用方法</h2><h5 id=\"通过一组图片组合成动画\"><a href=\"#通过一组图片组合成动画\" class=\"headerlink\" title=\"通过一组图片组合成动画\"></a><a name=\"yz1gkc\"></a>通过一组图片组合成动画</h5><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过枚举选择图片组合动画</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loadingType = ZYLoadingAnimateImages;</span><br><span class=\"line\"><span class=\"comment\">// 图片名称</span></span><br><span class=\"line\">ZYLoadingConfigInstance.animateImageName = <span class=\"string\">@\"zy_loading_\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 图片尺寸</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImageSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">37</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\"><span class=\"comment\">// 动画过渡时长</span></span><br><span class=\"line\">ZYLoadingConfigInstance.duration = <span class=\"number\">1.</span>f;</span><br></pre></td></tr></table></figure>\n<h5 id=\"通过一张图旋转形成动画\"><a href=\"#通过一张图旋转形成动画\" class=\"headerlink\" title=\"通过一张图旋转形成动画\"></a><a name=\"qckoog\"></a>通过一张图旋转形成动画</h5><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过枚举选择通过旋转图片展现loading动画</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;</span><br><span class=\"line\"><span class=\"comment\">// 图片名称</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"loading_circle\"</span>];</span><br><span class=\"line\"><span class=\"comment\">// 图片尺寸    </span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImageSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">60</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"comment\">// 动画过渡时长    </span></span><br><span class=\"line\">ZYLoadingConfigInstance.duration = <span class=\"number\">0.25</span>f;</span><br></pre></td></tr></table></figure>\n<h5 id=\"通过一张图片旋转，另一张图片渐隐渐显组合成动画\"><a href=\"#通过一张图片旋转，另一张图片渐隐渐显组合成动画\" class=\"headerlink\" title=\"通过一张图片旋转，另一张图片渐隐渐显组合成动画\"></a><a name=\"1htvcz\"></a>通过一张图片旋转，另一张图片渐隐渐显组合成动画</h5><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过枚举选择通过旋转图片展现loading动画    ZYLoadingConfigInstance.loadingType = ZYLoadingLoopImage;</span></span><br><span class=\"line\"><span class=\"comment\">// 图片名称</span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"loading_circle\"</span>];</span><br><span class=\"line\"><span class=\"comment\">// 图片尺寸    </span></span><br><span class=\"line\">ZYLoadingConfigInstance.loopImageSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">60</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\"><span class=\"comment\">// logo图片名称</span></span><br><span class=\"line\">ZYLoadingConfigInstance.logoImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"loading_zhangyu\"</span>];</span><br><span class=\"line\"><span class=\"comment\">// logo图片尺寸</span></span><br><span class=\"line\">ZYLoadingConfigInstance.logoImageSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">40</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\"><span class=\"comment\">// 动画过渡时长</span></span><br><span class=\"line\">ZYLoadingConfigInstance.duration = <span class=\"number\">0.25</span>f;</span><br></pre></td></tr></table></figure>\n<h5 id=\"开启、停止动画\"><a href=\"#开启、停止动画\" class=\"headerlink\" title=\"开启、停止动画\"></a><a name=\"1v21fg\"></a>开启、停止动画</h5><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开启动画</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view beginLoading];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 停止动画</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view endLoading];</span><br></pre></td></tr></table></figure>\n<p>你也可以直接参考github上的<a href=\"https://github.com/luzhiyongGit/ZYLoading.git\" target=\"_blank\" rel=\"noopener\">ZYLoading</a></p>\n"},{"title":"iOS 技巧合集","date":"2017-02-20T03:55:00.000Z","_content":"\n#### <a name=\"tf2kgf\"></a>一行命令，统计OC项目中每个源代码文件的行数以及总行数\n```powershell\n$ find . \"(\" -name \"*.m\" -or -name \"*.mm\" -or -name \"*.cpp\" -or -name \"*.h\" -or -name \"*.rss\" \")\" -print | xargs wc -l\n```\n\n#### <a name=\"8wricr\"></a>复制字符串到剪贴板\n```objectivec\nUIPasteboard *pasteboard = [UIPasteboard  generalPasteboard];\npasteborad.string = @\"你需要复制的字符串\";\n```\n\n#### <a name=\"s16fhl\"></a>让子view不响应父view的手势\n正常情况下，父view的手势在子view上点击也会响应，想要在子view中屏蔽父view的手势有以下方法：\n1. 子view中再次添加手势，拦截掉父view的手势\n2. 实现父view的手势代理，在代理中拦截父view手势\n```objectivec\n- (BOOL)gestureRecognizer:(UIGestureRecognizer  *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\n    if ([touch.view  isDescendantOfView:subview]) {\n       return NO;\n    }\n    return YES;\n}\n```\n\n#### <a name=\"nognoh\"></a>自定义xopen快捷打开工程\n利用ruby脚本在终端快速打开工程，ruby脚本内容如下：\n```ruby\n#!/usr/bin/env ruby\nrequire 'shellwords'\n\nproj = Dir['*.xcworkspace'].first\nproj = Dir['*.xcodeproj'].first unless proj\n\nif proj\n   puts \"Opening  #{proj}\"\n   `open #{proj}`\nelse\n  puts \"No  xcworkspace|xcproj  file  found\"\nend\n```\n将脚本文件保存为`xopen`，拷贝到`/usr/local/bin`目录下，添加权限：`chmod 777 xopen`\n在终端中任何需要打开项目的位置，执行xopen即可。\n\n#### <a name=\"fqw2ll\"></a><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">CUICatalog Invalid asset name supplied</span>\n项目中最近在打印<span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>CUICatalog Invalid asset name supplied</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">，调研发现之所以输出这个log是因为传了一个空字符串来获取image，如果项目这种情况比较多，可以添加一个</span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>symbolic breakpoint</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">来定位。</span>\n\n\n![ATz38.png | center | 536x257](https://cdn.nlark.com/yuque/0/2018/png/183307/1541845301865-3989fad5-4209-460a-8ec8-af444c4a9643.png \"\")\n\n\n需要说明一下，\\$arg3用于模拟器，\\$r0用于真机，除了传入值是nil的情况，还可能是@\"\"，这种情况的判断规则是`[$arg3  length] == 0`\n\n#### <a name=\"nim5dg\"></a>iOS导航栏显示与隐藏\n项目中可能存在需要特殊隐藏导航栏的页面，通常情况下我们只需要在特殊页面执行`viewWillAppear`时隐藏导航栏，再在`viewWillDisapper`时显示导航栏以确保不对需要正常显示导航栏的页面产生影响。不过在实际项目中，页面之间的情况远比我们想象的复杂，我们以A、B两个页面为例：\n* A 显示 B 隐藏  这种情况下我们按照上述操作是没有问题的\n* A 隐藏 B 显示  这种情况下我们按照上述操作是没有问题的\n* A 隐藏 B 隐藏  这种情况下就会存在连续执行先显示、再隐藏的情况，频繁操作就会存在导航栏异常的情况\n为了解决这个问题，最佳方案应该是每个页面根据自身需要执行显示或隐藏导航栏的操作，如果让每个页面无形增加了代码量，而且不利于维护。为了进一步优化，我们可以利用`UINavigationControllerDelegate`做些文章。\n```swift\nextension ZYNavigationController: UINavigationControllerDelegate {\n    func navigationController(_ navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool) {\n        // 判断要显示的控制器是否是自己\n        let isHidden = viewController.isKind(of: FourthViewController.self) || viewController.isKind(of: FirstViewController.self)\n        \n        self.setNavigationBarHidden(isHidden, animated: true)\n    }\n}\n```\n\n#### <a name=\"i5bdgx\"></a>iPhoneX 隐藏底部的Home条\n```objectivec\n- (BOOL)prefersHomeIndicatorAutoHidden {\n      return YES;\n}\n```\n<span data-type=\"color\" style=\"color:#F5222D\">需要注意，Home条并不会立刻消失，而是延迟1~2秒后缓慢消失</span>\n\n#### <a name=\"hhsehy\"></a>轻松搞定状态栏变化\n\n\n\n","source":"_posts/yuque/iOS 技巧合集.md","raw":"\ntitle: iOS 技巧合集\ndate: 2017-02-20 11:55:00 +0800\ntags: [iOS]\ncategories: 开发技巧\n---\n\n#### <a name=\"tf2kgf\"></a>一行命令，统计OC项目中每个源代码文件的行数以及总行数\n```powershell\n$ find . \"(\" -name \"*.m\" -or -name \"*.mm\" -or -name \"*.cpp\" -or -name \"*.h\" -or -name \"*.rss\" \")\" -print | xargs wc -l\n```\n\n#### <a name=\"8wricr\"></a>复制字符串到剪贴板\n```objectivec\nUIPasteboard *pasteboard = [UIPasteboard  generalPasteboard];\npasteborad.string = @\"你需要复制的字符串\";\n```\n\n#### <a name=\"s16fhl\"></a>让子view不响应父view的手势\n正常情况下，父view的手势在子view上点击也会响应，想要在子view中屏蔽父view的手势有以下方法：\n1. 子view中再次添加手势，拦截掉父view的手势\n2. 实现父view的手势代理，在代理中拦截父view手势\n```objectivec\n- (BOOL)gestureRecognizer:(UIGestureRecognizer  *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\n    if ([touch.view  isDescendantOfView:subview]) {\n       return NO;\n    }\n    return YES;\n}\n```\n\n#### <a name=\"nognoh\"></a>自定义xopen快捷打开工程\n利用ruby脚本在终端快速打开工程，ruby脚本内容如下：\n```ruby\n#!/usr/bin/env ruby\nrequire 'shellwords'\n\nproj = Dir['*.xcworkspace'].first\nproj = Dir['*.xcodeproj'].first unless proj\n\nif proj\n   puts \"Opening  #{proj}\"\n   `open #{proj}`\nelse\n  puts \"No  xcworkspace|xcproj  file  found\"\nend\n```\n将脚本文件保存为`xopen`，拷贝到`/usr/local/bin`目录下，添加权限：`chmod 777 xopen`\n在终端中任何需要打开项目的位置，执行xopen即可。\n\n#### <a name=\"fqw2ll\"></a><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">CUICatalog Invalid asset name supplied</span>\n项目中最近在打印<span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>CUICatalog Invalid asset name supplied</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">，调研发现之所以输出这个log是因为传了一个空字符串来获取image，如果项目这种情况比较多，可以添加一个</span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>symbolic breakpoint</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">来定位。</span>\n\n\n![ATz38.png | center | 536x257](https://cdn.nlark.com/yuque/0/2018/png/183307/1541845301865-3989fad5-4209-460a-8ec8-af444c4a9643.png \"\")\n\n\n需要说明一下，\\$arg3用于模拟器，\\$r0用于真机，除了传入值是nil的情况，还可能是@\"\"，这种情况的判断规则是`[$arg3  length] == 0`\n\n#### <a name=\"nim5dg\"></a>iOS导航栏显示与隐藏\n项目中可能存在需要特殊隐藏导航栏的页面，通常情况下我们只需要在特殊页面执行`viewWillAppear`时隐藏导航栏，再在`viewWillDisapper`时显示导航栏以确保不对需要正常显示导航栏的页面产生影响。不过在实际项目中，页面之间的情况远比我们想象的复杂，我们以A、B两个页面为例：\n* A 显示 B 隐藏  这种情况下我们按照上述操作是没有问题的\n* A 隐藏 B 显示  这种情况下我们按照上述操作是没有问题的\n* A 隐藏 B 隐藏  这种情况下就会存在连续执行先显示、再隐藏的情况，频繁操作就会存在导航栏异常的情况\n为了解决这个问题，最佳方案应该是每个页面根据自身需要执行显示或隐藏导航栏的操作，如果让每个页面无形增加了代码量，而且不利于维护。为了进一步优化，我们可以利用`UINavigationControllerDelegate`做些文章。\n```swift\nextension ZYNavigationController: UINavigationControllerDelegate {\n    func navigationController(_ navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool) {\n        // 判断要显示的控制器是否是自己\n        let isHidden = viewController.isKind(of: FourthViewController.self) || viewController.isKind(of: FirstViewController.self)\n        \n        self.setNavigationBarHidden(isHidden, animated: true)\n    }\n}\n```\n\n#### <a name=\"i5bdgx\"></a>iPhoneX 隐藏底部的Home条\n```objectivec\n- (BOOL)prefersHomeIndicatorAutoHidden {\n      return YES;\n}\n```\n<span data-type=\"color\" style=\"color:#F5222D\">需要注意，Home条并不会立刻消失，而是延迟1~2秒后缓慢消失</span>\n\n#### <a name=\"hhsehy\"></a>轻松搞定状态栏变化\n\n\n\n","slug":"yuque/iOS 技巧合集","published":1,"updated":"2018-11-13T07:36:08.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoffau3b0008d179fnwrpyg2","content":"<h4 id=\"一行命令，统计OC项目中每个源代码文件的行数以及总行数\"><a href=\"#一行命令，统计OC项目中每个源代码文件的行数以及总行数\" class=\"headerlink\" title=\"一行命令，统计OC项目中每个源代码文件的行数以及总行数\"></a><a name=\"tf2kgf\"></a>一行命令，统计OC项目中每个源代码文件的行数以及总行数</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . <span class=\"string\">\"(\"</span> -name <span class=\"string\">\"*.m\"</span> -or -name <span class=\"string\">\"*.mm\"</span> -or -name <span class=\"string\">\"*.cpp\"</span> -or -name <span class=\"string\">\"*.h\"</span> -or -name <span class=\"string\">\"*.rss\"</span> <span class=\"string\">\")\"</span> -print | xargs wc -l</span><br></pre></td></tr></table></figure>\n<h4 id=\"复制字符串到剪贴板\"><a href=\"#复制字符串到剪贴板\" class=\"headerlink\" title=\"复制字符串到剪贴板\"></a><a name=\"8wricr\"></a>复制字符串到剪贴板</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIPasteboard</span> *pasteboard = [<span class=\"built_in\">UIPasteboard</span>  generalPasteboard];</span><br><span class=\"line\">pasteborad.string = <span class=\"string\">@\"你需要复制的字符串\"</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"让子view不响应父view的手势\"><a href=\"#让子view不响应父view的手势\" class=\"headerlink\" title=\"让子view不响应父view的手势\"></a><a name=\"s16fhl\"></a>让子view不响应父view的手势</h4><p>正常情况下，父view的手势在子view上点击也会响应，想要在子view中屏蔽父view的手势有以下方法：</p>\n<ol>\n<li>子view中再次添加手势，拦截掉父view的手势</li>\n<li>实现父view的手势代理，在代理中拦截父view手势<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)gestureRecognizer:(<span class=\"built_in\">UIGestureRecognizer</span>  *)gestureRecognizer shouldReceiveTouch:(<span class=\"built_in\">UITouch</span> *)touch &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([touch.view  isDescendantOfView:subview]) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"自定义xopen快捷打开工程\"><a href=\"#自定义xopen快捷打开工程\" class=\"headerlink\" title=\"自定义xopen快捷打开工程\"></a><a name=\"nognoh\"></a>自定义xopen快捷打开工程</h4><p>利用ruby脚本在终端快速打开工程，ruby脚本内容如下：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env ruby</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'shellwords'</span></span><br><span class=\"line\"></span><br><span class=\"line\">proj = Dir[<span class=\"string\">'*.xcworkspace'</span>].first</span><br><span class=\"line\">proj = Dir[<span class=\"string\">'*.xcodeproj'</span>].first <span class=\"keyword\">unless</span> proj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> proj</span><br><span class=\"line\">   puts <span class=\"string\">\"Opening  <span class=\"subst\">#&#123;proj&#125;</span>\"</span></span><br><span class=\"line\">   <span class=\"string\">`open <span class=\"subst\">#&#123;proj&#125;</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  puts <span class=\"string\">\"No  xcworkspace|xcproj  file  found\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<p>将脚本文件保存为<code>xopen</code>，拷贝到<code>/usr/local/bin</code>目录下，添加权限：<code>chmod 777 xopen</code><br>在终端中任何需要打开项目的位置，执行xopen即可。</p>\n<h4 id=\"CUICatalog-Invalid-asset-name-supplied\"><a href=\"#CUICatalog-Invalid-asset-name-supplied\" class=\"headerlink\" title=\"CUICatalog Invalid asset name supplied\"></a><a name=\"fqw2ll\"></a><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">CUICatalog Invalid asset name supplied</span></h4><p>项目中最近在打印<span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>CUICatalog Invalid asset name supplied</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">，调研发现之所以输出这个log是因为传了一个空字符串来获取image，如果项目这种情况比较多，可以添加一个</span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>symbolic breakpoint</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">来定位。</span></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2018/png/183307/1541845301865-3989fad5-4209-460a-8ec8-af444c4a9643.png\" alt=\"ATz38.png | center | 536x257\"></p>\n<p>需要说明一下，\\$arg3用于模拟器，\\$r0用于真机，除了传入值是nil的情况，还可能是@””，这种情况的判断规则是<code>[$arg3  length] == 0</code></p>\n<h4 id=\"iOS导航栏显示与隐藏\"><a href=\"#iOS导航栏显示与隐藏\" class=\"headerlink\" title=\"iOS导航栏显示与隐藏\"></a><a name=\"nim5dg\"></a>iOS导航栏显示与隐藏</h4><p>项目中可能存在需要特殊隐藏导航栏的页面，通常情况下我们只需要在特殊页面执行<code>viewWillAppear</code>时隐藏导航栏，再在<code>viewWillDisapper</code>时显示导航栏以确保不对需要正常显示导航栏的页面产生影响。不过在实际项目中，页面之间的情况远比我们想象的复杂，我们以A、B两个页面为例：</p>\n<ul>\n<li>A 显示 B 隐藏  这种情况下我们按照上述操作是没有问题的</li>\n<li>A 隐藏 B 显示  这种情况下我们按照上述操作是没有问题的</li>\n<li>A 隐藏 B 隐藏  这种情况下就会存在连续执行先显示、再隐藏的情况，频繁操作就会存在导航栏异常的情况<br>为了解决这个问题，最佳方案应该是每个页面根据自身需要执行显示或隐藏导航栏的操作，如果让每个页面无形增加了代码量，而且不利于维护。为了进一步优化，我们可以利用<code>UINavigationControllerDelegate</code>做些文章。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ZYNavigationController</span>: <span class=\"title\">UINavigationControllerDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(<span class=\"number\">_</span> navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断要显示的控制器是否是自己</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> isHidden = viewController.isKind(of: <span class=\"type\">FourthViewController</span>.<span class=\"keyword\">self</span>) || viewController.isKind(of: <span class=\"type\">FirstViewController</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setNavigationBarHidden(isHidden, animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"iPhoneX-隐藏底部的Home条\"><a href=\"#iPhoneX-隐藏底部的Home条\" class=\"headerlink\" title=\"iPhoneX 隐藏底部的Home条\"></a><a name=\"i5bdgx\"></a>iPhoneX 隐藏底部的Home条</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)prefersHomeIndicatorAutoHidden &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span data-type=\"color\" style=\"color:#F5222D\">需要注意，Home条并不会立刻消失，而是延迟1~2秒后缓慢消失</span></p>\n<h4 id=\"轻松搞定状态栏变化\"><a href=\"#轻松搞定状态栏变化\" class=\"headerlink\" title=\"轻松搞定状态栏变化\"></a><a name=\"hhsehy\"></a>轻松搞定状态栏变化</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一行命令，统计OC项目中每个源代码文件的行数以及总行数\"><a href=\"#一行命令，统计OC项目中每个源代码文件的行数以及总行数\" class=\"headerlink\" title=\"一行命令，统计OC项目中每个源代码文件的行数以及总行数\"></a><a name=\"tf2kgf\"></a>一行命令，统计OC项目中每个源代码文件的行数以及总行数</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . <span class=\"string\">\"(\"</span> -name <span class=\"string\">\"*.m\"</span> -or -name <span class=\"string\">\"*.mm\"</span> -or -name <span class=\"string\">\"*.cpp\"</span> -or -name <span class=\"string\">\"*.h\"</span> -or -name <span class=\"string\">\"*.rss\"</span> <span class=\"string\">\")\"</span> -print | xargs wc -l</span><br></pre></td></tr></table></figure>\n<h4 id=\"复制字符串到剪贴板\"><a href=\"#复制字符串到剪贴板\" class=\"headerlink\" title=\"复制字符串到剪贴板\"></a><a name=\"8wricr\"></a>复制字符串到剪贴板</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIPasteboard</span> *pasteboard = [<span class=\"built_in\">UIPasteboard</span>  generalPasteboard];</span><br><span class=\"line\">pasteborad.string = <span class=\"string\">@\"你需要复制的字符串\"</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"让子view不响应父view的手势\"><a href=\"#让子view不响应父view的手势\" class=\"headerlink\" title=\"让子view不响应父view的手势\"></a><a name=\"s16fhl\"></a>让子view不响应父view的手势</h4><p>正常情况下，父view的手势在子view上点击也会响应，想要在子view中屏蔽父view的手势有以下方法：</p>\n<ol>\n<li>子view中再次添加手势，拦截掉父view的手势</li>\n<li>实现父view的手势代理，在代理中拦截父view手势<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)gestureRecognizer:(<span class=\"built_in\">UIGestureRecognizer</span>  *)gestureRecognizer shouldReceiveTouch:(<span class=\"built_in\">UITouch</span> *)touch &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([touch.view  isDescendantOfView:subview]) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"自定义xopen快捷打开工程\"><a href=\"#自定义xopen快捷打开工程\" class=\"headerlink\" title=\"自定义xopen快捷打开工程\"></a><a name=\"nognoh\"></a>自定义xopen快捷打开工程</h4><p>利用ruby脚本在终端快速打开工程，ruby脚本内容如下：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env ruby</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'shellwords'</span></span><br><span class=\"line\"></span><br><span class=\"line\">proj = Dir[<span class=\"string\">'*.xcworkspace'</span>].first</span><br><span class=\"line\">proj = Dir[<span class=\"string\">'*.xcodeproj'</span>].first <span class=\"keyword\">unless</span> proj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> proj</span><br><span class=\"line\">   puts <span class=\"string\">\"Opening  <span class=\"subst\">#&#123;proj&#125;</span>\"</span></span><br><span class=\"line\">   <span class=\"string\">`open <span class=\"subst\">#&#123;proj&#125;</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  puts <span class=\"string\">\"No  xcworkspace|xcproj  file  found\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<p>将脚本文件保存为<code>xopen</code>，拷贝到<code>/usr/local/bin</code>目录下，添加权限：<code>chmod 777 xopen</code><br>在终端中任何需要打开项目的位置，执行xopen即可。</p>\n<h4 id=\"CUICatalog-Invalid-asset-name-supplied\"><a href=\"#CUICatalog-Invalid-asset-name-supplied\" class=\"headerlink\" title=\"CUICatalog Invalid asset name supplied\"></a><a name=\"fqw2ll\"></a><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">CUICatalog Invalid asset name supplied</span></h4><p>项目中最近在打印<span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>CUICatalog Invalid asset name supplied</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">，调研发现之所以输出这个log是因为传了一个空字符串来获取image，如果项目这种情况比较多，可以添加一个</span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\"><code>symbolic breakpoint</code></span><span data-type=\"color\" style=\"color:rgb(57, 57, 57)\">来定位。</span></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2018/png/183307/1541845301865-3989fad5-4209-460a-8ec8-af444c4a9643.png\" alt=\"ATz38.png | center | 536x257\"></p>\n<p>需要说明一下，\\$arg3用于模拟器，\\$r0用于真机，除了传入值是nil的情况，还可能是@””，这种情况的判断规则是<code>[$arg3  length] == 0</code></p>\n<h4 id=\"iOS导航栏显示与隐藏\"><a href=\"#iOS导航栏显示与隐藏\" class=\"headerlink\" title=\"iOS导航栏显示与隐藏\"></a><a name=\"nim5dg\"></a>iOS导航栏显示与隐藏</h4><p>项目中可能存在需要特殊隐藏导航栏的页面，通常情况下我们只需要在特殊页面执行<code>viewWillAppear</code>时隐藏导航栏，再在<code>viewWillDisapper</code>时显示导航栏以确保不对需要正常显示导航栏的页面产生影响。不过在实际项目中，页面之间的情况远比我们想象的复杂，我们以A、B两个页面为例：</p>\n<ul>\n<li>A 显示 B 隐藏  这种情况下我们按照上述操作是没有问题的</li>\n<li>A 隐藏 B 显示  这种情况下我们按照上述操作是没有问题的</li>\n<li>A 隐藏 B 隐藏  这种情况下就会存在连续执行先显示、再隐藏的情况，频繁操作就会存在导航栏异常的情况<br>为了解决这个问题，最佳方案应该是每个页面根据自身需要执行显示或隐藏导航栏的操作，如果让每个页面无形增加了代码量，而且不利于维护。为了进一步优化，我们可以利用<code>UINavigationControllerDelegate</code>做些文章。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">ZYNavigationController</span>: <span class=\"title\">UINavigationControllerDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(<span class=\"number\">_</span> navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断要显示的控制器是否是自己</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> isHidden = viewController.isKind(of: <span class=\"type\">FourthViewController</span>.<span class=\"keyword\">self</span>) || viewController.isKind(of: <span class=\"type\">FirstViewController</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setNavigationBarHidden(isHidden, animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"iPhoneX-隐藏底部的Home条\"><a href=\"#iPhoneX-隐藏底部的Home条\" class=\"headerlink\" title=\"iPhoneX 隐藏底部的Home条\"></a><a name=\"i5bdgx\"></a>iPhoneX 隐藏底部的Home条</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)prefersHomeIndicatorAutoHidden &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span data-type=\"color\" style=\"color:#F5222D\">需要注意，Home条并不会立刻消失，而是延迟1~2秒后缓慢消失</span></p>\n<h4 id=\"轻松搞定状态栏变化\"><a href=\"#轻松搞定状态栏变化\" class=\"headerlink\" title=\"轻松搞定状态栏变化\"></a><a name=\"hhsehy\"></a>轻松搞定状态栏变化</h4>"},{"title":"使用语雀管理博客","date":"2018-11-09T12:43:26.000Z","_content":"\n之前一直使用hexo搭建自己的个人博客，用的久了就发现随着博客数量的增加，管理越来越麻烦，之前也尝试过使用[hexo-admin](https://jaredforsyth.com/hexo-admin/)，hexo-admin虽然能够达到管理博客的目的，不过界面有点丑，不能忍，一直想找一个替代方案，最近在语雀中读到了一篇博客[静态博客使用语雀编辑器](https://www.yuque.com/page/luan.ma/yuque2blog)，文中介绍了如何利用语雀管理博客，决定一试。\n\n#### <a name=\"x43bcd\"></a>Hexo搭建博客\n首先需要先利用[hexo](https://hexo.io/zh-cn/index.html)搭建博客，具体的搭建流程可以参考[Github+Hexo搭建个人博客详细教程](http://www.ileafly.com/2018/11/10/yuque/Github+Hexo搭建个人博客详细教程/)\n\n#### <a name=\"wgwlfo\"></a>安装语雀插件\n[yuque-hexo](https://github.com/x-cold/yuque-hexo/)是一个Node.js环境下的语雀下载器。\n1. 安装yuque-hexo\n2. 注册语雀，创建知识库，公开知识库，获得博客知识库的地址，比如我的[语雀知识库地址](https://www.yuque.com/leafly/blog)\n3. 在Hexo博客的目录下面找到package.json文件，进入如下配置：\n```json\n{\n\"name\": \"hexo-blog\", // 这里一般原来就有，直接添加下面的内容即可\n\"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",\n    \"login\": \"leafly\",\n    \"repo\": \"blog\",\n    \"postPath\": \"source/_posts/yuque\"\n  },\n}\n```\n4. 同步文章\n```powershell\n$ yuque-hexo sync\n```\n执行完毕，会自动将语雀上的文章同步到`source/_post/yuque`文件夹下\n```powershell\n$ hexo g\n$ hexo d\n```\n将博客内容同步到github。\n\n#### <a name=\"ol3liq\"></a>如何添加分类、标签、创建时间\n插件支持Front-matter，在文章顶部添加分类、标签、创建时间等信息\n```makedown\ntags: [Hexo]\ncategories: 教程\ndate: 2018-10-10 15:43:50\n```\n\n\n\n","source":"_posts/yuque/使用语雀管理博客.md","raw":"\ntitle: 使用语雀管理博客\ndate: 2018-11-09 20:43:26 +0800\ntags: [Hexo]\ncategories: 教程\n---\n\n之前一直使用hexo搭建自己的个人博客，用的久了就发现随着博客数量的增加，管理越来越麻烦，之前也尝试过使用[hexo-admin](https://jaredforsyth.com/hexo-admin/)，hexo-admin虽然能够达到管理博客的目的，不过界面有点丑，不能忍，一直想找一个替代方案，最近在语雀中读到了一篇博客[静态博客使用语雀编辑器](https://www.yuque.com/page/luan.ma/yuque2blog)，文中介绍了如何利用语雀管理博客，决定一试。\n\n#### <a name=\"x43bcd\"></a>Hexo搭建博客\n首先需要先利用[hexo](https://hexo.io/zh-cn/index.html)搭建博客，具体的搭建流程可以参考[Github+Hexo搭建个人博客详细教程](http://www.ileafly.com/2018/11/10/yuque/Github+Hexo搭建个人博客详细教程/)\n\n#### <a name=\"wgwlfo\"></a>安装语雀插件\n[yuque-hexo](https://github.com/x-cold/yuque-hexo/)是一个Node.js环境下的语雀下载器。\n1. 安装yuque-hexo\n2. 注册语雀，创建知识库，公开知识库，获得博客知识库的地址，比如我的[语雀知识库地址](https://www.yuque.com/leafly/blog)\n3. 在Hexo博客的目录下面找到package.json文件，进入如下配置：\n```json\n{\n\"name\": \"hexo-blog\", // 这里一般原来就有，直接添加下面的内容即可\n\"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",\n    \"login\": \"leafly\",\n    \"repo\": \"blog\",\n    \"postPath\": \"source/_posts/yuque\"\n  },\n}\n```\n4. 同步文章\n```powershell\n$ yuque-hexo sync\n```\n执行完毕，会自动将语雀上的文章同步到`source/_post/yuque`文件夹下\n```powershell\n$ hexo g\n$ hexo d\n```\n将博客内容同步到github。\n\n#### <a name=\"ol3liq\"></a>如何添加分类、标签、创建时间\n插件支持Front-matter，在文章顶部添加分类、标签、创建时间等信息\n```makedown\ntags: [Hexo]\ncategories: 教程\ndate: 2018-10-10 15:43:50\n```\n\n\n\n","slug":"yuque/使用语雀管理博客","published":1,"updated":"2018-11-13T07:36:08.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoffau3c0009d17951fk8ns3","content":"<p>之前一直使用hexo搭建自己的个人博客，用的久了就发现随着博客数量的增加，管理越来越麻烦，之前也尝试过使用<a href=\"https://jaredforsyth.com/hexo-admin/\" target=\"_blank\" rel=\"noopener\">hexo-admin</a>，hexo-admin虽然能够达到管理博客的目的，不过界面有点丑，不能忍，一直想找一个替代方案，最近在语雀中读到了一篇博客<a href=\"https://www.yuque.com/page/luan.ma/yuque2blog\" target=\"_blank\" rel=\"noopener\">静态博客使用语雀编辑器</a>，文中介绍了如何利用语雀管理博客，决定一试。</p>\n<h4 id=\"Hexo搭建博客\"><a href=\"#Hexo搭建博客\" class=\"headerlink\" title=\"Hexo搭建博客\"></a><a name=\"x43bcd\"></a>Hexo搭建博客</h4><p>首先需要先利用<a href=\"https://hexo.io/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">hexo</a>搭建博客，具体的搭建流程可以参考<a href=\"http://www.ileafly.com/2018/11/10/yuque/Github+Hexo搭建个人博客详细教程/\">Github+Hexo搭建个人博客详细教程</a></p>\n<h4 id=\"安装语雀插件\"><a href=\"#安装语雀插件\" class=\"headerlink\" title=\"安装语雀插件\"></a><a name=\"wgwlfo\"></a>安装语雀插件</h4><p><a href=\"https://github.com/x-cold/yuque-hexo/\" target=\"_blank\" rel=\"noopener\">yuque-hexo</a>是一个Node.js环境下的语雀下载器。</p>\n<ol>\n<li>安装yuque-hexo</li>\n<li>注册语雀，创建知识库，公开知识库，获得博客知识库的地址，比如我的<a href=\"https://www.yuque.com/leafly/blog\" target=\"_blank\" rel=\"noopener\">语雀知识库地址</a></li>\n<li><p>在Hexo博客的目录下面找到package.json文件，进入如下配置：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\"name\": \"hexo-blog\", // 这里一般原来就有，直接添加下面的内容即可</span><br><span class=\"line\">\"yuqueConfig\": &#123;</span><br><span class=\"line\">    \"baseUrl\": \"https://www.yuque.com/api/v2\",</span><br><span class=\"line\">    \"login\": \"leafly\",</span><br><span class=\"line\">    \"repo\": \"blog\",</span><br><span class=\"line\">    \"postPath\": \"source/_posts/yuque\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步文章</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yuque-hexo sync</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>执行完毕，会自动将语雀上的文章同步到<code>source/_post/yuque</code>文件夹下<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>将博客内容同步到github。</p>\n<h4 id=\"如何添加分类、标签、创建时间\"><a href=\"#如何添加分类、标签、创建时间\" class=\"headerlink\" title=\"如何添加分类、标签、创建时间\"></a><a name=\"ol3liq\"></a>如何添加分类、标签、创建时间</h4><p>插件支持Front-matter，在文章顶部添加分类、标签、创建时间等信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: [Hexo]</span><br><span class=\"line\">categories: 教程</span><br><span class=\"line\">date: 2018-10-10 15:43:50</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前一直使用hexo搭建自己的个人博客，用的久了就发现随着博客数量的增加，管理越来越麻烦，之前也尝试过使用<a href=\"https://jaredforsyth.com/hexo-admin/\" target=\"_blank\" rel=\"noopener\">hexo-admin</a>，hexo-admin虽然能够达到管理博客的目的，不过界面有点丑，不能忍，一直想找一个替代方案，最近在语雀中读到了一篇博客<a href=\"https://www.yuque.com/page/luan.ma/yuque2blog\" target=\"_blank\" rel=\"noopener\">静态博客使用语雀编辑器</a>，文中介绍了如何利用语雀管理博客，决定一试。</p>\n<h4 id=\"Hexo搭建博客\"><a href=\"#Hexo搭建博客\" class=\"headerlink\" title=\"Hexo搭建博客\"></a><a name=\"x43bcd\"></a>Hexo搭建博客</h4><p>首先需要先利用<a href=\"https://hexo.io/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">hexo</a>搭建博客，具体的搭建流程可以参考<a href=\"http://www.ileafly.com/2018/11/10/yuque/Github+Hexo搭建个人博客详细教程/\">Github+Hexo搭建个人博客详细教程</a></p>\n<h4 id=\"安装语雀插件\"><a href=\"#安装语雀插件\" class=\"headerlink\" title=\"安装语雀插件\"></a><a name=\"wgwlfo\"></a>安装语雀插件</h4><p><a href=\"https://github.com/x-cold/yuque-hexo/\" target=\"_blank\" rel=\"noopener\">yuque-hexo</a>是一个Node.js环境下的语雀下载器。</p>\n<ol>\n<li>安装yuque-hexo</li>\n<li>注册语雀，创建知识库，公开知识库，获得博客知识库的地址，比如我的<a href=\"https://www.yuque.com/leafly/blog\" target=\"_blank\" rel=\"noopener\">语雀知识库地址</a></li>\n<li><p>在Hexo博客的目录下面找到package.json文件，进入如下配置：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\"name\": \"hexo-blog\", // 这里一般原来就有，直接添加下面的内容即可</span><br><span class=\"line\">\"yuqueConfig\": &#123;</span><br><span class=\"line\">    \"baseUrl\": \"https://www.yuque.com/api/v2\",</span><br><span class=\"line\">    \"login\": \"leafly\",</span><br><span class=\"line\">    \"repo\": \"blog\",</span><br><span class=\"line\">    \"postPath\": \"source/_posts/yuque\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同步文章</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yuque-hexo sync</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>执行完毕，会自动将语雀上的文章同步到<code>source/_post/yuque</code>文件夹下<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>将博客内容同步到github。</p>\n<h4 id=\"如何添加分类、标签、创建时间\"><a href=\"#如何添加分类、标签、创建时间\" class=\"headerlink\" title=\"如何添加分类、标签、创建时间\"></a><a name=\"ol3liq\"></a>如何添加分类、标签、创建时间</h4><p>插件支持Front-matter，在文章顶部添加分类、标签、创建时间等信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: [Hexo]</span><br><span class=\"line\">categories: 教程</span><br><span class=\"line\">date: 2018-10-10 15:43:50</span><br></pre></td></tr></table></figure></p>\n"},{"title":"fastlane指南","date":"2018-11-08T02:20:01.000Z","_content":"\n[fastlane](https://github.com/fastlane/fastlane)是一套使用Ruby写的自动化工具集，为iOS和Android开发者提供了自动化构建工具，可以帮助开发者将App打包、签名、测试、发布、信息整理、提供AppStore等工作连接起来，实现完全自动化的工作流。\n[fastlane-doc](https://docs.fastlane.tools) 参考文档。\n\n### <a name=\"ule4kq\"></a>安装\n```powershell\n# 安装 fastlane\ngem install fastlane\n\n# 检查版本 \nfastlane --version\n```\n\n### <a name=\"upokfd\"></a>配置\n```ruby\n# 初始化配置\ncd 项目目录\n## fastlane init期间会有四种配置选择，这里我们选择4 完全自定义，然后一直enter直至完成即可\nfastlane init\n\n# fastlane init执行完成后会在当前目录下创建一个fastlane文件夹，包含Appfile和Fastfile文件\n## Appfile\n\napp_identifier(\"bundle  id\") # The bundle identifier of your app\napple_id(\"********@mail.com\") # Your Apple email address\n\n# For more information about the Appfile, see:\n#     https://docs.fastlane.tools/advanced/#appfile\n\n## Fastline\n\ndefault_platform(:ios)\n\nplatform :ios do\n  desc \"Description of what the lane does\"\n  lane :betaDebug do\n    # add actions here: https://docs.fastlane.tools/actions\n    # pod install\n    cocoapods(use_bundle_exec: false)\n    # build app\n    build_app(workspace: \"app.xcworkspace\", scheme: \"app\", export_method: \"ad-hoc\", output_directory: \"./fastlane/package\", configuration: \"Release\")\n    # upload pgyer\n    pgyer(api_key:  \"****************\",  user_key:  \"***********************\")\n    # send email\n    mailgun(\n      postmaster: \"postmaster@*************************.mailgun.org\",\n      apikey: \"********************-4412457b-38b62932\", \n      to: \"tester1@mail.com,tester2@mail.com,tester3@mail.com\",\n      from: \"author <author@mail.com>\",\n      success: true,  \n      message: \"app 上传蒲公英成功\",\n      app_link: \"https://www.pgyer.com/****\",\n      )\n  end\nend\n```\n\n按照上述流程配置好fastlane，执行`fastlane  betaDebug `不出意外你将看到执行成功的信息，在fastlane\\package目录下找到ipa文件。\n### <a name=\"h1gtce\"></a>上传蒲公英\n1. 安装蒲公英插件\n```plain\nfastlane add_plugin pgyer\n```\n2. 配置蒲公英账号信息\n```ruby\nlane :betaDebug do\n    # add actions here: https://docs.fastlane.tools/actions\n    build_app(workspace: \"app.xcworkspace\", scheme: \"app\", export_method: \"ad-hoc\", output_directory: \"./fastlane/package\", configuration: \"Release\")\n    pgyer(api_key:  \"****************\",  user_key:  \"***********************\")\n  end\n```\n3. 打包上传\n```powershell\nfastlane betaDebug\n```\n### <a name=\"fgh2mb\"></a>pod install\nfastlane集成了`cocoapods`进行pod管理，在终端里输入`fastlane cocoapods`可以查看相关的API文档。\n1. 在Gemfile中添加`gem \"cocoapods\"`\n2. 在Fastfile中添加cocoapods的配置\n```ruby\n# 这里需要注意，我尝试过按照文档里设置Podfile的路径，发现不能成功执行pod install，后来通过调查使用如下命令可以成功执行，具体原因不明\ncocoapods(use_bundle_exec: false)\n```\n### <a name=\"ng4arh\"></a>邮件通知\nfastlane集成了`mailgun` 进行邮件发送，在终端里输入fastlane mailgun可以查看相关的API文档，这里总结一下正确集成mailgun的流程\n\n1. 注册mailgun\n [mailgun](https://www.mailgun.com)是一个开发人员的电子邮件服务，提供了强大的API，每个月可免费发送10000封邮件，而且还可以进行跟踪日志等操作。按照流程注册完后会有一个测试domain，利用测试domain可以发送邮件，不过需要添加收件邮箱的验证，通过添加自定义域名可以使用更强大的功能。\n1. 在Gemfile中添加`gem \"rest-client\"`\n2. 在Fastfile中添加mailgun的配置\n```ruby\n# mailgun 邮件通知    \n    mailgun(\n      postmaster: \"postmaster@****************.mailgun.org\",\n      apikey: \"********************-4412457b-38b62932\", \n      to: \"tester1@mail.com,tester2@mail.com,tester3@mail.com\",\n      from: \"author <author@mail.com>\",\n      success: true,  \n      message: \"app 上传蒲公英成功\",\n      app_link: \"https://www.pgyer.com/****\",\n      )\n```\n4. 终端执行fastlane命令，成功配置时你将看到如下信息\n```ruby\n[10:51:39]: ------------------------------\n[10:51:39]: --- Step: default_platform ---\n[10:51:39]: ------------------------------\n[10:51:39]: Driving the lane 'ios betaDebug' 🚀\n[10:51:39]: ---------------------\n[10:51:39]: --- Step: mailgun ---\n[10:51:39]: ---------------------\n\n+------+-----------------+-------------+\n|           fastlane summary           |\n+------+-----------------+-------------+\n| Step | Action          | Time (in s) |\n+------+-----------------+-------------+\n| 1    | default_platfo  | 0           |\n|      | rm              |             |\n| 2    | mailgun         | 1           |\n+------+-----------------+-------------+\n\n[10:51:41]: fastlane.tools finished successfully 🎉\n```\n\n#### <a name=\"ewqdsv\"></a>mailgun相关注意点\n* mailgun会自动读取git提交message放入邮件内容中\n* mailgun的apikey配置不正确时会提供401认证错误\n* 使用测试域名，配置多个接收邮箱时，有一个邮箱未接收认证，就会导致所有的都失败\n\n### <a name=\"oxgbns\"></a>fastlane进阶\n上面的流程只是帮我们简单实现fastlane打包与上传至蒲公英的流程，绝大多数情况下已经够用，不过fastlane还有很多功能可以挖掘\n\n* [x] fastlane 支持pod install\n* [x] fastlane 上传蒲公英后邮件通知测试人员\n* [ ] fastlane 上传Testflight\n* [ ] fastlane 上传AppStore \n\n### <a name=\"6yx6gx\"></a>使用过程中的一些坑\n1. fastlane配置完成后执行一直报错，编译不能通过，通过分析发现因为我装了两个Xcode，默认使用的是9.0版本的command line，而代码是在Xcode 10中编写的，使用了一些swift 4.2的语法，解决方案是在设置里切换command line版本即可。\n2. cocoapods的使用其他命令尝试了一直报错，只有上面那个命名能够成功，原因还未知\n3. mailgun的集成详细的教程比较少，要多尝试，如果遇到401报错就看看apiKey是否设置正确，另外要注意使用测试域名，接受邮件的邮箱需要先邀请认证，否则会报400错误。\n\n\n","source":"_posts/yuque/fastlane指南.md","raw":"\ntitle: fastlane指南\ndate: 2018-11-08 10:20:01 +0800\ntags: [自动化、fastlane]\ncategories: 教程\n---\n\n[fastlane](https://github.com/fastlane/fastlane)是一套使用Ruby写的自动化工具集，为iOS和Android开发者提供了自动化构建工具，可以帮助开发者将App打包、签名、测试、发布、信息整理、提供AppStore等工作连接起来，实现完全自动化的工作流。\n[fastlane-doc](https://docs.fastlane.tools) 参考文档。\n\n### <a name=\"ule4kq\"></a>安装\n```powershell\n# 安装 fastlane\ngem install fastlane\n\n# 检查版本 \nfastlane --version\n```\n\n### <a name=\"upokfd\"></a>配置\n```ruby\n# 初始化配置\ncd 项目目录\n## fastlane init期间会有四种配置选择，这里我们选择4 完全自定义，然后一直enter直至完成即可\nfastlane init\n\n# fastlane init执行完成后会在当前目录下创建一个fastlane文件夹，包含Appfile和Fastfile文件\n## Appfile\n\napp_identifier(\"bundle  id\") # The bundle identifier of your app\napple_id(\"********@mail.com\") # Your Apple email address\n\n# For more information about the Appfile, see:\n#     https://docs.fastlane.tools/advanced/#appfile\n\n## Fastline\n\ndefault_platform(:ios)\n\nplatform :ios do\n  desc \"Description of what the lane does\"\n  lane :betaDebug do\n    # add actions here: https://docs.fastlane.tools/actions\n    # pod install\n    cocoapods(use_bundle_exec: false)\n    # build app\n    build_app(workspace: \"app.xcworkspace\", scheme: \"app\", export_method: \"ad-hoc\", output_directory: \"./fastlane/package\", configuration: \"Release\")\n    # upload pgyer\n    pgyer(api_key:  \"****************\",  user_key:  \"***********************\")\n    # send email\n    mailgun(\n      postmaster: \"postmaster@*************************.mailgun.org\",\n      apikey: \"********************-4412457b-38b62932\", \n      to: \"tester1@mail.com,tester2@mail.com,tester3@mail.com\",\n      from: \"author <author@mail.com>\",\n      success: true,  \n      message: \"app 上传蒲公英成功\",\n      app_link: \"https://www.pgyer.com/****\",\n      )\n  end\nend\n```\n\n按照上述流程配置好fastlane，执行`fastlane  betaDebug `不出意外你将看到执行成功的信息，在fastlane\\package目录下找到ipa文件。\n### <a name=\"h1gtce\"></a>上传蒲公英\n1. 安装蒲公英插件\n```plain\nfastlane add_plugin pgyer\n```\n2. 配置蒲公英账号信息\n```ruby\nlane :betaDebug do\n    # add actions here: https://docs.fastlane.tools/actions\n    build_app(workspace: \"app.xcworkspace\", scheme: \"app\", export_method: \"ad-hoc\", output_directory: \"./fastlane/package\", configuration: \"Release\")\n    pgyer(api_key:  \"****************\",  user_key:  \"***********************\")\n  end\n```\n3. 打包上传\n```powershell\nfastlane betaDebug\n```\n### <a name=\"fgh2mb\"></a>pod install\nfastlane集成了`cocoapods`进行pod管理，在终端里输入`fastlane cocoapods`可以查看相关的API文档。\n1. 在Gemfile中添加`gem \"cocoapods\"`\n2. 在Fastfile中添加cocoapods的配置\n```ruby\n# 这里需要注意，我尝试过按照文档里设置Podfile的路径，发现不能成功执行pod install，后来通过调查使用如下命令可以成功执行，具体原因不明\ncocoapods(use_bundle_exec: false)\n```\n### <a name=\"ng4arh\"></a>邮件通知\nfastlane集成了`mailgun` 进行邮件发送，在终端里输入fastlane mailgun可以查看相关的API文档，这里总结一下正确集成mailgun的流程\n\n1. 注册mailgun\n [mailgun](https://www.mailgun.com)是一个开发人员的电子邮件服务，提供了强大的API，每个月可免费发送10000封邮件，而且还可以进行跟踪日志等操作。按照流程注册完后会有一个测试domain，利用测试domain可以发送邮件，不过需要添加收件邮箱的验证，通过添加自定义域名可以使用更强大的功能。\n1. 在Gemfile中添加`gem \"rest-client\"`\n2. 在Fastfile中添加mailgun的配置\n```ruby\n# mailgun 邮件通知    \n    mailgun(\n      postmaster: \"postmaster@****************.mailgun.org\",\n      apikey: \"********************-4412457b-38b62932\", \n      to: \"tester1@mail.com,tester2@mail.com,tester3@mail.com\",\n      from: \"author <author@mail.com>\",\n      success: true,  \n      message: \"app 上传蒲公英成功\",\n      app_link: \"https://www.pgyer.com/****\",\n      )\n```\n4. 终端执行fastlane命令，成功配置时你将看到如下信息\n```ruby\n[10:51:39]: ------------------------------\n[10:51:39]: --- Step: default_platform ---\n[10:51:39]: ------------------------------\n[10:51:39]: Driving the lane 'ios betaDebug' 🚀\n[10:51:39]: ---------------------\n[10:51:39]: --- Step: mailgun ---\n[10:51:39]: ---------------------\n\n+------+-----------------+-------------+\n|           fastlane summary           |\n+------+-----------------+-------------+\n| Step | Action          | Time (in s) |\n+------+-----------------+-------------+\n| 1    | default_platfo  | 0           |\n|      | rm              |             |\n| 2    | mailgun         | 1           |\n+------+-----------------+-------------+\n\n[10:51:41]: fastlane.tools finished successfully 🎉\n```\n\n#### <a name=\"ewqdsv\"></a>mailgun相关注意点\n* mailgun会自动读取git提交message放入邮件内容中\n* mailgun的apikey配置不正确时会提供401认证错误\n* 使用测试域名，配置多个接收邮箱时，有一个邮箱未接收认证，就会导致所有的都失败\n\n### <a name=\"oxgbns\"></a>fastlane进阶\n上面的流程只是帮我们简单实现fastlane打包与上传至蒲公英的流程，绝大多数情况下已经够用，不过fastlane还有很多功能可以挖掘\n\n* [x] fastlane 支持pod install\n* [x] fastlane 上传蒲公英后邮件通知测试人员\n* [ ] fastlane 上传Testflight\n* [ ] fastlane 上传AppStore \n\n### <a name=\"6yx6gx\"></a>使用过程中的一些坑\n1. fastlane配置完成后执行一直报错，编译不能通过，通过分析发现因为我装了两个Xcode，默认使用的是9.0版本的command line，而代码是在Xcode 10中编写的，使用了一些swift 4.2的语法，解决方案是在设置里切换command line版本即可。\n2. cocoapods的使用其他命令尝试了一直报错，只有上面那个命名能够成功，原因还未知\n3. mailgun的集成详细的教程比较少，要多尝试，如果遇到401报错就看看apiKey是否设置正确，另外要注意使用测试域名，接受邮件的邮箱需要先邀请认证，否则会报400错误。\n\n\n","slug":"yuque/fastlane指南","published":1,"updated":"2018-11-13T07:36:08.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoffau3h000dd179t5vzsajy","content":"<p><a href=\"https://github.com/fastlane/fastlane\" target=\"_blank\" rel=\"noopener\">fastlane</a>是一套使用Ruby写的自动化工具集，为iOS和Android开发者提供了自动化构建工具，可以帮助开发者将App打包、签名、测试、发布、信息整理、提供AppStore等工作连接起来，实现完全自动化的工作流。<br><a href=\"https://docs.fastlane.tools\" target=\"_blank\" rel=\"noopener\">fastlane-doc</a> 参考文档。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a><a name=\"ule4kq\"></a>安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 fastlane</span></span><br><span class=\"line\">gem install fastlane</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查版本 </span></span><br><span class=\"line\">fastlane --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a><a name=\"upokfd\"></a>配置</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化配置</span></span><br><span class=\"line\">cd 项目目录</span><br><span class=\"line\"><span class=\"comment\">## fastlane init期间会有四种配置选择，这里我们选择4 完全自定义，然后一直enter直至完成即可</span></span><br><span class=\"line\">fastlane init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># fastlane init执行完成后会在当前目录下创建一个fastlane文件夹，包含Appfile和Fastfile文件</span></span><br><span class=\"line\"><span class=\"comment\">## Appfile</span></span><br><span class=\"line\"></span><br><span class=\"line\">app_identifier(<span class=\"string\">\"bundle  id\"</span>) <span class=\"comment\"># The bundle identifier of your app</span></span><br><span class=\"line\">apple_id(<span class=\"string\">\"********@mail.com\"</span>) <span class=\"comment\"># Your Apple email address</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For more information about the Appfile, see:</span></span><br><span class=\"line\"><span class=\"comment\">#     https://docs.fastlane.tools/advanced/#appfile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Fastline</span></span><br><span class=\"line\"></span><br><span class=\"line\">default_platform(<span class=\"symbol\">:ios</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">platform <span class=\"symbol\">:ios</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  desc <span class=\"string\">\"Description of what the lane does\"</span></span><br><span class=\"line\">  lane <span class=\"symbol\">:betaDebug</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># add actions here: https://docs.fastlane.tools/actions</span></span><br><span class=\"line\">    <span class=\"comment\"># pod install</span></span><br><span class=\"line\">    cocoapods(<span class=\"symbol\">use_bundle_exec:</span> <span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"comment\"># build app</span></span><br><span class=\"line\">    build_app(<span class=\"symbol\">workspace:</span> <span class=\"string\">\"app.xcworkspace\"</span>, <span class=\"symbol\">scheme:</span> <span class=\"string\">\"app\"</span>, <span class=\"symbol\">export_method:</span> <span class=\"string\">\"ad-hoc\"</span>, <span class=\"symbol\">output_directory:</span> <span class=\"string\">\"./fastlane/package\"</span>, <span class=\"symbol\">configuration:</span> <span class=\"string\">\"Release\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># upload pgyer</span></span><br><span class=\"line\">    pgyer(<span class=\"symbol\">api_key:</span>  <span class=\"string\">\"****************\"</span>,  <span class=\"symbol\">user_key:</span>  <span class=\"string\">\"***********************\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># send email</span></span><br><span class=\"line\">    mailgun(</span><br><span class=\"line\">      <span class=\"symbol\">postmaster:</span> <span class=\"string\">\"postmaster@*************************.mailgun.org\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">apikey:</span> <span class=\"string\">\"********************-4412457b-38b62932\"</span>, </span><br><span class=\"line\">      <span class=\"symbol\">to:</span> <span class=\"string\">\"tester1@mail.com,tester2@mail.com,tester3@mail.com\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">from:</span> <span class=\"string\">\"author &lt;author@mail.com&gt;\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">success:</span> <span class=\"literal\">true</span>,  </span><br><span class=\"line\">      <span class=\"symbol\">message:</span> <span class=\"string\">\"app 上传蒲公英成功\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">app_link:</span> <span class=\"string\">\"https://www.pgyer.com/****\"</span>,</span><br><span class=\"line\">      )</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>按照上述流程配置好fastlane，执行<code>fastlane  betaDebug</code>不出意外你将看到执行成功的信息，在fastlane\\package目录下找到ipa文件。</p>\n<h3 id=\"上传蒲公英\"><a href=\"#上传蒲公英\" class=\"headerlink\" title=\"上传蒲公英\"></a><a name=\"h1gtce\"></a>上传蒲公英</h3><ol>\n<li><p>安装蒲公英插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane add_plugin pgyer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置蒲公英账号信息</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:betaDebug</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># add actions here: https://docs.fastlane.tools/actions</span></span><br><span class=\"line\">    build_app(<span class=\"symbol\">workspace:</span> <span class=\"string\">\"app.xcworkspace\"</span>, <span class=\"symbol\">scheme:</span> <span class=\"string\">\"app\"</span>, <span class=\"symbol\">export_method:</span> <span class=\"string\">\"ad-hoc\"</span>, <span class=\"symbol\">output_directory:</span> <span class=\"string\">\"./fastlane/package\"</span>, <span class=\"symbol\">configuration:</span> <span class=\"string\">\"Release\"</span>)</span><br><span class=\"line\">    pgyer(<span class=\"symbol\">api_key:</span>  <span class=\"string\">\"****************\"</span>,  <span class=\"symbol\">user_key:</span>  <span class=\"string\">\"***********************\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包上传</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane betaDebug</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"pod-install\"><a href=\"#pod-install\" class=\"headerlink\" title=\"pod install\"></a><a name=\"fgh2mb\"></a>pod install</h3><p>fastlane集成了<code>cocoapods</code>进行pod管理，在终端里输入<code>fastlane cocoapods</code>可以查看相关的API文档。</p>\n<ol>\n<li>在Gemfile中添加<code>gem &quot;cocoapods&quot;</code></li>\n<li>在Fastfile中添加cocoapods的配置<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里需要注意，我尝试过按照文档里设置Podfile的路径，发现不能成功执行pod install，后来通过调查使用如下命令可以成功执行，具体原因不明</span></span><br><span class=\"line\">cocoapods(<span class=\"symbol\">use_bundle_exec:</span> <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"邮件通知\"><a href=\"#邮件通知\" class=\"headerlink\" title=\"邮件通知\"></a><a name=\"ng4arh\"></a>邮件通知</h3><p>fastlane集成了<code>mailgun</code> 进行邮件发送，在终端里输入fastlane mailgun可以查看相关的API文档，这里总结一下正确集成mailgun的流程</p>\n<ol>\n<li>注册mailgun<br><a href=\"https://www.mailgun.com\" target=\"_blank\" rel=\"noopener\">mailgun</a>是一个开发人员的电子邮件服务，提供了强大的API，每个月可免费发送10000封邮件，而且还可以进行跟踪日志等操作。按照流程注册完后会有一个测试domain，利用测试domain可以发送邮件，不过需要添加收件邮箱的验证，通过添加自定义域名可以使用更强大的功能。</li>\n<li>在Gemfile中添加<code>gem &quot;rest-client&quot;</code></li>\n<li><p>在Fastfile中添加mailgun的配置</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mailgun 邮件通知    </span></span><br><span class=\"line\">    mailgun(</span><br><span class=\"line\">      <span class=\"symbol\">postmaster:</span> <span class=\"string\">\"postmaster@****************.mailgun.org\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">apikey:</span> <span class=\"string\">\"********************-4412457b-38b62932\"</span>, </span><br><span class=\"line\">      <span class=\"symbol\">to:</span> <span class=\"string\">\"tester1@mail.com,tester2@mail.com,tester3@mail.com\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">from:</span> <span class=\"string\">\"author &lt;author@mail.com&gt;\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">success:</span> <span class=\"literal\">true</span>,  </span><br><span class=\"line\">      <span class=\"symbol\">message:</span> <span class=\"string\">\"app 上传蒲公英成功\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">app_link:</span> <span class=\"string\">\"https://www.pgyer.com/****\"</span>,</span><br><span class=\"line\">      )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>终端执行fastlane命令，成功配置时你将看到如下信息</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: ------------------------------</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: --- <span class=\"symbol\">Step:</span> default_platform ---</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: ------------------------------</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: Driving the lane <span class=\"string\">'ios betaDebug'</span> 🚀</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: ---------------------</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: --- <span class=\"symbol\">Step:</span> mailgun ---</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: ---------------------</span><br><span class=\"line\"></span><br><span class=\"line\">+------+-----------------+-------------+</span><br><span class=\"line\"><span class=\"params\">|           fastlane summary           |</span></span><br><span class=\"line\">+------+-----------------+-------------+</span><br><span class=\"line\"><span class=\"params\">| Step |</span> Action          <span class=\"params\">| Time (<span class=\"keyword\">in</span> s) |</span></span><br><span class=\"line\">+------+-----------------+-------------+</span><br><span class=\"line\"><span class=\"params\">| 1    |</span> default_platfo  <span class=\"params\">| 0           |</span></span><br><span class=\"line\"><span class=\"params\">|      |</span> rm              <span class=\"params\">|             |</span></span><br><span class=\"line\"><span class=\"params\">| 2    |</span> mailgun         <span class=\"params\">| 1           |</span></span><br><span class=\"line\">+------+-----------------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">41</span>]: fastlane.tools finished successfully 🎉</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"mailgun相关注意点\"><a href=\"#mailgun相关注意点\" class=\"headerlink\" title=\"mailgun相关注意点\"></a><a name=\"ewqdsv\"></a>mailgun相关注意点</h4><ul>\n<li>mailgun会自动读取git提交message放入邮件内容中</li>\n<li>mailgun的apikey配置不正确时会提供401认证错误</li>\n<li>使用测试域名，配置多个接收邮箱时，有一个邮箱未接收认证，就会导致所有的都失败</li>\n</ul>\n<h3 id=\"fastlane进阶\"><a href=\"#fastlane进阶\" class=\"headerlink\" title=\"fastlane进阶\"></a><a name=\"oxgbns\"></a>fastlane进阶</h3><p>上面的流程只是帮我们简单实现fastlane打包与上传至蒲公英的流程，绝大多数情况下已经够用，不过fastlane还有很多功能可以挖掘</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> fastlane 支持pod install</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> fastlane 上传蒲公英后邮件通知测试人员</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> fastlane 上传Testflight</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> fastlane 上传AppStore </li>\n</ul>\n<h3 id=\"使用过程中的一些坑\"><a href=\"#使用过程中的一些坑\" class=\"headerlink\" title=\"使用过程中的一些坑\"></a><a name=\"6yx6gx\"></a>使用过程中的一些坑</h3><ol>\n<li>fastlane配置完成后执行一直报错，编译不能通过，通过分析发现因为我装了两个Xcode，默认使用的是9.0版本的command line，而代码是在Xcode 10中编写的，使用了一些swift 4.2的语法，解决方案是在设置里切换command line版本即可。</li>\n<li>cocoapods的使用其他命令尝试了一直报错，只有上面那个命名能够成功，原因还未知</li>\n<li>mailgun的集成详细的教程比较少，要多尝试，如果遇到401报错就看看apiKey是否设置正确，另外要注意使用测试域名，接受邮件的邮箱需要先邀请认证，否则会报400错误。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/fastlane/fastlane\" target=\"_blank\" rel=\"noopener\">fastlane</a>是一套使用Ruby写的自动化工具集，为iOS和Android开发者提供了自动化构建工具，可以帮助开发者将App打包、签名、测试、发布、信息整理、提供AppStore等工作连接起来，实现完全自动化的工作流。<br><a href=\"https://docs.fastlane.tools\" target=\"_blank\" rel=\"noopener\">fastlane-doc</a> 参考文档。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a><a name=\"ule4kq\"></a>安装</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 fastlane</span></span><br><span class=\"line\">gem install fastlane</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查版本 </span></span><br><span class=\"line\">fastlane --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a><a name=\"upokfd\"></a>配置</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化配置</span></span><br><span class=\"line\">cd 项目目录</span><br><span class=\"line\"><span class=\"comment\">## fastlane init期间会有四种配置选择，这里我们选择4 完全自定义，然后一直enter直至完成即可</span></span><br><span class=\"line\">fastlane init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># fastlane init执行完成后会在当前目录下创建一个fastlane文件夹，包含Appfile和Fastfile文件</span></span><br><span class=\"line\"><span class=\"comment\">## Appfile</span></span><br><span class=\"line\"></span><br><span class=\"line\">app_identifier(<span class=\"string\">\"bundle  id\"</span>) <span class=\"comment\"># The bundle identifier of your app</span></span><br><span class=\"line\">apple_id(<span class=\"string\">\"********@mail.com\"</span>) <span class=\"comment\"># Your Apple email address</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For more information about the Appfile, see:</span></span><br><span class=\"line\"><span class=\"comment\">#     https://docs.fastlane.tools/advanced/#appfile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Fastline</span></span><br><span class=\"line\"></span><br><span class=\"line\">default_platform(<span class=\"symbol\">:ios</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">platform <span class=\"symbol\">:ios</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  desc <span class=\"string\">\"Description of what the lane does\"</span></span><br><span class=\"line\">  lane <span class=\"symbol\">:betaDebug</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># add actions here: https://docs.fastlane.tools/actions</span></span><br><span class=\"line\">    <span class=\"comment\"># pod install</span></span><br><span class=\"line\">    cocoapods(<span class=\"symbol\">use_bundle_exec:</span> <span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"comment\"># build app</span></span><br><span class=\"line\">    build_app(<span class=\"symbol\">workspace:</span> <span class=\"string\">\"app.xcworkspace\"</span>, <span class=\"symbol\">scheme:</span> <span class=\"string\">\"app\"</span>, <span class=\"symbol\">export_method:</span> <span class=\"string\">\"ad-hoc\"</span>, <span class=\"symbol\">output_directory:</span> <span class=\"string\">\"./fastlane/package\"</span>, <span class=\"symbol\">configuration:</span> <span class=\"string\">\"Release\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># upload pgyer</span></span><br><span class=\"line\">    pgyer(<span class=\"symbol\">api_key:</span>  <span class=\"string\">\"****************\"</span>,  <span class=\"symbol\">user_key:</span>  <span class=\"string\">\"***********************\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># send email</span></span><br><span class=\"line\">    mailgun(</span><br><span class=\"line\">      <span class=\"symbol\">postmaster:</span> <span class=\"string\">\"postmaster@*************************.mailgun.org\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">apikey:</span> <span class=\"string\">\"********************-4412457b-38b62932\"</span>, </span><br><span class=\"line\">      <span class=\"symbol\">to:</span> <span class=\"string\">\"tester1@mail.com,tester2@mail.com,tester3@mail.com\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">from:</span> <span class=\"string\">\"author &lt;author@mail.com&gt;\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">success:</span> <span class=\"literal\">true</span>,  </span><br><span class=\"line\">      <span class=\"symbol\">message:</span> <span class=\"string\">\"app 上传蒲公英成功\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">app_link:</span> <span class=\"string\">\"https://www.pgyer.com/****\"</span>,</span><br><span class=\"line\">      )</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>按照上述流程配置好fastlane，执行<code>fastlane  betaDebug</code>不出意外你将看到执行成功的信息，在fastlane\\package目录下找到ipa文件。</p>\n<h3 id=\"上传蒲公英\"><a href=\"#上传蒲公英\" class=\"headerlink\" title=\"上传蒲公英\"></a><a name=\"h1gtce\"></a>上传蒲公英</h3><ol>\n<li><p>安装蒲公英插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane add_plugin pgyer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置蒲公英账号信息</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:betaDebug</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># add actions here: https://docs.fastlane.tools/actions</span></span><br><span class=\"line\">    build_app(<span class=\"symbol\">workspace:</span> <span class=\"string\">\"app.xcworkspace\"</span>, <span class=\"symbol\">scheme:</span> <span class=\"string\">\"app\"</span>, <span class=\"symbol\">export_method:</span> <span class=\"string\">\"ad-hoc\"</span>, <span class=\"symbol\">output_directory:</span> <span class=\"string\">\"./fastlane/package\"</span>, <span class=\"symbol\">configuration:</span> <span class=\"string\">\"Release\"</span>)</span><br><span class=\"line\">    pgyer(<span class=\"symbol\">api_key:</span>  <span class=\"string\">\"****************\"</span>,  <span class=\"symbol\">user_key:</span>  <span class=\"string\">\"***********************\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包上传</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane betaDebug</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"pod-install\"><a href=\"#pod-install\" class=\"headerlink\" title=\"pod install\"></a><a name=\"fgh2mb\"></a>pod install</h3><p>fastlane集成了<code>cocoapods</code>进行pod管理，在终端里输入<code>fastlane cocoapods</code>可以查看相关的API文档。</p>\n<ol>\n<li>在Gemfile中添加<code>gem &quot;cocoapods&quot;</code></li>\n<li>在Fastfile中添加cocoapods的配置<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里需要注意，我尝试过按照文档里设置Podfile的路径，发现不能成功执行pod install，后来通过调查使用如下命令可以成功执行，具体原因不明</span></span><br><span class=\"line\">cocoapods(<span class=\"symbol\">use_bundle_exec:</span> <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"邮件通知\"><a href=\"#邮件通知\" class=\"headerlink\" title=\"邮件通知\"></a><a name=\"ng4arh\"></a>邮件通知</h3><p>fastlane集成了<code>mailgun</code> 进行邮件发送，在终端里输入fastlane mailgun可以查看相关的API文档，这里总结一下正确集成mailgun的流程</p>\n<ol>\n<li>注册mailgun<br><a href=\"https://www.mailgun.com\" target=\"_blank\" rel=\"noopener\">mailgun</a>是一个开发人员的电子邮件服务，提供了强大的API，每个月可免费发送10000封邮件，而且还可以进行跟踪日志等操作。按照流程注册完后会有一个测试domain，利用测试domain可以发送邮件，不过需要添加收件邮箱的验证，通过添加自定义域名可以使用更强大的功能。</li>\n<li>在Gemfile中添加<code>gem &quot;rest-client&quot;</code></li>\n<li><p>在Fastfile中添加mailgun的配置</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mailgun 邮件通知    </span></span><br><span class=\"line\">    mailgun(</span><br><span class=\"line\">      <span class=\"symbol\">postmaster:</span> <span class=\"string\">\"postmaster@****************.mailgun.org\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">apikey:</span> <span class=\"string\">\"********************-4412457b-38b62932\"</span>, </span><br><span class=\"line\">      <span class=\"symbol\">to:</span> <span class=\"string\">\"tester1@mail.com,tester2@mail.com,tester3@mail.com\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">from:</span> <span class=\"string\">\"author &lt;author@mail.com&gt;\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">success:</span> <span class=\"literal\">true</span>,  </span><br><span class=\"line\">      <span class=\"symbol\">message:</span> <span class=\"string\">\"app 上传蒲公英成功\"</span>,</span><br><span class=\"line\">      <span class=\"symbol\">app_link:</span> <span class=\"string\">\"https://www.pgyer.com/****\"</span>,</span><br><span class=\"line\">      )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>终端执行fastlane命令，成功配置时你将看到如下信息</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: ------------------------------</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: --- <span class=\"symbol\">Step:</span> default_platform ---</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: ------------------------------</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: Driving the lane <span class=\"string\">'ios betaDebug'</span> 🚀</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: ---------------------</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: --- <span class=\"symbol\">Step:</span> mailgun ---</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">39</span>]: ---------------------</span><br><span class=\"line\"></span><br><span class=\"line\">+------+-----------------+-------------+</span><br><span class=\"line\"><span class=\"params\">|           fastlane summary           |</span></span><br><span class=\"line\">+------+-----------------+-------------+</span><br><span class=\"line\"><span class=\"params\">| Step |</span> Action          <span class=\"params\">| Time (<span class=\"keyword\">in</span> s) |</span></span><br><span class=\"line\">+------+-----------------+-------------+</span><br><span class=\"line\"><span class=\"params\">| 1    |</span> default_platfo  <span class=\"params\">| 0           |</span></span><br><span class=\"line\"><span class=\"params\">|      |</span> rm              <span class=\"params\">|             |</span></span><br><span class=\"line\"><span class=\"params\">| 2    |</span> mailgun         <span class=\"params\">| 1           |</span></span><br><span class=\"line\">+------+-----------------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">51</span><span class=\"symbol\">:</span><span class=\"number\">41</span>]: fastlane.tools finished successfully 🎉</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"mailgun相关注意点\"><a href=\"#mailgun相关注意点\" class=\"headerlink\" title=\"mailgun相关注意点\"></a><a name=\"ewqdsv\"></a>mailgun相关注意点</h4><ul>\n<li>mailgun会自动读取git提交message放入邮件内容中</li>\n<li>mailgun的apikey配置不正确时会提供401认证错误</li>\n<li>使用测试域名，配置多个接收邮箱时，有一个邮箱未接收认证，就会导致所有的都失败</li>\n</ul>\n<h3 id=\"fastlane进阶\"><a href=\"#fastlane进阶\" class=\"headerlink\" title=\"fastlane进阶\"></a><a name=\"oxgbns\"></a>fastlane进阶</h3><p>上面的流程只是帮我们简单实现fastlane打包与上传至蒲公英的流程，绝大多数情况下已经够用，不过fastlane还有很多功能可以挖掘</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> fastlane 支持pod install</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> fastlane 上传蒲公英后邮件通知测试人员</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> fastlane 上传Testflight</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> fastlane 上传AppStore </li>\n</ul>\n<h3 id=\"使用过程中的一些坑\"><a href=\"#使用过程中的一些坑\" class=\"headerlink\" title=\"使用过程中的一些坑\"></a><a name=\"6yx6gx\"></a>使用过程中的一些坑</h3><ol>\n<li>fastlane配置完成后执行一直报错，编译不能通过，通过分析发现因为我装了两个Xcode，默认使用的是9.0版本的command line，而代码是在Xcode 10中编写的，使用了一些swift 4.2的语法，解决方案是在设置里切换command line版本即可。</li>\n<li>cocoapods的使用其他命令尝试了一直报错，只有上面那个命名能够成功，原因还未知</li>\n<li>mailgun的集成详细的教程比较少，要多尝试，如果遇到401报错就看看apiKey是否设置正确，另外要注意使用测试域名，接受邮件的邮箱需要先邀请认证，否则会报400错误。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjoffau300002d17993qvkvxj","category_id":"cjoffau370005d179qbgiadnk","_id":"cjoffau3j000gd179ckra0nes"},{"post_id":"cjoffau3c0009d17951fk8ns3","category_id":"cjoffau370005d179qbgiadnk","_id":"cjoffau3k000id17964lxmlbt"},{"post_id":"cjoffau3h000dd179t5vzsajy","category_id":"cjoffau370005d179qbgiadnk","_id":"cjoffau3k000kd1792agmv1hm"},{"post_id":"cjoffau350004d1799gqau5ba","category_id":"cjoffau370005d179qbgiadnk","_id":"cjoffau3m000nd1798vpd5r1o"},{"post_id":"cjoffau3a0007d17965m6k9lz","category_id":"cjoffau3i000fd1795o8e5nxo","_id":"cjoffau3m000pd1792b7oatn1"},{"post_id":"cjoffau3b0008d179fnwrpyg2","category_id":"cjoffau3l000ld179obe4a557","_id":"cjoffau3n000sd179bieg6npq"}],"PostTag":[{"post_id":"cjoffau300002d17993qvkvxj","tag_id":"cjoffau390006d179t569q63b","_id":"cjoffau3g000cd1796mz3ga4l"},{"post_id":"cjoffau3c0009d17951fk8ns3","tag_id":"cjoffau390006d179t569q63b","_id":"cjoffau3i000ed179rv576url"},{"post_id":"cjoffau350004d1799gqau5ba","tag_id":"cjoffau3d000bd179s3it1rw7","_id":"cjoffau3k000jd1790zpxokf2"},{"post_id":"cjoffau3a0007d17965m6k9lz","tag_id":"cjoffau3j000hd179nkmcs7b4","_id":"cjoffau3m000od179ysxza8ln"},{"post_id":"cjoffau3b0008d179fnwrpyg2","tag_id":"cjoffau3m000md179hehce74z","_id":"cjoffau3n000rd1792p3a3w92"},{"post_id":"cjoffau3h000dd179t5vzsajy","tag_id":"cjoffau3n000qd179je6irjny","_id":"cjoffau3n000td179a5dcy81q"}],"Tag":[{"name":"Hexo","_id":"cjoffau390006d179t569q63b"},{"name":"markdown","_id":"cjoffau3d000bd179s3it1rw7"},{"name":"ZYLoading","_id":"cjoffau3j000hd179nkmcs7b4"},{"name":"iOS","_id":"cjoffau3m000md179hehce74z"},{"name":"自动化、fastlane","_id":"cjoffau3n000qd179je6irjny"}]}}