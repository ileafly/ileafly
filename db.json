{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/spec_struct.png","path":"images/spec_struct.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e9ca927c66e0a4fa98b2a7f7ff774e9978a294f8","modified":1478059104000},{"_id":"source/CNAME","hash":"e43a9b789fc4ad872665c192db746f23ae9c1b00","modified":1478050218000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1472103992000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1472103992000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1472103992000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1472103992000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1472103992000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1472103992000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1472103992000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1472103992000},{"_id":"themes/next/_config.yml","hash":"68ca7fc475a77db94be7ba02e849cb6802c07286","modified":1472551137000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1472103992000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1472103992000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1472103992000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1478059017000},{"_id":"source/_posts/CocoaPods升级后问题解决.md","hash":"952889c1260c21d7aeb57ff9d71c57b14f01ffe3","modified":1478050218000},{"_id":"source/_posts/Hexo多台电脑同步.md","hash":"66c407d0a52509c65aebf41e46a930e11de2edc2","modified":1478050218000},{"_id":"source/_posts/ReactNative入门.md","hash":"77e6b48f53bc3a319afa9290d57be6aead4bd99b","modified":1478058741000},{"_id":"source/_posts/git命令行入门.md","hash":"3f63d017ffdeb96dce9112c45924515af0ee3fbe","modified":1478050218000},{"_id":"source/_posts/Markdown语法初探.md","hash":"32e78e427e0e76a542c98df97bf0cac44be405df","modified":1478050218000},{"_id":"source/_posts/iOS-让子View不响应父View的手势.md","hash":"9fb39f2013391f0190366d238b05e8737bb36797","modified":1478050218000},{"_id":"source/_posts/个人博客进阶-Hexo搭建博客.md","hash":"b3a0c6cbe40588597f9f7f18c3d1f69bd14e56f6","modified":1478050218000},{"_id":"source/_posts/如何搭建属于自己的博客.md","hash":"8994925c76e4eeb0dccf194809d524f9d6b27483","modified":1478050218000},{"_id":"source/_posts/搭建私有Pod.md","hash":"fb91513d0843c5ce8afc3702143ed689f29ddab5","modified":1478050218000},{"_id":"source/_posts/私有pod创建进阶-如何通过pod管理静态库.md","hash":"c346ee8c2ff2217dedd46b621d9c832335b93737","modified":1478050218000},{"_id":"source/_posts/移除Pod管理的库后编译报Link错误.md","hash":"d7027f4100aab6bc110a74356fc01eea7f46cc4d","modified":1478050218000},{"_id":"source/_posts/自定义xopen命令打开工程.md","hash":"a7f6f815d2f44f3566eb4a3518454fa1388b3876","modified":1478050218000},{"_id":"source/categories/index.md","hash":"7da82ce8cd5b15e6745f5c355cde6966c4c6a962","modified":1478050218000},{"_id":"source/tags/index.md","hash":"cf968a7ea402628532017f483b0d13042496f2af","modified":1478050218000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1472103992000},{"_id":"themes/next/.git/config","hash":"ca83ce520f770c3104c997d323b9f293dd920073","modified":1472103992000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1472103958000},{"_id":"themes/next/.git/index","hash":"404819a8f12a7747df92c9a091cc80f3585bdbf4","modified":1472103992000},{"_id":"themes/next/.git/packed-refs","hash":"5299dd07c22750af4a0d99f89ea2c8e2d52787e3","modified":1472103992000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1472103992000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1472103992000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1472103992000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1472103992000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1472103992000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1472103992000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1472103992000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1472103992000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1472103992000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1472103992000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1472103992000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1472103992000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1472103992000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1472103992000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1472103992000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1472103992000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1472103992000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1472103992000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1472103992000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1472103992000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1472103992000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1472103992000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1472103992000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1472103992000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1472103992000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1472103992000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472103992000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1472103958000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1472103958000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1472103958000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1472103958000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1472103958000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1472103958000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1472103958000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1472103958000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1472103958000},{"_id":"themes/next/.git/logs/HEAD","hash":"db65b7add418c30368eaf84782a87ad6a4b8bbe6","modified":1472103992000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1472103958000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1472103992000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1472103992000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1472103992000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1472103992000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1472103992000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1472103992000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1472103992000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1472103992000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1472103992000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1472103992000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1472103992000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1472103992000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1472103992000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1472103992000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1472103992000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1472103992000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1472103992000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1472103992000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1472103992000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1472103992000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1472103992000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1472103992000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1472103992000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1472103992000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1472103992000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1472103992000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1472103992000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472103992000},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1472107236000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1472103992000},{"_id":"themes/next/source/images/avatar.gif","hash":"0c3980fd2eb098998245f41e3d6a789b0cf51bbf","modified":1472107157000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1472103992000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1472103992000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1472103992000},{"_id":"themes/next/source/images/spec_struct.png","hash":"0c69561d29d7e15e0412245fe5ecf13b13f7b8bf","modified":1470920163000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472103992000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472103992000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472103992000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472103992000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472103992000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472103992000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472103992000},{"_id":"themes/next/.git/refs/heads/master","hash":"a000ff7ceba1704584e39c908e83fe3db5859335","modified":1472103992000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1472103992000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1472103992000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1472103992000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1472103992000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1472103992000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1472103992000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1472103992000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1472103992000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1472103992000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1472103992000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1472103992000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1472103992000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1472103992000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1472103992000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1472103992000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1472103992000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1472103992000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1472103992000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1472103992000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1472103992000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1472103992000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1472103992000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1472103992000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1472103992000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1472103992000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1472103992000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1472103992000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1472103992000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1472103992000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1472103992000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1472103992000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1472103992000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1472103992000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1472103992000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1472103992000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1472103992000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1472103992000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1472103992000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1472103992000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472103992000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"db65b7add418c30368eaf84782a87ad6a4b8bbe6","modified":1472103992000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1472103992000},{"_id":"themes/next/.git/objects/pack/pack-302df316ecce271b6f4e6a41e488dce8621d02b1.idx","hash":"c532d45cf4b95ca70060967ae49a69d834ac1726","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1472103992000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1472103992000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1472103992000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1472103992000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1472103992000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1472103992000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1472103992000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1472103992000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1472103992000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1472103992000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1472103992000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1472103992000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1472103992000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1472103992000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"db65b7add418c30368eaf84782a87ad6a4b8bbe6","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1472103992000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472103992000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1472103992000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1472103992000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1472103992000},{"_id":"themes/next/.git/objects/pack/pack-302df316ecce271b6f4e6a41e488dce8621d02b1.pack","hash":"f150f345b13aab12109f73c22c2d43d4d5159361","modified":1472103992000},{"_id":"public/categories/index.html","hash":"fc9eeb80e22fb1bcc8257ac783fc868f743d527b","modified":1478062198886},{"_id":"public/tags/index.html","hash":"002b6ab5b90c6bb7ae65e8054212345bbe02b5c2","modified":1478062198886},{"_id":"public/2016/10/24/移除Pod管理的库后编译报Link错误/index.html","hash":"3213dbfcc2c5c6e12b7370bc6b61b2468d6328ba","modified":1478062198886},{"_id":"public/2016/10/24/iOS-让子View不响应父View的手势/index.html","hash":"bd0117ead3b7262fec672290e202a4234ff923a6","modified":1478062198887},{"_id":"public/2016/10/09/CocoaPods升级后问题解决/index.html","hash":"f5023cfb34a739415063c5d124cb0ee9b003aa5c","modified":1478062198887},{"_id":"public/2016/10/08/自定义xopen命令打开工程/index.html","hash":"acfed5d84b30a5c44379e99e315881d50d33ec94","modified":1478062198887},{"_id":"public/archives/index.html","hash":"0478593b2a724ce315797a23c813ed22e78db8fe","modified":1478062198887},{"_id":"public/archives/page/2/index.html","hash":"f98769760f8b0e4463db03489493aac4b3098649","modified":1478062198888},{"_id":"public/archives/2016/index.html","hash":"4935189d5501a08b9ead2e45faf07b272819cf99","modified":1478062198888},{"_id":"public/archives/2016/page/2/index.html","hash":"8707a8be98c748f5ee88de0f780f70e1dcf4e099","modified":1478062198888},{"_id":"public/archives/2016/08/index.html","hash":"18a835b844110ef21ffb9bc31b80170f3dc9937f","modified":1478062198888},{"_id":"public/archives/2016/09/index.html","hash":"b69b16c9496e747c24e09f6f433a2f6f94a45b03","modified":1478062198888},{"_id":"public/archives/2016/10/index.html","hash":"9196061b6dadb6f71751e4e708d1a70128caa2ef","modified":1478062198888},{"_id":"public/archives/2016/11/index.html","hash":"16210e79344b30d1a2f433ba4e4ec450e8bed037","modified":1478062198888},{"_id":"public/categories/iOS/index.html","hash":"f0785b9c90e89ae20afbfc6c83957aa7da00514f","modified":1478062198888},{"_id":"public/categories/博客/index.html","hash":"1e0d6f578959a97863a47f22e01b219d89df426f","modified":1478062198888},{"_id":"public/categories/ReactNative/index.html","hash":"dd7793fe46c0f0941080abc16c04ebc7c8b4555b","modified":1478062198888},{"_id":"public/categories/Git/index.html","hash":"cfc6b24b57ef01f646334dfb780c8f1b12620b77","modified":1478062198888},{"_id":"public/categories/其他/index.html","hash":"2459127d22a75b34e0914637d9bacb0b32c05a58","modified":1478062198888},{"_id":"public/tags/CocoaPods/index.html","hash":"4e5c33a33a4f76309cdc3a24255a311b95f101fd","modified":1478062198888},{"_id":"public/tags/博客-Hexo/index.html","hash":"c61fea458e9d5f568bc3831c70b76a3e45ad6622","modified":1478062198889},{"_id":"public/tags/ReactNative-JavaScript/index.html","hash":"0a01cca0977e318c2c9b046d4515f5d6180061dc","modified":1478062198889},{"_id":"public/tags/Git/index.html","hash":"0ff532e248d738caa43efdb01a645ea5c0faa69a","modified":1478062198890},{"_id":"public/tags/iOS/index.html","hash":"5fb3d22a15f7c3d2205c0c0d6356f8c77e7ef170","modified":1478062198890},{"_id":"public/tags/Markdown/index.html","hash":"19c3b7bcc0bb144c2d234d813d72b583ae5fb766","modified":1478062198890},{"_id":"public/tags/博客/index.html","hash":"030370b85376a228ec29015f38349f18f06a112d","modified":1478062198890},{"_id":"public/2016/11/02/ReactNative入门/index.html","hash":"168443be06a7abd4396a8ad79b3cf829f8c15ba8","modified":1478062198890},{"_id":"public/2016/10/24/Hexo多台电脑同步/index.html","hash":"80c187a528f47ea25600ea9670e1b20421fa3c68","modified":1478062198890},{"_id":"public/2016/09/10/私有pod创建进阶-如何通过pod管理静态库/index.html","hash":"ba87e0540833a42482026062caf53a478120e3f2","modified":1478062198890},{"_id":"public/2016/08/31/git命令行入门/index.html","hash":"630919f2306beede15b62ba77c18a93a94b456f6","modified":1478062198890},{"_id":"public/2016/08/25/个人博客进阶-Hexo搭建博客/index.html","hash":"d457d3a566535cd4fb99eb0ebf013b40211936c3","modified":1478062198890},{"_id":"public/2016/08/12/搭建私有Pod/index.html","hash":"5b3af3dbebc1c5735d92d85bf8c93a0321295f41","modified":1478062198890},{"_id":"public/2016/08/11/Markdown语法初探/index.html","hash":"d9013316a3685b5fbae50fa6cce1ee9ec85bc99a","modified":1478062198890},{"_id":"public/2016/08/08/如何搭建属于自己的博客/index.html","hash":"9b44208805076df98a6e0d90306550c2e08dd1c5","modified":1478062198890},{"_id":"public/index.html","hash":"9a0e5b77fc4c76e9230c41910127bce68592bf8c","modified":1478062198890},{"_id":"public/page/2/index.html","hash":"453b80f19134336ba3178d2605e06a98d420c0fc","modified":1478062198890},{"_id":"public/tags/Xcode/index.html","hash":"9d43b572a22048e11f380dadd4d42b9a51dbf2e3","modified":1478062198907},{"_id":"public/CNAME","hash":"e43a9b789fc4ad872665c192db746f23ae9c1b00","modified":1478062198919},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1478062198919},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1478062198919},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1478062198919},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1478062198919},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1478062198920},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1478062198920},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478062198920},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1478062198920},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478062198920},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1478062198920},{"_id":"public/images/avatar.gif","hash":"0c3980fd2eb098998245f41e3d6a789b0cf51bbf","modified":1478062198920},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1478062198920},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1478062198920},{"_id":"public/images/spec_struct.png","hash":"0c69561d29d7e15e0412245fe5ecf13b13f7b8bf","modified":1478062198922},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1478062198923},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1478062198925},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478062198925},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478062198925},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478062198925},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478062198925},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478062198925},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478062198925},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1478062198925},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1478062198925},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478062198925},{"_id":"public/css/main.css","hash":"a57acda8ac7ba3aee78689ac9e709c44ac1b24ea","modified":1478062199874},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1478062199875},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1478062199898},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1478062199898},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1478062199906},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1478062199906},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1478062199906},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1478062199906},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1478062199906},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1478062199906},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1478062199906},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1478062199906},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1478062199906},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1478062199907},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1478062199907},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1478062199907},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1478062199907},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1478062199907},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1478062199907},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1478062199907},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1478062199907},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1478062199907},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1478062199907},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1478062199907},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1478062199907},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1478062199907},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1478062199908},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1478062199908},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1478062199908},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1478062199908},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1478062199908},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1478062199908},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1478062199908},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1478062199908},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1478062199908},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1478062199908},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1478062199908},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1478062199908},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1478062199908},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1478062199908},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1478062199908},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1478062199935}],"Category":[{"name":"iOS","_id":"civ0g2i780003bxyaxxz90klw"},{"name":"博客","_id":"civ0g2i7m0008bxyaw0sitzx5"},{"name":"ReactNative","_id":"civ0g2i7u000ebxyaml3mo9yb"},{"name":"Git","_id":"civ0g2i7z000lbxya0f6m8f5d"},{"name":"其他","_id":"civ0g2i8g000sbxyawfz7xdhi"}],"Data":[],"Page":[{"title":"categories","date":"2016-08-30T10:02:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-30 18:02:07\ntype: \"categories\"\n---\n","updated":"2016-11-02T01:30:18.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"civ0g2ica001fbxyaqptd0nih","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-08-25T06:27:13.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-25 14:27:13\ntype: \"tags\"\n---\n","updated":"2016-11-02T01:30:18.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"civ0g2icc001gbxyabex2n10f","content":"","excerpt":"","more":""}],"Post":[{"title":"CocoaPods升级后问题解决","date":"2016-10-09T09:30:43.000Z","_content":"\n升级[CocoaPods](https://cocoapods.org/)到`1.0.1`版本遇到了两个问题，其中第一个比较简单，由于新版本强制要求设置target否则会出现错误，所以我们只需要在`Podfile`里按照新规范给每个Target都设置上就行了。而第二个问题让我寻找了很久，先来描述一下第二个问题。\n\n升级完CocoaPods后，在iPhone 6模拟器中编译没有任何问题，但是在iPhone 4或者iPhone 5等模拟器中一直编译失败，通过调研找到了原因，因为iPhone 4或者iPhone 5模拟器是64位模拟器，也就是说在64位模拟器上编译不会通过，这是因为新版本的CocoaPods\n","source":"_posts/CocoaPods升级后问题解决.md","raw":"---\ntitle: CocoaPods升级后问题解决\ndate: 2016-10-09 17:30:43\ntags: CocoaPods\ncategories: iOS\n---\n\n升级[CocoaPods](https://cocoapods.org/)到`1.0.1`版本遇到了两个问题，其中第一个比较简单，由于新版本强制要求设置target否则会出现错误，所以我们只需要在`Podfile`里按照新规范给每个Target都设置上就行了。而第二个问题让我寻找了很久，先来描述一下第二个问题。\n\n升级完CocoaPods后，在iPhone 6模拟器中编译没有任何问题，但是在iPhone 4或者iPhone 5等模拟器中一直编译失败，通过调研找到了原因，因为iPhone 4或者iPhone 5模拟器是64位模拟器，也就是说在64位模拟器上编译不会通过，这是因为新版本的CocoaPods\n","slug":"CocoaPods升级后问题解决","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i6y0000bxyauicvccs0","content":"<p>升级<a href=\"https://cocoapods.org/\" target=\"_blank\" rel=\"external\">CocoaPods</a>到<code>1.0.1</code>版本遇到了两个问题，其中第一个比较简单，由于新版本强制要求设置target否则会出现错误，所以我们只需要在<code>Podfile</code>里按照新规范给每个Target都设置上就行了。而第二个问题让我寻找了很久，先来描述一下第二个问题。</p>\n<p>升级完CocoaPods后，在iPhone 6模拟器中编译没有任何问题，但是在iPhone 4或者iPhone 5等模拟器中一直编译失败，通过调研找到了原因，因为iPhone 4或者iPhone 5模拟器是64位模拟器，也就是说在64位模拟器上编译不会通过，这是因为新版本的CocoaPods</p>\n","excerpt":"","more":"<p>升级<a href=\"https://cocoapods.org/\">CocoaPods</a>到<code>1.0.1</code>版本遇到了两个问题，其中第一个比较简单，由于新版本强制要求设置target否则会出现错误，所以我们只需要在<code>Podfile</code>里按照新规范给每个Target都设置上就行了。而第二个问题让我寻找了很久，先来描述一下第二个问题。</p>\n<p>升级完CocoaPods后，在iPhone 6模拟器中编译没有任何问题，但是在iPhone 4或者iPhone 5等模拟器中一直编译失败，通过调研找到了原因，因为iPhone 4或者iPhone 5模拟器是64位模拟器，也就是说在64位模拟器上编译不会通过，这是因为新版本的CocoaPods</p>\n"},{"title":"Hexo多台电脑同步","date":"2016-10-24T07:00:08.000Z","_content":"\n使用Hexo搭建个人博客已经有一段时间了，在使用中发现一个问题，github上存放的并非是原始的博客文件而是经过hexo处理的html文件，这就导致无法在两台电脑上协同工作，多么悲伤的事情！\n难道我需要单独创建一个git项目来存放? 通过调研找到了一个方便快捷的管理源码的方法。\n\n### Hexo多台电脑同步方案\n\n1. 创建两个分支：master和hexo\n2. 设置hexo为默认分支，[github](https://www.github.com)的setting里可以设置\n3. git clone 拷贝仓库\n4. 进入仓库初始化hexo\n5. 配置hexo `_config.yml` 可参考[个人博客进阶--Hexo搭建博客](http://www.ileafly.com/2016/08/25/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)\n6. 依次执行 `git add .` `git commit -m \"message\"` `git push origin hexo` 提交相关文件\n\n这样，在你的博客项目里就存在两个分支，master分支用来存放生成的今天网页，hexo分支用来存放网站的原始文件\n\n### 新电脑如何同步Hexo\n\n1. git clone 拷贝仓库\n2. 已安装hexo则直接使用，未安装Hexo只需要安装Hexo即可\n\n### 待尝试的同步方法\n有大神写了一个同步的脚本，只需要执行`hexo b`就可以达到同步的目的，还没有尝试，[hexo-git-backup](https://github.com/coneycode/hexo-git-backup)\n\n### 参考地址\n[hexo多台电脑同步](https://www.zhihu.com/question/21193762)\n","source":"_posts/Hexo多台电脑同步.md","raw":"---\ntitle: Hexo多台电脑同步\ndate: 2016-10-24 15:00:08\ntags: 博客, Hexo\ncategories: 博客\n---\n\n使用Hexo搭建个人博客已经有一段时间了，在使用中发现一个问题，github上存放的并非是原始的博客文件而是经过hexo处理的html文件，这就导致无法在两台电脑上协同工作，多么悲伤的事情！\n难道我需要单独创建一个git项目来存放? 通过调研找到了一个方便快捷的管理源码的方法。\n\n### Hexo多台电脑同步方案\n\n1. 创建两个分支：master和hexo\n2. 设置hexo为默认分支，[github](https://www.github.com)的setting里可以设置\n3. git clone 拷贝仓库\n4. 进入仓库初始化hexo\n5. 配置hexo `_config.yml` 可参考[个人博客进阶--Hexo搭建博客](http://www.ileafly.com/2016/08/25/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)\n6. 依次执行 `git add .` `git commit -m \"message\"` `git push origin hexo` 提交相关文件\n\n这样，在你的博客项目里就存在两个分支，master分支用来存放生成的今天网页，hexo分支用来存放网站的原始文件\n\n### 新电脑如何同步Hexo\n\n1. git clone 拷贝仓库\n2. 已安装hexo则直接使用，未安装Hexo只需要安装Hexo即可\n\n### 待尝试的同步方法\n有大神写了一个同步的脚本，只需要执行`hexo b`就可以达到同步的目的，还没有尝试，[hexo-git-backup](https://github.com/coneycode/hexo-git-backup)\n\n### 参考地址\n[hexo多台电脑同步](https://www.zhihu.com/question/21193762)\n","slug":"Hexo多台电脑同步","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i720001bxyav6tnmmwh","content":"<p>使用Hexo搭建个人博客已经有一段时间了，在使用中发现一个问题，github上存放的并非是原始的博客文件而是经过hexo处理的html文件，这就导致无法在两台电脑上协同工作，多么悲伤的事情！<br>难道我需要单独创建一个git项目来存放? 通过调研找到了一个方便快捷的管理源码的方法。</p>\n<h3 id=\"Hexo多台电脑同步方案\"><a href=\"#Hexo多台电脑同步方案\" class=\"headerlink\" title=\"Hexo多台电脑同步方案\"></a>Hexo多台电脑同步方案</h3><ol>\n<li>创建两个分支：master和hexo</li>\n<li>设置hexo为默认分支，<a href=\"https://www.github.com\" target=\"_blank\" rel=\"external\">github</a>的setting里可以设置</li>\n<li>git clone 拷贝仓库</li>\n<li>进入仓库初始化hexo</li>\n<li>配置hexo <code>_config.yml</code> 可参考<a href=\"http://www.ileafly.com/2016/08/25/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\">个人博客进阶–Hexo搭建博客</a></li>\n<li>依次执行 <code>git add .</code> <code>git commit -m &quot;message&quot;</code> <code>git push origin hexo</code> 提交相关文件</li>\n</ol>\n<p>这样，在你的博客项目里就存在两个分支，master分支用来存放生成的今天网页，hexo分支用来存放网站的原始文件</p>\n<h3 id=\"新电脑如何同步Hexo\"><a href=\"#新电脑如何同步Hexo\" class=\"headerlink\" title=\"新电脑如何同步Hexo\"></a>新电脑如何同步Hexo</h3><ol>\n<li>git clone 拷贝仓库</li>\n<li>已安装hexo则直接使用，未安装Hexo只需要安装Hexo即可</li>\n</ol>\n<h3 id=\"待尝试的同步方法\"><a href=\"#待尝试的同步方法\" class=\"headerlink\" title=\"待尝试的同步方法\"></a>待尝试的同步方法</h3><p>有大神写了一个同步的脚本，只需要执行<code>hexo b</code>就可以达到同步的目的，还没有尝试，<a href=\"https://github.com/coneycode/hexo-git-backup\" target=\"_blank\" rel=\"external\">hexo-git-backup</a></p>\n<h3 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h3><p><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"external\">hexo多台电脑同步</a></p>\n","excerpt":"","more":"<p>使用Hexo搭建个人博客已经有一段时间了，在使用中发现一个问题，github上存放的并非是原始的博客文件而是经过hexo处理的html文件，这就导致无法在两台电脑上协同工作，多么悲伤的事情！<br>难道我需要单独创建一个git项目来存放? 通过调研找到了一个方便快捷的管理源码的方法。</p>\n<h3 id=\"Hexo多台电脑同步方案\"><a href=\"#Hexo多台电脑同步方案\" class=\"headerlink\" title=\"Hexo多台电脑同步方案\"></a>Hexo多台电脑同步方案</h3><ol>\n<li>创建两个分支：master和hexo</li>\n<li>设置hexo为默认分支，<a href=\"https://www.github.com\">github</a>的setting里可以设置</li>\n<li>git clone 拷贝仓库</li>\n<li>进入仓库初始化hexo</li>\n<li>配置hexo <code>_config.yml</code> 可参考<a href=\"http://www.ileafly.com/2016/08/25/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\">个人博客进阶–Hexo搭建博客</a></li>\n<li>依次执行 <code>git add .</code> <code>git commit -m &quot;message&quot;</code> <code>git push origin hexo</code> 提交相关文件</li>\n</ol>\n<p>这样，在你的博客项目里就存在两个分支，master分支用来存放生成的今天网页，hexo分支用来存放网站的原始文件</p>\n<h3 id=\"新电脑如何同步Hexo\"><a href=\"#新电脑如何同步Hexo\" class=\"headerlink\" title=\"新电脑如何同步Hexo\"></a>新电脑如何同步Hexo</h3><ol>\n<li>git clone 拷贝仓库</li>\n<li>已安装hexo则直接使用，未安装Hexo只需要安装Hexo即可</li>\n</ol>\n<h3 id=\"待尝试的同步方法\"><a href=\"#待尝试的同步方法\" class=\"headerlink\" title=\"待尝试的同步方法\"></a>待尝试的同步方法</h3><p>有大神写了一个同步的脚本，只需要执行<code>hexo b</code>就可以达到同步的目的，还没有尝试，<a href=\"https://github.com/coneycode/hexo-git-backup\">hexo-git-backup</a></p>\n<h3 id=\"参考地址\"><a href=\"#参考地址\" class=\"headerlink\" title=\"参考地址\"></a>参考地址</h3><p><a href=\"https://www.zhihu.com/question/21193762\">hexo多台电脑同步</a></p>\n"},{"title":"ReactNative入门","date":"2016-11-02T01:32:53.000Z","_content":"\n### 安装\n\n#### Homebrew\n\n[Homebrew](http://brew.sh/)是Mac系统的包管理器，我们要使用它安装NodeJS和一些其他必须的工具。\n\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n#### Node.JS\n\n使用Homebrew安装[Node.js](https://nodejs.org/en/)\n\n```shell\nbrew install node\n```\n\n安装完成后最好设置npm镜像以加速安装过程\n\n```sh\nnpm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n```\n\n#### React Native的命令行工具(react-native-cli)\n\nReact Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务等任务。\n\n```shell\nnpm install -g react-native-cli\n```\n\n#### Xcode\n\nReact Native目前需要Xcode 7.0或更高版本。\n\n### 推荐安装的工具\n\n#### Watchman\n\n[Watchman](https://facebook.github.io/watchman/docs/install.html)是由Facebook提供的监视文件系统变更的工具。安装此工具可以提供开发时的性能\n\n```shell\nbrew install watchman\n```\n\n#### Flow\n\n[Flow](https://www.flowtype.org/)是一个静态的JS类型检查工具。(新手建议跳过，降低学习成本)\n\n```shell\nbrew install flow\n```\n\n#### Sublime Text 3\n\n[Sublime](http://www.sublimetext.com)是一款开源的编辑器，支持插件安装。\n\n##### React Native开发推荐的一些插件\n\n1. ReactJS: 支持React开发，代码提示，高亮显示\n\n2. Emmet: 前端开发必备\n\n3. Terminal: 在sublime中打开终端并定位到当前目录\n\n4. react-native-snippets: react native的代码片段\n\n   ​\n\n#### 测试安装\n\n```shell\nreact-native init ReactNativeDemo\ncd ReactNativeDemo\nreact-native run-ios\n```\n\n在测试过程中遇到一个问题导致编译失败，报错的原因是Watchman没有安装，于是我又尝试用Homebrew安装Watchman，结果在快要完成的时候报错了，报错的原因是未正确安装Command Line Tools,执行`xcode-select --install`，安装完成后再次安装Watchman，并运行通过。\n\n### 参考文章\n\n[ReactNative搭建开发环境](http://reactnative.cn/docs/0.36/getting-started.html#content)\n\n[用Sublime 3作为ReactNative的开发IDE](http://www.jianshu.com/p/2ddfff095e90)\n\n","source":"_posts/ReactNative入门.md","raw":"---\ntitle: ReactNative入门\ndate: 2016-11-02 09:32:53\ntags: ReactNative, JavaScript\ncategories: ReactNative\n---\n\n### 安装\n\n#### Homebrew\n\n[Homebrew](http://brew.sh/)是Mac系统的包管理器，我们要使用它安装NodeJS和一些其他必须的工具。\n\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n#### Node.JS\n\n使用Homebrew安装[Node.js](https://nodejs.org/en/)\n\n```shell\nbrew install node\n```\n\n安装完成后最好设置npm镜像以加速安装过程\n\n```sh\nnpm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n```\n\n#### React Native的命令行工具(react-native-cli)\n\nReact Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务等任务。\n\n```shell\nnpm install -g react-native-cli\n```\n\n#### Xcode\n\nReact Native目前需要Xcode 7.0或更高版本。\n\n### 推荐安装的工具\n\n#### Watchman\n\n[Watchman](https://facebook.github.io/watchman/docs/install.html)是由Facebook提供的监视文件系统变更的工具。安装此工具可以提供开发时的性能\n\n```shell\nbrew install watchman\n```\n\n#### Flow\n\n[Flow](https://www.flowtype.org/)是一个静态的JS类型检查工具。(新手建议跳过，降低学习成本)\n\n```shell\nbrew install flow\n```\n\n#### Sublime Text 3\n\n[Sublime](http://www.sublimetext.com)是一款开源的编辑器，支持插件安装。\n\n##### React Native开发推荐的一些插件\n\n1. ReactJS: 支持React开发，代码提示，高亮显示\n\n2. Emmet: 前端开发必备\n\n3. Terminal: 在sublime中打开终端并定位到当前目录\n\n4. react-native-snippets: react native的代码片段\n\n   ​\n\n#### 测试安装\n\n```shell\nreact-native init ReactNativeDemo\ncd ReactNativeDemo\nreact-native run-ios\n```\n\n在测试过程中遇到一个问题导致编译失败，报错的原因是Watchman没有安装，于是我又尝试用Homebrew安装Watchman，结果在快要完成的时候报错了，报错的原因是未正确安装Command Line Tools,执行`xcode-select --install`，安装完成后再次安装Watchman，并运行通过。\n\n### 参考文章\n\n[ReactNative搭建开发环境](http://reactnative.cn/docs/0.36/getting-started.html#content)\n\n[用Sublime 3作为ReactNative的开发IDE](http://www.jianshu.com/p/2ddfff095e90)\n\n","slug":"ReactNative入门","published":1,"updated":"2016-11-02T03:52:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i790004bxyaxhl769pz","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h4><p><a href=\"http://brew.sh/\" target=\"_blank\" rel=\"external\">Homebrew</a>是Mac系统的包管理器，我们要使用它安装NodeJS和一些其他必须的工具。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"Node-JS\"><a href=\"#Node-JS\" class=\"headerlink\" title=\"Node.JS\"></a>Node.JS</h4><p>使用Homebrew安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install node</div></pre></td></tr></table></figure>\n<p>安装完成后最好设置npm镜像以加速安装过程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org --global</div><div class=\"line\">npm config <span class=\"built_in\">set</span> disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n<h4 id=\"React-Native的命令行工具-react-native-cli\"><a href=\"#React-Native的命令行工具-react-native-cli\" class=\"headerlink\" title=\"React Native的命令行工具(react-native-cli)\"></a>React Native的命令行工具(react-native-cli)</h4><p>React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务等任务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g react-native-cli</div></pre></td></tr></table></figure>\n<h4 id=\"Xcode\"><a href=\"#Xcode\" class=\"headerlink\" title=\"Xcode\"></a>Xcode</h4><p>React Native目前需要Xcode 7.0或更高版本。</p>\n<h3 id=\"推荐安装的工具\"><a href=\"#推荐安装的工具\" class=\"headerlink\" title=\"推荐安装的工具\"></a>推荐安装的工具</h3><h4 id=\"Watchman\"><a href=\"#Watchman\" class=\"headerlink\" title=\"Watchman\"></a>Watchman</h4><p><a href=\"https://facebook.github.io/watchman/docs/install.html\" target=\"_blank\" rel=\"external\">Watchman</a>是由Facebook提供的监视文件系统变更的工具。安装此工具可以提供开发时的性能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install watchman</div></pre></td></tr></table></figure>\n<h4 id=\"Flow\"><a href=\"#Flow\" class=\"headerlink\" title=\"Flow\"></a>Flow</h4><p><a href=\"https://www.flowtype.org/\" target=\"_blank\" rel=\"external\">Flow</a>是一个静态的JS类型检查工具。(新手建议跳过，降低学习成本)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install flow</div></pre></td></tr></table></figure>\n<h4 id=\"Sublime-Text-3\"><a href=\"#Sublime-Text-3\" class=\"headerlink\" title=\"Sublime Text 3\"></a>Sublime Text 3</h4><p><a href=\"http://www.sublimetext.com\" target=\"_blank\" rel=\"external\">Sublime</a>是一款开源的编辑器，支持插件安装。</p>\n<h5 id=\"React-Native开发推荐的一些插件\"><a href=\"#React-Native开发推荐的一些插件\" class=\"headerlink\" title=\"React Native开发推荐的一些插件\"></a>React Native开发推荐的一些插件</h5><ol>\n<li><p>ReactJS: 支持React开发，代码提示，高亮显示</p>\n</li>\n<li><p>Emmet: 前端开发必备</p>\n</li>\n<li><p>Terminal: 在sublime中打开终端并定位到当前目录</p>\n</li>\n<li><p>react-native-snippets: react native的代码片段</p>\n<p>​</p>\n</li>\n</ol>\n<h4 id=\"测试安装\"><a href=\"#测试安装\" class=\"headerlink\" title=\"测试安装\"></a>测试安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init ReactNativeDemo</div><div class=\"line\">cd ReactNativeDemo</div><div class=\"line\">react-native run-ios</div></pre></td></tr></table></figure>\n<p>在测试过程中遇到一个问题导致编译失败，报错的原因是Watchman没有安装，于是我又尝试用Homebrew安装Watchman，结果在快要完成的时候报错了，报错的原因是未正确安装Command Line Tools,执行<code>xcode-select --install</code>，安装完成后再次安装Watchman，并运行通过。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"http://reactnative.cn/docs/0.36/getting-started.html#content\" target=\"_blank\" rel=\"external\">ReactNative搭建开发环境</a></p>\n<p><a href=\"http://www.jianshu.com/p/2ddfff095e90\" target=\"_blank\" rel=\"external\">用Sublime 3作为ReactNative的开发IDE</a></p>\n","excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h4><p><a href=\"http://brew.sh/\">Homebrew</a>是Mac系统的包管理器，我们要使用它安装NodeJS和一些其他必须的工具。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"Node-JS\"><a href=\"#Node-JS\" class=\"headerlink\" title=\"Node.JS\"></a>Node.JS</h4><p>使用Homebrew安装<a href=\"https://nodejs.org/en/\">Node.js</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install node</div></pre></td></tr></table></figure>\n<p>安装完成后最好设置npm镜像以加速安装过程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org --global</div><div class=\"line\">npm config <span class=\"built_in\">set</span> disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>\n<h4 id=\"React-Native的命令行工具-react-native-cli\"><a href=\"#React-Native的命令行工具-react-native-cli\" class=\"headerlink\" title=\"React Native的命令行工具(react-native-cli)\"></a>React Native的命令行工具(react-native-cli)</h4><p>React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务等任务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g react-native-cli</div></pre></td></tr></table></figure>\n<h4 id=\"Xcode\"><a href=\"#Xcode\" class=\"headerlink\" title=\"Xcode\"></a>Xcode</h4><p>React Native目前需要Xcode 7.0或更高版本。</p>\n<h3 id=\"推荐安装的工具\"><a href=\"#推荐安装的工具\" class=\"headerlink\" title=\"推荐安装的工具\"></a>推荐安装的工具</h3><h4 id=\"Watchman\"><a href=\"#Watchman\" class=\"headerlink\" title=\"Watchman\"></a>Watchman</h4><p><a href=\"https://facebook.github.io/watchman/docs/install.html\">Watchman</a>是由Facebook提供的监视文件系统变更的工具。安装此工具可以提供开发时的性能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install watchman</div></pre></td></tr></table></figure>\n<h4 id=\"Flow\"><a href=\"#Flow\" class=\"headerlink\" title=\"Flow\"></a>Flow</h4><p><a href=\"https://www.flowtype.org/\">Flow</a>是一个静态的JS类型检查工具。(新手建议跳过，降低学习成本)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install flow</div></pre></td></tr></table></figure>\n<h4 id=\"Sublime-Text-3\"><a href=\"#Sublime-Text-3\" class=\"headerlink\" title=\"Sublime Text 3\"></a>Sublime Text 3</h4><p><a href=\"http://www.sublimetext.com\">Sublime</a>是一款开源的编辑器，支持插件安装。</p>\n<h5 id=\"React-Native开发推荐的一些插件\"><a href=\"#React-Native开发推荐的一些插件\" class=\"headerlink\" title=\"React Native开发推荐的一些插件\"></a>React Native开发推荐的一些插件</h5><ol>\n<li><p>ReactJS: 支持React开发，代码提示，高亮显示</p>\n</li>\n<li><p>Emmet: 前端开发必备</p>\n</li>\n<li><p>Terminal: 在sublime中打开终端并定位到当前目录</p>\n</li>\n<li><p>react-native-snippets: react native的代码片段</p>\n<p>​</p>\n</li>\n</ol>\n<h4 id=\"测试安装\"><a href=\"#测试安装\" class=\"headerlink\" title=\"测试安装\"></a>测试安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init ReactNativeDemo</div><div class=\"line\">cd ReactNativeDemo</div><div class=\"line\">react-native run-ios</div></pre></td></tr></table></figure>\n<p>在测试过程中遇到一个问题导致编译失败，报错的原因是Watchman没有安装，于是我又尝试用Homebrew安装Watchman，结果在快要完成的时候报错了，报错的原因是未正确安装Command Line Tools,执行<code>xcode-select --install</code>，安装完成后再次安装Watchman，并运行通过。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"http://reactnative.cn/docs/0.36/getting-started.html#content\">ReactNative搭建开发环境</a></p>\n<p><a href=\"http://www.jianshu.com/p/2ddfff095e90\">用Sublime 3作为ReactNative的开发IDE</a></p>\n"},{"title":"git命令行入门","date":"2016-08-31T11:43:02.000Z","_content":"\n本文结合项目开发中遇到的实际问题对git命令行的使用做一个简单的总结。\n\n### 常用命令\n\n1. 下载项目\n\n       git clone [url]\n\n2. 查看本地分支\n\n       git branch\n       \n3. 查看远程分支\n\n       git branch -r\n       \n4. 创建本地分支\n\n       git checkout [branch]\n       \n5. 切换本地分支\n\n       git checkout [branch]\n       \n6. 拉取远程分支代码\n\n       git pull origin [remote-branch]\n       \n7. 添加当前目录的所有文件到暂存区\n      \n       git add .\n       \n8. 提交暂存区到仓库区\n\n       git commit -m [message]\n       \n9. 合并分支\n\n       git merge [branch]\n       \n10. 提交本地分支代码\n\n       git push origin [remote-branch]\n       \n### tag命令\n\n1. 列出所有tag\n\n       git tag\n       \n2. 新建tag\n\n       # 在当前commit新建一个tag\n       git tag [tag]\n       \n       # 在指定commit新建一个tag\n       git tag [tag] [commit]\n\n3. 删除本地tag\n\n       git tag -d [tag]\n       \n4. 删除远程tag\n\n       git push origin :refs/tags/[tag]\n       \n5. 提交指定tag\n\n       git push [remote] [tag]\n       \n6. 提交所有tag\n\n       git push --tags\n       \n7. 基于某个tag新建一个分支\n\n       git checkout -b [branch] [tag]\n      \n       \n### 撤销命令\n\n1. 恢复暂存区的指定文件到工作区\n \n       git checkout [file]\n       \n2. 恢复某个commit的指定文件到工作区\n\n       git checkout [commit] [file]\n       \n3. 恢复暂存区的所有文件到工作区\n\n       git checkout .\n       \n4. 重置暂存区的指定文件，与上一次commit保持一致，但是工作区不变\n\n       git reset [file]\n       \n5. 重置暂存区和工作区，与上次commit保持一致\n\n       git reset --hard       \n       \n### 删除命令\n\n1. 删除工作区的文件，并将这次删除放入暂存区\n\n       git rm [file1] [file2]  \n     \n2. 停止追踪指定文件，但该文件会保留在工作区\n\n       git rm --cached [file]\n       \n3. 删除本地分支\n\n       git branch -d [branch]\n       \n4. 删除远程分支\n\n       git push origin --delete [remote-branch]\n       \n       git branch -dr [remore-branch]\n\n5. 删除本地tag\n\n       git tag -d [tag]\n       \n6. 删除远程tag\n\n       git push origin :refs/tags/[tag]\n\n\n### 参考链接\n\n[常用Git命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)","source":"_posts/git命令行入门.md","raw":"---\ntitle: git命令行入门\ndate: 2016-08-31 19:43:02\ntags: Git\ncategories: Git\n---\n\n本文结合项目开发中遇到的实际问题对git命令行的使用做一个简单的总结。\n\n### 常用命令\n\n1. 下载项目\n\n       git clone [url]\n\n2. 查看本地分支\n\n       git branch\n       \n3. 查看远程分支\n\n       git branch -r\n       \n4. 创建本地分支\n\n       git checkout [branch]\n       \n5. 切换本地分支\n\n       git checkout [branch]\n       \n6. 拉取远程分支代码\n\n       git pull origin [remote-branch]\n       \n7. 添加当前目录的所有文件到暂存区\n      \n       git add .\n       \n8. 提交暂存区到仓库区\n\n       git commit -m [message]\n       \n9. 合并分支\n\n       git merge [branch]\n       \n10. 提交本地分支代码\n\n       git push origin [remote-branch]\n       \n### tag命令\n\n1. 列出所有tag\n\n       git tag\n       \n2. 新建tag\n\n       # 在当前commit新建一个tag\n       git tag [tag]\n       \n       # 在指定commit新建一个tag\n       git tag [tag] [commit]\n\n3. 删除本地tag\n\n       git tag -d [tag]\n       \n4. 删除远程tag\n\n       git push origin :refs/tags/[tag]\n       \n5. 提交指定tag\n\n       git push [remote] [tag]\n       \n6. 提交所有tag\n\n       git push --tags\n       \n7. 基于某个tag新建一个分支\n\n       git checkout -b [branch] [tag]\n      \n       \n### 撤销命令\n\n1. 恢复暂存区的指定文件到工作区\n \n       git checkout [file]\n       \n2. 恢复某个commit的指定文件到工作区\n\n       git checkout [commit] [file]\n       \n3. 恢复暂存区的所有文件到工作区\n\n       git checkout .\n       \n4. 重置暂存区的指定文件，与上一次commit保持一致，但是工作区不变\n\n       git reset [file]\n       \n5. 重置暂存区和工作区，与上次commit保持一致\n\n       git reset --hard       \n       \n### 删除命令\n\n1. 删除工作区的文件，并将这次删除放入暂存区\n\n       git rm [file1] [file2]  \n     \n2. 停止追踪指定文件，但该文件会保留在工作区\n\n       git rm --cached [file]\n       \n3. 删除本地分支\n\n       git branch -d [branch]\n       \n4. 删除远程分支\n\n       git push origin --delete [remote-branch]\n       \n       git branch -dr [remore-branch]\n\n5. 删除本地tag\n\n       git tag -d [tag]\n       \n6. 删除远程tag\n\n       git push origin :refs/tags/[tag]\n\n\n### 参考链接\n\n[常用Git命令清单](http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html)","slug":"git命令行入门","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i7c0005bxyafgq441y3","content":"<p>本文结合项目开发中遇到的实际问题对git命令行的使用做一个简单的总结。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ol>\n<li><p>下载项目</p>\n<pre><code>git clone [url]\n</code></pre></li>\n<li><p>查看本地分支</p>\n<pre><code>git branch\n</code></pre></li>\n<li><p>查看远程分支</p>\n<pre><code>git branch -r\n</code></pre></li>\n<li><p>创建本地分支</p>\n<pre><code>git checkout [branch]\n</code></pre></li>\n<li><p>切换本地分支</p>\n<pre><code>git checkout [branch]\n</code></pre></li>\n<li><p>拉取远程分支代码</p>\n<pre><code>git pull origin [remote-branch]\n</code></pre></li>\n<li><p>添加当前目录的所有文件到暂存区</p>\n<pre><code>git add .\n</code></pre></li>\n<li><p>提交暂存区到仓库区</p>\n<pre><code>git commit -m [message]\n</code></pre></li>\n<li><p>合并分支</p>\n<pre><code>git merge [branch]\n</code></pre></li>\n<li><p>提交本地分支代码</p>\n<p>   git push origin [remote-branch]</p>\n</li>\n</ol>\n<h3 id=\"tag命令\"><a href=\"#tag命令\" class=\"headerlink\" title=\"tag命令\"></a>tag命令</h3><ol>\n<li><p>列出所有tag</p>\n<pre><code>git tag\n</code></pre></li>\n<li><p>新建tag</p>\n<pre><code># 在当前commit新建一个tag\ngit tag [tag]\n\n# 在指定commit新建一个tag\ngit tag [tag] [commit]\n</code></pre></li>\n<li><p>删除本地tag</p>\n<pre><code>git tag -d [tag]\n</code></pre></li>\n<li><p>删除远程tag</p>\n<pre><code>git push origin :refs/tags/[tag]\n</code></pre></li>\n<li><p>提交指定tag</p>\n<pre><code>git push [remote] [tag]\n</code></pre></li>\n<li><p>提交所有tag</p>\n<pre><code>git push --tags\n</code></pre></li>\n<li><p>基于某个tag新建一个分支</p>\n<pre><code>git checkout -b [branch] [tag]\n</code></pre></li>\n</ol>\n<h3 id=\"撤销命令\"><a href=\"#撤销命令\" class=\"headerlink\" title=\"撤销命令\"></a>撤销命令</h3><ol>\n<li><p>恢复暂存区的指定文件到工作区</p>\n<pre><code>git checkout [file]\n</code></pre></li>\n<li><p>恢复某个commit的指定文件到工作区</p>\n<pre><code>git checkout [commit] [file]\n</code></pre></li>\n<li><p>恢复暂存区的所有文件到工作区</p>\n<pre><code>git checkout .\n</code></pre></li>\n<li><p>重置暂存区的指定文件，与上一次commit保持一致，但是工作区不变</p>\n<pre><code>git reset [file]\n</code></pre></li>\n<li><p>重置暂存区和工作区，与上次commit保持一致</p>\n<pre><code>git reset --hard       \n</code></pre></li>\n</ol>\n<h3 id=\"删除命令\"><a href=\"#删除命令\" class=\"headerlink\" title=\"删除命令\"></a>删除命令</h3><ol>\n<li><p>删除工作区的文件，并将这次删除放入暂存区</p>\n<pre><code>git rm [file1] [file2]  \n</code></pre></li>\n<li><p>停止追踪指定文件，但该文件会保留在工作区</p>\n<pre><code>git rm --cached [file]\n</code></pre></li>\n<li><p>删除本地分支</p>\n<pre><code>git branch -d [branch]\n</code></pre></li>\n<li><p>删除远程分支</p>\n<pre><code>git push origin --delete [remote-branch]\n\ngit branch -dr [remore-branch]\n</code></pre></li>\n<li><p>删除本地tag</p>\n<pre><code>git tag -d [tag]\n</code></pre></li>\n<li><p>删除远程tag</p>\n<pre><code>git push origin :refs/tags/[tag]\n</code></pre></li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"external\">常用Git命令清单</a></p>\n","excerpt":"","more":"<p>本文结合项目开发中遇到的实际问题对git命令行的使用做一个简单的总结。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ol>\n<li><p>下载项目</p>\n<pre><code>git clone [url]\n</code></pre></li>\n<li><p>查看本地分支</p>\n<pre><code>git branch\n</code></pre></li>\n<li><p>查看远程分支</p>\n<pre><code>git branch -r\n</code></pre></li>\n<li><p>创建本地分支</p>\n<pre><code>git checkout [branch]\n</code></pre></li>\n<li><p>切换本地分支</p>\n<pre><code>git checkout [branch]\n</code></pre></li>\n<li><p>拉取远程分支代码</p>\n<pre><code>git pull origin [remote-branch]\n</code></pre></li>\n<li><p>添加当前目录的所有文件到暂存区</p>\n<pre><code>git add .\n</code></pre></li>\n<li><p>提交暂存区到仓库区</p>\n<pre><code>git commit -m [message]\n</code></pre></li>\n<li><p>合并分支</p>\n<pre><code>git merge [branch]\n</code></pre></li>\n<li><p>提交本地分支代码</p>\n<p>   git push origin [remote-branch]</p>\n</li>\n</ol>\n<h3 id=\"tag命令\"><a href=\"#tag命令\" class=\"headerlink\" title=\"tag命令\"></a>tag命令</h3><ol>\n<li><p>列出所有tag</p>\n<pre><code>git tag\n</code></pre></li>\n<li><p>新建tag</p>\n<pre><code># 在当前commit新建一个tag\ngit tag [tag]\n\n# 在指定commit新建一个tag\ngit tag [tag] [commit]\n</code></pre></li>\n<li><p>删除本地tag</p>\n<pre><code>git tag -d [tag]\n</code></pre></li>\n<li><p>删除远程tag</p>\n<pre><code>git push origin :refs/tags/[tag]\n</code></pre></li>\n<li><p>提交指定tag</p>\n<pre><code>git push [remote] [tag]\n</code></pre></li>\n<li><p>提交所有tag</p>\n<pre><code>git push --tags\n</code></pre></li>\n<li><p>基于某个tag新建一个分支</p>\n<pre><code>git checkout -b [branch] [tag]\n</code></pre></li>\n</ol>\n<h3 id=\"撤销命令\"><a href=\"#撤销命令\" class=\"headerlink\" title=\"撤销命令\"></a>撤销命令</h3><ol>\n<li><p>恢复暂存区的指定文件到工作区</p>\n<pre><code>git checkout [file]\n</code></pre></li>\n<li><p>恢复某个commit的指定文件到工作区</p>\n<pre><code>git checkout [commit] [file]\n</code></pre></li>\n<li><p>恢复暂存区的所有文件到工作区</p>\n<pre><code>git checkout .\n</code></pre></li>\n<li><p>重置暂存区的指定文件，与上一次commit保持一致，但是工作区不变</p>\n<pre><code>git reset [file]\n</code></pre></li>\n<li><p>重置暂存区和工作区，与上次commit保持一致</p>\n<pre><code>git reset --hard       \n</code></pre></li>\n</ol>\n<h3 id=\"删除命令\"><a href=\"#删除命令\" class=\"headerlink\" title=\"删除命令\"></a>删除命令</h3><ol>\n<li><p>删除工作区的文件，并将这次删除放入暂存区</p>\n<pre><code>git rm [file1] [file2]  \n</code></pre></li>\n<li><p>停止追踪指定文件，但该文件会保留在工作区</p>\n<pre><code>git rm --cached [file]\n</code></pre></li>\n<li><p>删除本地分支</p>\n<pre><code>git branch -d [branch]\n</code></pre></li>\n<li><p>删除远程分支</p>\n<pre><code>git push origin --delete [remote-branch]\n\ngit branch -dr [remore-branch]\n</code></pre></li>\n<li><p>删除本地tag</p>\n<pre><code>git tag -d [tag]\n</code></pre></li>\n<li><p>删除远程tag</p>\n<pre><code>git push origin :refs/tags/[tag]\n</code></pre></li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">常用Git命令清单</a></p>\n"},{"title":"iOS--让子View不响应父View的手势","date":"2016-10-24T05:57:13.000Z","_content":"\n在项目中遇到一个问题，父View上添加的手势事件在子View中也会响应，通过搜索后找到了解决方案，接下来作一个小总结，方便以后遇到相同问题时查找。\n解决思路：手势事件有一个代理方法，`- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch`，我们就是要通过这个代理方法屏蔽掉子View上的事件响应。\n\n    - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\n    if ([touch.view isDescendantOfView:你想屏蔽掉手势的子视图]) {\n     return NO;\n     }\n     return YES;\n    } \n\n","source":"_posts/iOS-让子View不响应父View的手势.md","raw":"---\ntitle: iOS--让子View不响应父View的手势\ndate: 2016-10-24 13:57:13\ntags: iOS\ncategories: iOS\n---\n\n在项目中遇到一个问题，父View上添加的手势事件在子View中也会响应，通过搜索后找到了解决方案，接下来作一个小总结，方便以后遇到相同问题时查找。\n解决思路：手势事件有一个代理方法，`- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch`，我们就是要通过这个代理方法屏蔽掉子View上的事件响应。\n\n    - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\n    if ([touch.view isDescendantOfView:你想屏蔽掉手势的子视图]) {\n     return NO;\n     }\n     return YES;\n    } \n\n","slug":"iOS-让子View不响应父View的手势","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i7k0007bxya3ez5t70z","content":"<p>在项目中遇到一个问题，父View上添加的手势事件在子View中也会响应，通过搜索后找到了解决方案，接下来作一个小总结，方便以后遇到相同问题时查找。<br>解决思路：手势事件有一个代理方法，<code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch</code>，我们就是要通过这个代理方法屏蔽掉子View上的事件响应。</p>\n<pre><code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\nif ([touch.view isDescendantOfView:你想屏蔽掉手势的子视图]) {\n return NO;\n }\n return YES;\n} \n</code></pre>","excerpt":"","more":"<p>在项目中遇到一个问题，父View上添加的手势事件在子View中也会响应，通过搜索后找到了解决方案，接下来作一个小总结，方便以后遇到相同问题时查找。<br>解决思路：手势事件有一个代理方法，<code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch</code>，我们就是要通过这个代理方法屏蔽掉子View上的事件响应。</p>\n<pre><code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch {\nif ([touch.view isDescendantOfView:你想屏蔽掉手势的子视图]) {\n return NO;\n }\n return YES;\n} \n</code></pre>"},{"title":"Markdown语法初探","date":"2016-08-11T02:19:34.000Z","_content":"\n[Markdown](https://zh.wikipedia.org/wiki/Markdown)是一种轻量级标记语言，我打算利用Markdown语言来写博客，这就需要我能够熟悉Markdown的一些常用方法，这篇博客就是对常用Markdown用法的一些总结。\n\n## 标题\n\n可以在标题内容前输入特定数量的#来实现对应级别的HTML样式的标题。列如：\n\n    # 一级标题\n    \n    #### 四级标题\n    \n另外，一级和二级标题还有一种写法：\n\n    一级标题\n    =====================\n    二级标题\n    ---------------------\n    \n## 换行\n\n在文本中输入的换行会从最终生成的结果中删除，浏览器会根据可用空间自动换行。如果想强迫换行，可以在行尾插入**至少两个空格**。\n\n## 引用\n\n> 这是一段被引用的内容\n> 引用结束\n\n\n## 链接\n\n    [链接文案](链接地址)\n    例如： [Markdown](https://zh.wikipedia.org/wiki/Markdown)\n\n## 图片\n\n    ![Alt text](image url)\n\n![foo](https://zh.wikipedia.org/static/images/project-logos/zhwiki.png)\n\n\n## 强调\n\n    *斜体* 或 _斜体_  \n    \n    **加重强调** 或 __加重强调__\n    \n## 参考\n\n[markdown语法参考](http://wowubuntu.com/markdown/)\n\n[markdown维基百科](https://zh.wikipedia.org/wiki/Markdown)\n\n","source":"_posts/Markdown语法初探.md","raw":"---\ntitle: Markdown语法初探\ndate: 2016-08-11 10:19:34\ntags: Markdown\ncategories: 其他\n---\n\n[Markdown](https://zh.wikipedia.org/wiki/Markdown)是一种轻量级标记语言，我打算利用Markdown语言来写博客，这就需要我能够熟悉Markdown的一些常用方法，这篇博客就是对常用Markdown用法的一些总结。\n\n## 标题\n\n可以在标题内容前输入特定数量的#来实现对应级别的HTML样式的标题。列如：\n\n    # 一级标题\n    \n    #### 四级标题\n    \n另外，一级和二级标题还有一种写法：\n\n    一级标题\n    =====================\n    二级标题\n    ---------------------\n    \n## 换行\n\n在文本中输入的换行会从最终生成的结果中删除，浏览器会根据可用空间自动换行。如果想强迫换行，可以在行尾插入**至少两个空格**。\n\n## 引用\n\n> 这是一段被引用的内容\n> 引用结束\n\n\n## 链接\n\n    [链接文案](链接地址)\n    例如： [Markdown](https://zh.wikipedia.org/wiki/Markdown)\n\n## 图片\n\n    ![Alt text](image url)\n\n![foo](https://zh.wikipedia.org/static/images/project-logos/zhwiki.png)\n\n\n## 强调\n\n    *斜体* 或 _斜体_  \n    \n    **加重强调** 或 __加重强调__\n    \n## 参考\n\n[markdown语法参考](http://wowubuntu.com/markdown/)\n\n[markdown维基百科](https://zh.wikipedia.org/wiki/Markdown)\n\n","slug":"Markdown语法初探","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i7o000abxya0ejhc26a","content":"<p><a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">Markdown</a>是一种轻量级标记语言，我打算利用Markdown语言来写博客，这就需要我能够熟悉Markdown的一些常用方法，这篇博客就是对常用Markdown用法的一些总结。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>可以在标题内容前输入特定数量的#来实现对应级别的HTML样式的标题。列如：</p>\n<pre><code># 一级标题\n\n#### 四级标题\n</code></pre><p>另外，一级和二级标题还有一种写法：</p>\n<pre><code>一级标题\n=====================\n二级标题\n---------------------\n</code></pre><h2 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h2><p>在文本中输入的换行会从最终生成的结果中删除，浏览器会根据可用空间自动换行。如果想强迫换行，可以在行尾插入<strong>至少两个空格</strong>。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>这是一段被引用的内容<br>引用结束</p>\n</blockquote>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><pre><code>[链接文案](链接地址)\n例如： [Markdown](https://zh.wikipedia.org/wiki/Markdown)\n</code></pre><h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><pre><code>![Alt text](image url)\n</code></pre><p><img src=\"https://zh.wikipedia.org/static/images/project-logos/zhwiki.png\" alt=\"foo\"></p>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><pre><code>*斜体* 或 _斜体_  \n\n**加重强调** 或 __加重强调__\n</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">markdown语法参考</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">markdown维基百科</a></p>\n","excerpt":"","more":"<p><a href=\"https://zh.wikipedia.org/wiki/Markdown\">Markdown</a>是一种轻量级标记语言，我打算利用Markdown语言来写博客，这就需要我能够熟悉Markdown的一些常用方法，这篇博客就是对常用Markdown用法的一些总结。</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>可以在标题内容前输入特定数量的#来实现对应级别的HTML样式的标题。列如：</p>\n<pre><code># 一级标题\n\n#### 四级标题\n</code></pre><p>另外，一级和二级标题还有一种写法：</p>\n<pre><code>一级标题\n=====================\n二级标题\n---------------------\n</code></pre><h2 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h2><p>在文本中输入的换行会从最终生成的结果中删除，浏览器会根据可用空间自动换行。如果想强迫换行，可以在行尾插入<strong>至少两个空格</strong>。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>这是一段被引用的内容<br>引用结束</p>\n</blockquote>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><pre><code>[链接文案](链接地址)\n例如： [Markdown](https://zh.wikipedia.org/wiki/Markdown)\n</code></pre><h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><pre><code>![Alt text](image url)\n</code></pre><p><img src=\"https://zh.wikipedia.org/static/images/project-logos/zhwiki.png\" alt=\"foo\"></p>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><pre><code>*斜体* 或 _斜体_  \n\n**加重强调** 或 __加重强调__\n</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://wowubuntu.com/markdown/\">markdown语法参考</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/Markdown\">markdown维基百科</a></p>\n"},{"title":"个人博客进阶--Hexo搭建博客","date":"2016-08-25T02:31:50.000Z","_content":"\n在结合Github、Jekyll搭建好自己的博客后，发现无法方便的更换主题和给文章进行分类，通过调查发现很多精美的博客都是结合Github和[Hexo](https://github.com/hexojs/hexo)搭建的，本文就是分享一下我是如何利用Hexo搭建自己的博客的。\n\n### 安装Hexo\n\n#### 安装Node.js\nhexo是一款基于[Node.js](https://nodejs.org/en/)的静态博客框架，所以想要安装Hexo，我们首先需要安装Node.js库。我们可以到Node.js的[官网](https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可。\n\n#### 正式安装Hexo\n\n1.执行安装Hexo命令\n        \n         sudo npm install -g hexo\n        \n2.创建blog文件夹并cd到blog文件夹内\n\n3.执行init命令初始化hexo\n\n         hexo init\n         \n4.生成静态页面\n\n         hexo g\n       \n5.本地启动服务器，进行文章预览\n\n         hexo server\n         \n  在浏览器中输入http://localhost:4000 即可预览文章\n  \n6.将github仓库与blog建立关联\n\n         vi _config.yml\n         \n         deploy:\n            type: git\n            repo: https://github.com/luzhiyongGit/luzhiyongGit.github.io\n            branch: master\n            \n   \n  执行配置命令\n  \n         npm install hexo-deployer-git -S\n         \n7.发布博客\n\n         hexo d\n         \n  执行完毕后，你会发现你的github仓库内容已经发生了更改，同时打开[https://luzhiyonggit.github.io](https://luzhiyonggit.github.io)，能够看到一篇默认博客\n  \n### 利用hexo编写博客\n\n1.新建一篇博客\n\n        hexo new 博客名称\n        \n2.生成博客页面\n\n        hexo g\n        \n3.发布博客\n\n        hexo d\n        \n### 博客主题\n\nHexo有非常多的主题可以选择替换，替换流程也特别方便\n\n1.从[Hexo Themes](https://github.com/hexojs/hexo/wiki/Themes)中找到一个你心仪的主题，本博客使用的是[next](https://github.com/iissnan/hexo-theme-next)\n\n2.在你的blog文件目录下，执行下面的命令\n\n     git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n     \n3.编辑配置信息\n\n     vi _config.yml\n     \n     # Extensions\n     ## Plugins: http://hexo.io/plugins/\n     ## Themes: http://hexo.io/themes/\n     theme: next\n\n\n4.生成博客页面\n\n     hexo g\n     \n5.发布博客\n\n     hexo d\n\n### 特效配置\n\n    next主题有一个[next wiki](https://github.com/iissnan/hexo-theme-next/wiki/)提供了很多特性配置的方案，我们可以通过参考它完成很多特性配置\n     \n### 参考链接\n\n[简洁轻便的博客平台: Hexo详解](http://www.tuicool.com/articles/ueI7naV)\n","source":"_posts/个人博客进阶-Hexo搭建博客.md","raw":"---\ntitle: 个人博客进阶--Hexo搭建博客\ndate: 2016-08-25 10:31:50\ntags: 博客\ncategories: 其他\n---\n\n在结合Github、Jekyll搭建好自己的博客后，发现无法方便的更换主题和给文章进行分类，通过调查发现很多精美的博客都是结合Github和[Hexo](https://github.com/hexojs/hexo)搭建的，本文就是分享一下我是如何利用Hexo搭建自己的博客的。\n\n### 安装Hexo\n\n#### 安装Node.js\nhexo是一款基于[Node.js](https://nodejs.org/en/)的静态博客框架，所以想要安装Hexo，我们首先需要安装Node.js库。我们可以到Node.js的[官网](https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可。\n\n#### 正式安装Hexo\n\n1.执行安装Hexo命令\n        \n         sudo npm install -g hexo\n        \n2.创建blog文件夹并cd到blog文件夹内\n\n3.执行init命令初始化hexo\n\n         hexo init\n         \n4.生成静态页面\n\n         hexo g\n       \n5.本地启动服务器，进行文章预览\n\n         hexo server\n         \n  在浏览器中输入http://localhost:4000 即可预览文章\n  \n6.将github仓库与blog建立关联\n\n         vi _config.yml\n         \n         deploy:\n            type: git\n            repo: https://github.com/luzhiyongGit/luzhiyongGit.github.io\n            branch: master\n            \n   \n  执行配置命令\n  \n         npm install hexo-deployer-git -S\n         \n7.发布博客\n\n         hexo d\n         \n  执行完毕后，你会发现你的github仓库内容已经发生了更改，同时打开[https://luzhiyonggit.github.io](https://luzhiyonggit.github.io)，能够看到一篇默认博客\n  \n### 利用hexo编写博客\n\n1.新建一篇博客\n\n        hexo new 博客名称\n        \n2.生成博客页面\n\n        hexo g\n        \n3.发布博客\n\n        hexo d\n        \n### 博客主题\n\nHexo有非常多的主题可以选择替换，替换流程也特别方便\n\n1.从[Hexo Themes](https://github.com/hexojs/hexo/wiki/Themes)中找到一个你心仪的主题，本博客使用的是[next](https://github.com/iissnan/hexo-theme-next)\n\n2.在你的blog文件目录下，执行下面的命令\n\n     git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n     \n3.编辑配置信息\n\n     vi _config.yml\n     \n     # Extensions\n     ## Plugins: http://hexo.io/plugins/\n     ## Themes: http://hexo.io/themes/\n     theme: next\n\n\n4.生成博客页面\n\n     hexo g\n     \n5.发布博客\n\n     hexo d\n\n### 特效配置\n\n    next主题有一个[next wiki](https://github.com/iissnan/hexo-theme-next/wiki/)提供了很多特性配置的方案，我们可以通过参考它完成很多特性配置\n     \n### 参考链接\n\n[简洁轻便的博客平台: Hexo详解](http://www.tuicool.com/articles/ueI7naV)\n","slug":"个人博客进阶-Hexo搭建博客","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i7q000cbxyavwmjr9sx","content":"<p>在结合Github、Jekyll搭建好自己的博客后，发现无法方便的更换主题和给文章进行分类，通过调查发现很多精美的博客都是结合Github和<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">Hexo</a>搭建的，本文就是分享一下我是如何利用Hexo搭建自己的博客的。</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>hexo是一款基于<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a>的静态博客框架，所以想要安装Hexo，我们首先需要安装Node.js库。我们可以到Node.js的<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">官网</a>下载相应平台的最新版本，一路安装即可。</p>\n<h4 id=\"正式安装Hexo\"><a href=\"#正式安装Hexo\" class=\"headerlink\" title=\"正式安装Hexo\"></a>正式安装Hexo</h4><p>1.执行安装Hexo命令</p>\n<pre><code>sudo npm install -g hexo\n</code></pre><p>2.创建blog文件夹并cd到blog文件夹内</p>\n<p>3.执行init命令初始化hexo</p>\n<pre><code>hexo init\n</code></pre><p>4.生成静态页面</p>\n<pre><code>hexo g\n</code></pre><p>5.本地启动服务器，进行文章预览</p>\n<pre><code>hexo server\n</code></pre><p>  在浏览器中输入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> 即可预览文章</p>\n<p>6.将github仓库与blog建立关联</p>\n<pre><code>vi _config.yml\n\ndeploy:\n   type: git\n   repo: https://github.com/luzhiyongGit/luzhiyongGit.github.io\n   branch: master\n</code></pre><p>  执行配置命令</p>\n<pre><code>npm install hexo-deployer-git -S\n</code></pre><p>7.发布博客</p>\n<pre><code>hexo d\n</code></pre><p>  执行完毕后，你会发现你的github仓库内容已经发生了更改，同时打开<a href=\"https://luzhiyonggit.github.io\" target=\"_blank\" rel=\"external\">https://luzhiyonggit.github.io</a>，能够看到一篇默认博客</p>\n<h3 id=\"利用hexo编写博客\"><a href=\"#利用hexo编写博客\" class=\"headerlink\" title=\"利用hexo编写博客\"></a>利用hexo编写博客</h3><p>1.新建一篇博客</p>\n<pre><code>hexo new 博客名称\n</code></pre><p>2.生成博客页面</p>\n<pre><code>hexo g\n</code></pre><p>3.发布博客</p>\n<pre><code>hexo d\n</code></pre><h3 id=\"博客主题\"><a href=\"#博客主题\" class=\"headerlink\" title=\"博客主题\"></a>博客主题</h3><p>Hexo有非常多的主题可以选择替换，替换流程也特别方便</p>\n<p>1.从<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">Hexo Themes</a>中找到一个你心仪的主题，本博客使用的是<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">next</a></p>\n<p>2.在你的blog文件目录下，执行下面的命令</p>\n<pre><code>git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n</code></pre><p>3.编辑配置信息</p>\n<pre><code>vi _config.yml\n\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n</code></pre><p>4.生成博客页面</p>\n<pre><code>hexo g\n</code></pre><p>5.发布博客</p>\n<pre><code>hexo d\n</code></pre><h3 id=\"特效配置\"><a href=\"#特效配置\" class=\"headerlink\" title=\"特效配置\"></a>特效配置</h3><pre><code>next主题有一个[next wiki](https://github.com/iissnan/hexo-theme-next/wiki/)提供了很多特性配置的方案，我们可以通过参考它完成很多特性配置\n</code></pre><h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.tuicool.com/articles/ueI7naV\" target=\"_blank\" rel=\"external\">简洁轻便的博客平台: Hexo详解</a></p>\n","excerpt":"","more":"<p>在结合Github、Jekyll搭建好自己的博客后，发现无法方便的更换主题和给文章进行分类，通过调查发现很多精美的博客都是结合Github和<a href=\"https://github.com/hexojs/hexo\">Hexo</a>搭建的，本文就是分享一下我是如何利用Hexo搭建自己的博客的。</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>hexo是一款基于<a href=\"https://nodejs.org/en/\">Node.js</a>的静态博客框架，所以想要安装Hexo，我们首先需要安装Node.js库。我们可以到Node.js的<a href=\"https://nodejs.org/en/\">官网</a>下载相应平台的最新版本，一路安装即可。</p>\n<h4 id=\"正式安装Hexo\"><a href=\"#正式安装Hexo\" class=\"headerlink\" title=\"正式安装Hexo\"></a>正式安装Hexo</h4><p>1.执行安装Hexo命令</p>\n<pre><code>sudo npm install -g hexo\n</code></pre><p>2.创建blog文件夹并cd到blog文件夹内</p>\n<p>3.执行init命令初始化hexo</p>\n<pre><code>hexo init\n</code></pre><p>4.生成静态页面</p>\n<pre><code>hexo g\n</code></pre><p>5.本地启动服务器，进行文章预览</p>\n<pre><code>hexo server\n</code></pre><p>  在浏览器中输入<a href=\"http://localhost:4000\">http://localhost:4000</a> 即可预览文章</p>\n<p>6.将github仓库与blog建立关联</p>\n<pre><code>vi _config.yml\n\ndeploy:\n   type: git\n   repo: https://github.com/luzhiyongGit/luzhiyongGit.github.io\n   branch: master\n</code></pre><p>  执行配置命令</p>\n<pre><code>npm install hexo-deployer-git -S\n</code></pre><p>7.发布博客</p>\n<pre><code>hexo d\n</code></pre><p>  执行完毕后，你会发现你的github仓库内容已经发生了更改，同时打开<a href=\"https://luzhiyonggit.github.io\">https://luzhiyonggit.github.io</a>，能够看到一篇默认博客</p>\n<h3 id=\"利用hexo编写博客\"><a href=\"#利用hexo编写博客\" class=\"headerlink\" title=\"利用hexo编写博客\"></a>利用hexo编写博客</h3><p>1.新建一篇博客</p>\n<pre><code>hexo new 博客名称\n</code></pre><p>2.生成博客页面</p>\n<pre><code>hexo g\n</code></pre><p>3.发布博客</p>\n<pre><code>hexo d\n</code></pre><h3 id=\"博客主题\"><a href=\"#博客主题\" class=\"headerlink\" title=\"博客主题\"></a>博客主题</h3><p>Hexo有非常多的主题可以选择替换，替换流程也特别方便</p>\n<p>1.从<a href=\"https://github.com/hexojs/hexo/wiki/Themes\">Hexo Themes</a>中找到一个你心仪的主题，本博客使用的是<a href=\"https://github.com/iissnan/hexo-theme-next\">next</a></p>\n<p>2.在你的blog文件目录下，执行下面的命令</p>\n<pre><code>git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n</code></pre><p>3.编辑配置信息</p>\n<pre><code>vi _config.yml\n\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n</code></pre><p>4.生成博客页面</p>\n<pre><code>hexo g\n</code></pre><p>5.发布博客</p>\n<pre><code>hexo d\n</code></pre><h3 id=\"特效配置\"><a href=\"#特效配置\" class=\"headerlink\" title=\"特效配置\"></a>特效配置</h3><pre><code>next主题有一个[next wiki](https://github.com/iissnan/hexo-theme-next/wiki/)提供了很多特性配置的方案，我们可以通过参考它完成很多特性配置\n</code></pre><h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.tuicool.com/articles/ueI7naV\">简洁轻便的博客平台: Hexo详解</a></p>\n"},{"title":"如何搭建属于自己的博客？","date":"2016-08-08T02:19:34.000Z","_content":"本文主要介绍使用 Github、Jekyll 打造自己的免费独立博客的方法\n\n[Github](http://www.github.com)是一个代码托管网站，现在很多开源项目都放在Github上。Github还提供了一个功能，叫Github Pages，利用这个功能，我们可以为项目建立网站，当然，这也意味着我们可以通过Github Pages建立自己的博客。\n\n[Jekyll](http://jekyllrb.com/)是一个简单的，针对博客设计的静态网站生成器。通过结合使用Github和Jekyll，我们可以打造自己的独立博客，可以自由的定制网站风格，并且这一切都是免费的。\n\n## 入门指引\n\n[Github Pages](https://pages.github.com/)的主页提供了一个简单的入门指引，阅读并操作一遍，会有一个直观的认识。\n\n阮一峰的文章[搭建一个免费的，无限流量的Blog---Github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)是一篇特别好的入门文章。\n\n## 建立自己的博客\n\n在搭建独立博客时，通过有三种方式可以选择：\n \n   1. 完全自定义博客\n   2. 找一个框架，基于框架修改使用\n   3. 从Github上找一个比较好的源码，fork使用\n\n本博客选择的是第三种方法，在Github上有一个比较火的开源博客项目[jekyll-now](https://github.com/barryclark/jekyll-now)，这个项目的特点是，所有操作都是通过网页进行，不需要懂命令行，对于刚入门的新手来说非常实用。\n\n## 参考文章\n[搭建一个免费的，无限流量的Blog---Github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)\n\n[使用Github、Jekyll打造自己的免费独立博客](http://blog.csdn.net/on_1y/article/details/19259435)","source":"_posts/如何搭建属于自己的博客.md","raw":"---\ntitle: 如何搭建属于自己的博客？\ndate: 2016-08-08 10:19:34\ntags: 博客\ncategories: 其他\n---\n本文主要介绍使用 Github、Jekyll 打造自己的免费独立博客的方法\n\n[Github](http://www.github.com)是一个代码托管网站，现在很多开源项目都放在Github上。Github还提供了一个功能，叫Github Pages，利用这个功能，我们可以为项目建立网站，当然，这也意味着我们可以通过Github Pages建立自己的博客。\n\n[Jekyll](http://jekyllrb.com/)是一个简单的，针对博客设计的静态网站生成器。通过结合使用Github和Jekyll，我们可以打造自己的独立博客，可以自由的定制网站风格，并且这一切都是免费的。\n\n## 入门指引\n\n[Github Pages](https://pages.github.com/)的主页提供了一个简单的入门指引，阅读并操作一遍，会有一个直观的认识。\n\n阮一峰的文章[搭建一个免费的，无限流量的Blog---Github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)是一篇特别好的入门文章。\n\n## 建立自己的博客\n\n在搭建独立博客时，通过有三种方式可以选择：\n \n   1. 完全自定义博客\n   2. 找一个框架，基于框架修改使用\n   3. 从Github上找一个比较好的源码，fork使用\n\n本博客选择的是第三种方法，在Github上有一个比较火的开源博客项目[jekyll-now](https://github.com/barryclark/jekyll-now)，这个项目的特点是，所有操作都是通过网页进行，不需要懂命令行，对于刚入门的新手来说非常实用。\n\n## 参考文章\n[搭建一个免费的，无限流量的Blog---Github Pages和Jekyll入门](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)\n\n[使用Github、Jekyll打造自己的免费独立博客](http://blog.csdn.net/on_1y/article/details/19259435)","slug":"如何搭建属于自己的博客","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i7v000hbxyajn0j2xx3","content":"<p>本文主要介绍使用 Github、Jekyll 打造自己的免费独立博客的方法</p>\n<p><a href=\"http://www.github.com\" target=\"_blank\" rel=\"external\">Github</a>是一个代码托管网站，现在很多开源项目都放在Github上。Github还提供了一个功能，叫Github Pages，利用这个功能，我们可以为项目建立网站，当然，这也意味着我们可以通过Github Pages建立自己的博客。</p>\n<p><a href=\"http://jekyllrb.com/\" target=\"_blank\" rel=\"external\">Jekyll</a>是一个简单的，针对博客设计的静态网站生成器。通过结合使用Github和Jekyll，我们可以打造自己的独立博客，可以自由的定制网站风格，并且这一切都是免费的。</p>\n<h2 id=\"入门指引\"><a href=\"#入门指引\" class=\"headerlink\" title=\"入门指引\"></a>入门指引</h2><p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">Github Pages</a>的主页提供了一个简单的入门指引，阅读并操作一遍，会有一个直观的认识。</p>\n<p>阮一峰的文章<a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"external\">搭建一个免费的，无限流量的Blog—Github Pages和Jekyll入门</a>是一篇特别好的入门文章。</p>\n<h2 id=\"建立自己的博客\"><a href=\"#建立自己的博客\" class=\"headerlink\" title=\"建立自己的博客\"></a>建立自己的博客</h2><p>在搭建独立博客时，通过有三种方式可以选择：</p>\n<ol>\n<li>完全自定义博客</li>\n<li>找一个框架，基于框架修改使用</li>\n<li>从Github上找一个比较好的源码，fork使用</li>\n</ol>\n<p>本博客选择的是第三种方法，在Github上有一个比较火的开源博客项目<a href=\"https://github.com/barryclark/jekyll-now\" target=\"_blank\" rel=\"external\">jekyll-now</a>，这个项目的特点是，所有操作都是通过网页进行，不需要懂命令行，对于刚入门的新手来说非常实用。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"external\">搭建一个免费的，无限流量的Blog—Github Pages和Jekyll入门</a></p>\n<p><a href=\"http://blog.csdn.net/on_1y/article/details/19259435\" target=\"_blank\" rel=\"external\">使用Github、Jekyll打造自己的免费独立博客</a></p>\n","excerpt":"","more":"<p>本文主要介绍使用 Github、Jekyll 打造自己的免费独立博客的方法</p>\n<p><a href=\"http://www.github.com\">Github</a>是一个代码托管网站，现在很多开源项目都放在Github上。Github还提供了一个功能，叫Github Pages，利用这个功能，我们可以为项目建立网站，当然，这也意味着我们可以通过Github Pages建立自己的博客。</p>\n<p><a href=\"http://jekyllrb.com/\">Jekyll</a>是一个简单的，针对博客设计的静态网站生成器。通过结合使用Github和Jekyll，我们可以打造自己的独立博客，可以自由的定制网站风格，并且这一切都是免费的。</p>\n<h2 id=\"入门指引\"><a href=\"#入门指引\" class=\"headerlink\" title=\"入门指引\"></a>入门指引</h2><p><a href=\"https://pages.github.com/\">Github Pages</a>的主页提供了一个简单的入门指引，阅读并操作一遍，会有一个直观的认识。</p>\n<p>阮一峰的文章<a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\">搭建一个免费的，无限流量的Blog—Github Pages和Jekyll入门</a>是一篇特别好的入门文章。</p>\n<h2 id=\"建立自己的博客\"><a href=\"#建立自己的博客\" class=\"headerlink\" title=\"建立自己的博客\"></a>建立自己的博客</h2><p>在搭建独立博客时，通过有三种方式可以选择：</p>\n<ol>\n<li>完全自定义博客</li>\n<li>找一个框架，基于框架修改使用</li>\n<li>从Github上找一个比较好的源码，fork使用</li>\n</ol>\n<p>本博客选择的是第三种方法，在Github上有一个比较火的开源博客项目<a href=\"https://github.com/barryclark/jekyll-now\">jekyll-now</a>，这个项目的特点是，所有操作都是通过网页进行，不需要懂命令行，对于刚入门的新手来说非常实用。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\">搭建一个免费的，无限流量的Blog—Github Pages和Jekyll入门</a></p>\n<p><a href=\"http://blog.csdn.net/on_1y/article/details/19259435\">使用Github、Jekyll打造自己的免费独立博客</a></p>\n"},{"title":"搭建私有Pod","date":"2016-08-12T02:21:11.000Z","_content":"\n[Cocoapods](http://cocoapods.org/)是一款非常好用的iOS依赖库管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库。同时我们也可以将公司中的公共组件或者项目中的核心组件交由它去管理。本文就是给大家介绍一下，如何使用Cocoapods创建私有的Pod仓库。\n\n \n### 创建一个私有Pod的步骤：\n \n 1. 创建并设置一个私有的 **Spec Repo**\n 2. 创建Pod所需管理的项目\n 3. 创建Pod所对应的podspec文件\n 4. 本地测试配置好的podspec文件是否可用\n 5. 向私有的Spec Repo中提交podspec\n 6. 在个人项目中的Podfile中增加刚刚制作好的Pod并使用\n 7. 更新维护podspec\n \n### 创建私有Spec Repo\n \n先来说第一步，什么是Spec Repo？它是所有的Pods的一个索引，就是一个容器，所有公开的Pods都在这个里面，我们常用的第三方库都是放在[Github](http://www.github.com)里开源的[Specs](https://github.com/CocoaPods/Specs)中，当我们使用CocoaPods后就会在~/.cocoapods/repos目录下生成一个官方的Spec Repo文件夹master。这个master目录的结构如图：\n![Foo](/images/spec_struct.png)\n\n我们首先需要做的就是创建一个类似于master的私有Spec Repo：  \n   1. 创建一个Git仓库  \n   2. 创建完成之后再终端执行如下命令\n      \n      pod repo add [Private Repo Name] [Github Https clone URL]\n \n### 创建Pod项目工程文件\n\nCocoapods为我们提供了一个工具，用来创建Pod管理的项目，相关的文档介绍是[using-pod-lib-create](http://guides.cocoapods.org/making/using-pod-lib-create)，下面我们通过创建一个podDemoLibrary\n     \n     pod lib create podDemoLibrary\n\n这段命令执行完之后，它会问你四个问题：\n\n1.是否需要一个例子工程\n\n2.选择一个测试框架\n\n3.是否基于View测试\n\n4.类的前缀\n\n根据你的实际需求回答这四个问题，通常我们都会选择需要一个例子工程，至于是否需要测试框架或者类的前缀都根据实际请求选择。\n\n回答完问题后，pod会自动帮你创建对应的目录结构，接下来你可以通过终端进入Example文件夹内执行**pod install**，然后打开**podDemoLibrary.workspace**，在Pods工程下面，会有一个Resources文件夹用来存放你的图片资源和一个Classes文件夹用来存放你的代码。至此，pod项目创建已经完成。\n\n### 编辑Pod项目工程文件\npod项目创建完之后你还需要修改它，已达到实现你的功能需求的目的，接下来就是如何编辑Pod文件。\n\n#### 如何添加代码\n\n添加代码的方法同正常的文件创建一样，只是在创建完成之后我们并不能直接使用它，我们需要重新在终端进入Example文件夹内执行**pod install**\n\n#### 如何添加图片资源\n\n想要添加图片资源，首先，我们需要在Assets文件夹内存放图片资源，然后打开**podDemoLibrary.podspec**文件，找到如下代码：\n\n     s.resource_bundles = {\n       'podDemoLibrary' => ['podDemoLibrary/Assets/*.png']\n     } \n\n放开注释，重新执行**pod install**，这样你就能在项目中看到Resource文件夹了。\n\n虽然，你已经能看到Resource文件夹，但是，你并不能直接通过\n   \n      [UIImage imageWithNamed:@\"pic\"];\n      \n加载图片。你可以通过一个宏定义方法加载图片，\n   \n      #define SrcWithName(name) [@\"podDemoLibrary.bundle\" stringByAppendingPathComponent:name]\n      [UIImage imageWithNamed:SrcWithName(@\"pic\")];\n\n\n#### 如何添加依赖库\n\n依赖库的添加需要在**podDemoLibrary.podspec**中添加，s.frameworks 对应的是系统库，s.denpendency 对应的是第三方pod库\n\n### 发布Pod项目\n1.上传代码到git master\n   \n      git add .\n      git commit -m \"Initial Commit\"\n      git push origin master\n      \n2.tag标记\n     \n      git tag -m \"first release\" 0.1.0\n      git push --tags\n      \n3.验证pod\n\n      pod lib lint\n      \n4.发布pod\n\n      pod repo push Specs podDemoLibrary.podspec\n\n### 查找Pod项目\n\n      pod search podDemoLibrary\n      \n如果你能查询到**podDemoLibrary**项目，说明你的pod创建成功了。\n\n### 注意点\n\n在实际使用中遇到了各种零散的问题，这里将遇到的问题做一个总结。\n\n1. 上传了一个错误的tag，需要删除已经上传的tag\n    \n        git tag -d 0.1.0\n        git push origin :refs/tags/0.1.0\n      \n2. pod lib lint时，发现存在warning\n   \n        pod repo push Specs podDemoLibrary.podspec --allow-warnings\n        \n3. 依赖库中有一个framework\n\n        pod repo push Specs podDemoLibrary.podspec --use-libraries\n        \n\n### 参考\n\n[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)\n\n\n","source":"_posts/搭建私有Pod.md","raw":"---\ntitle: 搭建私有Pod\ndate: 2016-08-12 10:21:11\ntags: CocoaPods\ncategories: iOS\n---\n\n[Cocoapods](http://cocoapods.org/)是一款非常好用的iOS依赖库管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库。同时我们也可以将公司中的公共组件或者项目中的核心组件交由它去管理。本文就是给大家介绍一下，如何使用Cocoapods创建私有的Pod仓库。\n\n \n### 创建一个私有Pod的步骤：\n \n 1. 创建并设置一个私有的 **Spec Repo**\n 2. 创建Pod所需管理的项目\n 3. 创建Pod所对应的podspec文件\n 4. 本地测试配置好的podspec文件是否可用\n 5. 向私有的Spec Repo中提交podspec\n 6. 在个人项目中的Podfile中增加刚刚制作好的Pod并使用\n 7. 更新维护podspec\n \n### 创建私有Spec Repo\n \n先来说第一步，什么是Spec Repo？它是所有的Pods的一个索引，就是一个容器，所有公开的Pods都在这个里面，我们常用的第三方库都是放在[Github](http://www.github.com)里开源的[Specs](https://github.com/CocoaPods/Specs)中，当我们使用CocoaPods后就会在~/.cocoapods/repos目录下生成一个官方的Spec Repo文件夹master。这个master目录的结构如图：\n![Foo](/images/spec_struct.png)\n\n我们首先需要做的就是创建一个类似于master的私有Spec Repo：  \n   1. 创建一个Git仓库  \n   2. 创建完成之后再终端执行如下命令\n      \n      pod repo add [Private Repo Name] [Github Https clone URL]\n \n### 创建Pod项目工程文件\n\nCocoapods为我们提供了一个工具，用来创建Pod管理的项目，相关的文档介绍是[using-pod-lib-create](http://guides.cocoapods.org/making/using-pod-lib-create)，下面我们通过创建一个podDemoLibrary\n     \n     pod lib create podDemoLibrary\n\n这段命令执行完之后，它会问你四个问题：\n\n1.是否需要一个例子工程\n\n2.选择一个测试框架\n\n3.是否基于View测试\n\n4.类的前缀\n\n根据你的实际需求回答这四个问题，通常我们都会选择需要一个例子工程，至于是否需要测试框架或者类的前缀都根据实际请求选择。\n\n回答完问题后，pod会自动帮你创建对应的目录结构，接下来你可以通过终端进入Example文件夹内执行**pod install**，然后打开**podDemoLibrary.workspace**，在Pods工程下面，会有一个Resources文件夹用来存放你的图片资源和一个Classes文件夹用来存放你的代码。至此，pod项目创建已经完成。\n\n### 编辑Pod项目工程文件\npod项目创建完之后你还需要修改它，已达到实现你的功能需求的目的，接下来就是如何编辑Pod文件。\n\n#### 如何添加代码\n\n添加代码的方法同正常的文件创建一样，只是在创建完成之后我们并不能直接使用它，我们需要重新在终端进入Example文件夹内执行**pod install**\n\n#### 如何添加图片资源\n\n想要添加图片资源，首先，我们需要在Assets文件夹内存放图片资源，然后打开**podDemoLibrary.podspec**文件，找到如下代码：\n\n     s.resource_bundles = {\n       'podDemoLibrary' => ['podDemoLibrary/Assets/*.png']\n     } \n\n放开注释，重新执行**pod install**，这样你就能在项目中看到Resource文件夹了。\n\n虽然，你已经能看到Resource文件夹，但是，你并不能直接通过\n   \n      [UIImage imageWithNamed:@\"pic\"];\n      \n加载图片。你可以通过一个宏定义方法加载图片，\n   \n      #define SrcWithName(name) [@\"podDemoLibrary.bundle\" stringByAppendingPathComponent:name]\n      [UIImage imageWithNamed:SrcWithName(@\"pic\")];\n\n\n#### 如何添加依赖库\n\n依赖库的添加需要在**podDemoLibrary.podspec**中添加，s.frameworks 对应的是系统库，s.denpendency 对应的是第三方pod库\n\n### 发布Pod项目\n1.上传代码到git master\n   \n      git add .\n      git commit -m \"Initial Commit\"\n      git push origin master\n      \n2.tag标记\n     \n      git tag -m \"first release\" 0.1.0\n      git push --tags\n      \n3.验证pod\n\n      pod lib lint\n      \n4.发布pod\n\n      pod repo push Specs podDemoLibrary.podspec\n\n### 查找Pod项目\n\n      pod search podDemoLibrary\n      \n如果你能查询到**podDemoLibrary**项目，说明你的pod创建成功了。\n\n### 注意点\n\n在实际使用中遇到了各种零散的问题，这里将遇到的问题做一个总结。\n\n1. 上传了一个错误的tag，需要删除已经上传的tag\n    \n        git tag -d 0.1.0\n        git push origin :refs/tags/0.1.0\n      \n2. pod lib lint时，发现存在warning\n   \n        pod repo push Specs podDemoLibrary.podspec --allow-warnings\n        \n3. 依赖库中有一个framework\n\n        pod repo push Specs podDemoLibrary.podspec --use-libraries\n        \n\n### 参考\n\n[使用Cocoapods创建私有podspec](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)\n\n\n","slug":"搭建私有Pod","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i7x000ibxyao5vqtnfg","content":"<p><a href=\"http://cocoapods.org/\" target=\"_blank\" rel=\"external\">Cocoapods</a>是一款非常好用的iOS依赖库管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库。同时我们也可以将公司中的公共组件或者项目中的核心组件交由它去管理。本文就是给大家介绍一下，如何使用Cocoapods创建私有的Pod仓库。</p>\n<h3 id=\"创建一个私有Pod的步骤：\"><a href=\"#创建一个私有Pod的步骤：\" class=\"headerlink\" title=\"创建一个私有Pod的步骤：\"></a>创建一个私有Pod的步骤：</h3><ol>\n<li>创建并设置一个私有的 <strong>Spec Repo</strong></li>\n<li>创建Pod所需管理的项目</li>\n<li>创建Pod所对应的podspec文件</li>\n<li>本地测试配置好的podspec文件是否可用</li>\n<li>向私有的Spec Repo中提交podspec</li>\n<li>在个人项目中的Podfile中增加刚刚制作好的Pod并使用</li>\n<li>更新维护podspec</li>\n</ol>\n<h3 id=\"创建私有Spec-Repo\"><a href=\"#创建私有Spec-Repo\" class=\"headerlink\" title=\"创建私有Spec Repo\"></a>创建私有Spec Repo</h3><p>先来说第一步，什么是Spec Repo？它是所有的Pods的一个索引，就是一个容器，所有公开的Pods都在这个里面，我们常用的第三方库都是放在<a href=\"http://www.github.com\" target=\"_blank\" rel=\"external\">Github</a>里开源的<a href=\"https://github.com/CocoaPods/Specs\" target=\"_blank\" rel=\"external\">Specs</a>中，当我们使用CocoaPods后就会在~/.cocoapods/repos目录下生成一个官方的Spec Repo文件夹master。这个master目录的结构如图：<br><img src=\"/images/spec_struct.png\" alt=\"Foo\"></p>\n<p>我们首先需要做的就是创建一个类似于master的私有Spec Repo：  </p>\n<ol>\n<li>创建一个Git仓库  </li>\n<li><p>创建完成之后再终端执行如下命令</p>\n<p>pod repo add [Private Repo Name] [Github Https clone URL]</p>\n</li>\n</ol>\n<h3 id=\"创建Pod项目工程文件\"><a href=\"#创建Pod项目工程文件\" class=\"headerlink\" title=\"创建Pod项目工程文件\"></a>创建Pod项目工程文件</h3><p>Cocoapods为我们提供了一个工具，用来创建Pod管理的项目，相关的文档介绍是<a href=\"http://guides.cocoapods.org/making/using-pod-lib-create\" target=\"_blank\" rel=\"external\">using-pod-lib-create</a>，下面我们通过创建一个podDemoLibrary</p>\n<pre><code>pod lib create podDemoLibrary\n</code></pre><p>这段命令执行完之后，它会问你四个问题：</p>\n<p>1.是否需要一个例子工程</p>\n<p>2.选择一个测试框架</p>\n<p>3.是否基于View测试</p>\n<p>4.类的前缀</p>\n<p>根据你的实际需求回答这四个问题，通常我们都会选择需要一个例子工程，至于是否需要测试框架或者类的前缀都根据实际请求选择。</p>\n<p>回答完问题后，pod会自动帮你创建对应的目录结构，接下来你可以通过终端进入Example文件夹内执行<strong>pod install</strong>，然后打开<strong>podDemoLibrary.workspace</strong>，在Pods工程下面，会有一个Resources文件夹用来存放你的图片资源和一个Classes文件夹用来存放你的代码。至此，pod项目创建已经完成。</p>\n<h3 id=\"编辑Pod项目工程文件\"><a href=\"#编辑Pod项目工程文件\" class=\"headerlink\" title=\"编辑Pod项目工程文件\"></a>编辑Pod项目工程文件</h3><p>pod项目创建完之后你还需要修改它，已达到实现你的功能需求的目的，接下来就是如何编辑Pod文件。</p>\n<h4 id=\"如何添加代码\"><a href=\"#如何添加代码\" class=\"headerlink\" title=\"如何添加代码\"></a>如何添加代码</h4><p>添加代码的方法同正常的文件创建一样，只是在创建完成之后我们并不能直接使用它，我们需要重新在终端进入Example文件夹内执行<strong>pod install</strong></p>\n<h4 id=\"如何添加图片资源\"><a href=\"#如何添加图片资源\" class=\"headerlink\" title=\"如何添加图片资源\"></a>如何添加图片资源</h4><p>想要添加图片资源，首先，我们需要在Assets文件夹内存放图片资源，然后打开<strong>podDemoLibrary.podspec</strong>文件，找到如下代码：</p>\n<pre><code>s.resource_bundles = {\n  &apos;podDemoLibrary&apos; =&gt; [&apos;podDemoLibrary/Assets/*.png&apos;]\n} \n</code></pre><p>放开注释，重新执行<strong>pod install</strong>，这样你就能在项目中看到Resource文件夹了。</p>\n<p>虽然，你已经能看到Resource文件夹，但是，你并不能直接通过</p>\n<pre><code>[UIImage imageWithNamed:@&quot;pic&quot;];\n</code></pre><p>加载图片。你可以通过一个宏定义方法加载图片，</p>\n<pre><code>#define SrcWithName(name) [@&quot;podDemoLibrary.bundle&quot; stringByAppendingPathComponent:name]\n[UIImage imageWithNamed:SrcWithName(@&quot;pic&quot;)];\n</code></pre><h4 id=\"如何添加依赖库\"><a href=\"#如何添加依赖库\" class=\"headerlink\" title=\"如何添加依赖库\"></a>如何添加依赖库</h4><p>依赖库的添加需要在<strong>podDemoLibrary.podspec</strong>中添加，s.frameworks 对应的是系统库，s.denpendency 对应的是第三方pod库</p>\n<h3 id=\"发布Pod项目\"><a href=\"#发布Pod项目\" class=\"headerlink\" title=\"发布Pod项目\"></a>发布Pod项目</h3><p>1.上传代码到git master</p>\n<pre><code>git add .\ngit commit -m &quot;Initial Commit&quot;\ngit push origin master\n</code></pre><p>2.tag标记</p>\n<pre><code>git tag -m &quot;first release&quot; 0.1.0\ngit push --tags\n</code></pre><p>3.验证pod</p>\n<pre><code>pod lib lint\n</code></pre><p>4.发布pod</p>\n<pre><code>pod repo push Specs podDemoLibrary.podspec\n</code></pre><h3 id=\"查找Pod项目\"><a href=\"#查找Pod项目\" class=\"headerlink\" title=\"查找Pod项目\"></a>查找Pod项目</h3><pre><code>pod search podDemoLibrary\n</code></pre><p>如果你能查询到<strong>podDemoLibrary</strong>项目，说明你的pod创建成功了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>在实际使用中遇到了各种零散的问题，这里将遇到的问题做一个总结。</p>\n<ol>\n<li><p>上传了一个错误的tag，需要删除已经上传的tag</p>\n<pre><code>git tag -d 0.1.0\ngit push origin :refs/tags/0.1.0\n</code></pre></li>\n<li><p>pod lib lint时，发现存在warning</p>\n<pre><code>pod repo push Specs podDemoLibrary.podspec --allow-warnings\n</code></pre></li>\n<li><p>依赖库中有一个framework</p>\n<pre><code>pod repo push Specs podDemoLibrary.podspec --use-libraries\n</code></pre></li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\" target=\"_blank\" rel=\"external\">使用Cocoapods创建私有podspec</a></p>\n","excerpt":"","more":"<p><a href=\"http://cocoapods.org/\">Cocoapods</a>是一款非常好用的iOS依赖库管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库。同时我们也可以将公司中的公共组件或者项目中的核心组件交由它去管理。本文就是给大家介绍一下，如何使用Cocoapods创建私有的Pod仓库。</p>\n<h3 id=\"创建一个私有Pod的步骤：\"><a href=\"#创建一个私有Pod的步骤：\" class=\"headerlink\" title=\"创建一个私有Pod的步骤：\"></a>创建一个私有Pod的步骤：</h3><ol>\n<li>创建并设置一个私有的 <strong>Spec Repo</strong></li>\n<li>创建Pod所需管理的项目</li>\n<li>创建Pod所对应的podspec文件</li>\n<li>本地测试配置好的podspec文件是否可用</li>\n<li>向私有的Spec Repo中提交podspec</li>\n<li>在个人项目中的Podfile中增加刚刚制作好的Pod并使用</li>\n<li>更新维护podspec</li>\n</ol>\n<h3 id=\"创建私有Spec-Repo\"><a href=\"#创建私有Spec-Repo\" class=\"headerlink\" title=\"创建私有Spec Repo\"></a>创建私有Spec Repo</h3><p>先来说第一步，什么是Spec Repo？它是所有的Pods的一个索引，就是一个容器，所有公开的Pods都在这个里面，我们常用的第三方库都是放在<a href=\"http://www.github.com\">Github</a>里开源的<a href=\"https://github.com/CocoaPods/Specs\">Specs</a>中，当我们使用CocoaPods后就会在~/.cocoapods/repos目录下生成一个官方的Spec Repo文件夹master。这个master目录的结构如图：<br><img src=\"/images/spec_struct.png\" alt=\"Foo\"></p>\n<p>我们首先需要做的就是创建一个类似于master的私有Spec Repo：  </p>\n<ol>\n<li>创建一个Git仓库  </li>\n<li><p>创建完成之后再终端执行如下命令</p>\n<p>pod repo add [Private Repo Name] [Github Https clone URL]</p>\n</li>\n</ol>\n<h3 id=\"创建Pod项目工程文件\"><a href=\"#创建Pod项目工程文件\" class=\"headerlink\" title=\"创建Pod项目工程文件\"></a>创建Pod项目工程文件</h3><p>Cocoapods为我们提供了一个工具，用来创建Pod管理的项目，相关的文档介绍是<a href=\"http://guides.cocoapods.org/making/using-pod-lib-create\">using-pod-lib-create</a>，下面我们通过创建一个podDemoLibrary</p>\n<pre><code>pod lib create podDemoLibrary\n</code></pre><p>这段命令执行完之后，它会问你四个问题：</p>\n<p>1.是否需要一个例子工程</p>\n<p>2.选择一个测试框架</p>\n<p>3.是否基于View测试</p>\n<p>4.类的前缀</p>\n<p>根据你的实际需求回答这四个问题，通常我们都会选择需要一个例子工程，至于是否需要测试框架或者类的前缀都根据实际请求选择。</p>\n<p>回答完问题后，pod会自动帮你创建对应的目录结构，接下来你可以通过终端进入Example文件夹内执行<strong>pod install</strong>，然后打开<strong>podDemoLibrary.workspace</strong>，在Pods工程下面，会有一个Resources文件夹用来存放你的图片资源和一个Classes文件夹用来存放你的代码。至此，pod项目创建已经完成。</p>\n<h3 id=\"编辑Pod项目工程文件\"><a href=\"#编辑Pod项目工程文件\" class=\"headerlink\" title=\"编辑Pod项目工程文件\"></a>编辑Pod项目工程文件</h3><p>pod项目创建完之后你还需要修改它，已达到实现你的功能需求的目的，接下来就是如何编辑Pod文件。</p>\n<h4 id=\"如何添加代码\"><a href=\"#如何添加代码\" class=\"headerlink\" title=\"如何添加代码\"></a>如何添加代码</h4><p>添加代码的方法同正常的文件创建一样，只是在创建完成之后我们并不能直接使用它，我们需要重新在终端进入Example文件夹内执行<strong>pod install</strong></p>\n<h4 id=\"如何添加图片资源\"><a href=\"#如何添加图片资源\" class=\"headerlink\" title=\"如何添加图片资源\"></a>如何添加图片资源</h4><p>想要添加图片资源，首先，我们需要在Assets文件夹内存放图片资源，然后打开<strong>podDemoLibrary.podspec</strong>文件，找到如下代码：</p>\n<pre><code>s.resource_bundles = {\n  &apos;podDemoLibrary&apos; =&gt; [&apos;podDemoLibrary/Assets/*.png&apos;]\n} \n</code></pre><p>放开注释，重新执行<strong>pod install</strong>，这样你就能在项目中看到Resource文件夹了。</p>\n<p>虽然，你已经能看到Resource文件夹，但是，你并不能直接通过</p>\n<pre><code>[UIImage imageWithNamed:@&quot;pic&quot;];\n</code></pre><p>加载图片。你可以通过一个宏定义方法加载图片，</p>\n<pre><code>#define SrcWithName(name) [@&quot;podDemoLibrary.bundle&quot; stringByAppendingPathComponent:name]\n[UIImage imageWithNamed:SrcWithName(@&quot;pic&quot;)];\n</code></pre><h4 id=\"如何添加依赖库\"><a href=\"#如何添加依赖库\" class=\"headerlink\" title=\"如何添加依赖库\"></a>如何添加依赖库</h4><p>依赖库的添加需要在<strong>podDemoLibrary.podspec</strong>中添加，s.frameworks 对应的是系统库，s.denpendency 对应的是第三方pod库</p>\n<h3 id=\"发布Pod项目\"><a href=\"#发布Pod项目\" class=\"headerlink\" title=\"发布Pod项目\"></a>发布Pod项目</h3><p>1.上传代码到git master</p>\n<pre><code>git add .\ngit commit -m &quot;Initial Commit&quot;\ngit push origin master\n</code></pre><p>2.tag标记</p>\n<pre><code>git tag -m &quot;first release&quot; 0.1.0\ngit push --tags\n</code></pre><p>3.验证pod</p>\n<pre><code>pod lib lint\n</code></pre><p>4.发布pod</p>\n<pre><code>pod repo push Specs podDemoLibrary.podspec\n</code></pre><h3 id=\"查找Pod项目\"><a href=\"#查找Pod项目\" class=\"headerlink\" title=\"查找Pod项目\"></a>查找Pod项目</h3><pre><code>pod search podDemoLibrary\n</code></pre><p>如果你能查询到<strong>podDemoLibrary</strong>项目，说明你的pod创建成功了。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>在实际使用中遇到了各种零散的问题，这里将遇到的问题做一个总结。</p>\n<ol>\n<li><p>上传了一个错误的tag，需要删除已经上传的tag</p>\n<pre><code>git tag -d 0.1.0\ngit push origin :refs/tags/0.1.0\n</code></pre></li>\n<li><p>pod lib lint时，发现存在warning</p>\n<pre><code>pod repo push Specs podDemoLibrary.podspec --allow-warnings\n</code></pre></li>\n<li><p>依赖库中有一个framework</p>\n<pre><code>pod repo push Specs podDemoLibrary.podspec --use-libraries\n</code></pre></li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">使用Cocoapods创建私有podspec</a></p>\n"},{"title":"私有pod创建进阶--如何通过pod管理静态库","date":"2016-09-10T07:46:08.000Z","_content":"\n在[搭建私有Pod](http://www.ileafly.com/2016/08/12/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Pod/)一文中我们已经总结了如何创建私有的Pod，这次来总结一下如果利用Pod生成和管理静态库。\n\n## 创建并发布Pod项目\n\n首先，我们需要参考[搭建私有Pod](http://www.ileafly.com/2016/08/12/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Pod/)创建一个pod项目至**pod lib lint**验证无误。\n\n## 打包类库\n\n我们需要使用一个cocoapods的插件[cocoapods-packager](https://github.com/CocoaPods/cocoapods-packager)来完成类库的打包。当然也可以手动编译打包，只是过程会很繁琐。\n  \n   1. 安装打包插件\n   \n        sudo gem install cocoapods-packager\n        \n   2. 打包\n   \n        pod package Lib.podspec --library --force\n        \n   **--library**指定打包成 **.a** 文件，如果不带上将会打包成 **.framework** 文件。 **--force**是指强制覆盖。\n   \n## 问题解决\n\n打包完成后我们就能在当前工程的目录下找到类库文件，将类库拖拽到项目中集成遇到了编译报错\n\n![类库加入项目后报错截图](images/私有pod创建进阶-如何通过pod管理静态库_类库加入项目后报错.png)\n\n造成编译通不过的原因是无法找到类库中使用的一些系统方法，这是因为我们没有在`podspec`文件里添加系统库的引用和开放头文件。\n    \n        s.public_header_files = 'ZYLib/Classes/**/*.h'\n            \n        s.frameworks = 'UIKit', 'CoreFoundation', 'QuartzCore', 'AssetsLibrary', 'ImageIO', 'Accelerate', 'MobileCoreServices', 'sqlite3', 'libz'\n\n\n   \n## 管理类库\n\n打包完成之后，我们能够在对应项目根目录里找到打包好的文件，我们可以直接将他们拖拽到项目中使用。当然，我们也可以利用Pod来帮我们管理打包好的类库。\n\n1. 在项目根目录中建一个文件夹命名为Release，里面存放一个podspec文件和项目打包成功的.a文件以及.h文件\n2. 修改podspec   \n\n            // 指定.h代码源文件地址\n            s.source_files = 'Release/**/*.h'\n            // 指定.a库地址\n            s.vendored_libraries = 'Release/Lib.a'\n            \n3. 上传Release代码到git master分支，并打上对应tag\n4. 发布pod\n\n贴上Demo中的podspec供参考\n\n         Pod::Spec.new do |s|\n            s.name             = 'ZYLib'\n            s.version          = '0.1.0'\n            s.summary          = 'A short description of ZYLib.'\n\n            s.homepage         = 'https://coding.net/u/ileafly/p/ZYLib/git'\n            s.license          = { :type => 'MIT', :file => 'LICENSE' }\n            s.author           = { 'luzy' => 'luzy@2345.com' }\n            s.source           = { :git => 'https://coding.net/u/ileafly/p/ZYLib/git', :tag => s.version.to_s }\n\n            s.ios.deployment_target = '7.0'\n\n            s.source_files = 'Release/**/*'\n\n            s.vendored_frameworks = 'Release/ZYLib.a'\n  \n            #s.resource_bundles = {\n            #  'ZYLib' => ['ZYLib/Assets/*.png']\n            #}\n\n            s.public_header_files = 'ZYLib/Classes/**/*.h'\n            s.frameworks = 'UIKit', 'CoreFoundation', 'QuartzCore', 'AssetsLibrary', 'ImageIO', 'Accelerate', 'MobileCoreServices', 'sqlite3', 'libz'\n            s.dependency 'AFNetworking', '~> 2.3'\n         end \n\n   \n## 参考文章\n\n[使用CocoaPods开发并打包静态库](http://www.cnblogs.com/brycezhang/p/4117180.html)\n","source":"_posts/私有pod创建进阶-如何通过pod管理静态库.md","raw":"---\ntitle: 私有pod创建进阶--如何通过pod管理静态库\ndate: 2016-09-10 15:46:08\ntags: CocoaPods\ncategories: iOS\n---\n\n在[搭建私有Pod](http://www.ileafly.com/2016/08/12/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Pod/)一文中我们已经总结了如何创建私有的Pod，这次来总结一下如果利用Pod生成和管理静态库。\n\n## 创建并发布Pod项目\n\n首先，我们需要参考[搭建私有Pod](http://www.ileafly.com/2016/08/12/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Pod/)创建一个pod项目至**pod lib lint**验证无误。\n\n## 打包类库\n\n我们需要使用一个cocoapods的插件[cocoapods-packager](https://github.com/CocoaPods/cocoapods-packager)来完成类库的打包。当然也可以手动编译打包，只是过程会很繁琐。\n  \n   1. 安装打包插件\n   \n        sudo gem install cocoapods-packager\n        \n   2. 打包\n   \n        pod package Lib.podspec --library --force\n        \n   **--library**指定打包成 **.a** 文件，如果不带上将会打包成 **.framework** 文件。 **--force**是指强制覆盖。\n   \n## 问题解决\n\n打包完成后我们就能在当前工程的目录下找到类库文件，将类库拖拽到项目中集成遇到了编译报错\n\n![类库加入项目后报错截图](images/私有pod创建进阶-如何通过pod管理静态库_类库加入项目后报错.png)\n\n造成编译通不过的原因是无法找到类库中使用的一些系统方法，这是因为我们没有在`podspec`文件里添加系统库的引用和开放头文件。\n    \n        s.public_header_files = 'ZYLib/Classes/**/*.h'\n            \n        s.frameworks = 'UIKit', 'CoreFoundation', 'QuartzCore', 'AssetsLibrary', 'ImageIO', 'Accelerate', 'MobileCoreServices', 'sqlite3', 'libz'\n\n\n   \n## 管理类库\n\n打包完成之后，我们能够在对应项目根目录里找到打包好的文件，我们可以直接将他们拖拽到项目中使用。当然，我们也可以利用Pod来帮我们管理打包好的类库。\n\n1. 在项目根目录中建一个文件夹命名为Release，里面存放一个podspec文件和项目打包成功的.a文件以及.h文件\n2. 修改podspec   \n\n            // 指定.h代码源文件地址\n            s.source_files = 'Release/**/*.h'\n            // 指定.a库地址\n            s.vendored_libraries = 'Release/Lib.a'\n            \n3. 上传Release代码到git master分支，并打上对应tag\n4. 发布pod\n\n贴上Demo中的podspec供参考\n\n         Pod::Spec.new do |s|\n            s.name             = 'ZYLib'\n            s.version          = '0.1.0'\n            s.summary          = 'A short description of ZYLib.'\n\n            s.homepage         = 'https://coding.net/u/ileafly/p/ZYLib/git'\n            s.license          = { :type => 'MIT', :file => 'LICENSE' }\n            s.author           = { 'luzy' => 'luzy@2345.com' }\n            s.source           = { :git => 'https://coding.net/u/ileafly/p/ZYLib/git', :tag => s.version.to_s }\n\n            s.ios.deployment_target = '7.0'\n\n            s.source_files = 'Release/**/*'\n\n            s.vendored_frameworks = 'Release/ZYLib.a'\n  \n            #s.resource_bundles = {\n            #  'ZYLib' => ['ZYLib/Assets/*.png']\n            #}\n\n            s.public_header_files = 'ZYLib/Classes/**/*.h'\n            s.frameworks = 'UIKit', 'CoreFoundation', 'QuartzCore', 'AssetsLibrary', 'ImageIO', 'Accelerate', 'MobileCoreServices', 'sqlite3', 'libz'\n            s.dependency 'AFNetworking', '~> 2.3'\n         end \n\n   \n## 参考文章\n\n[使用CocoaPods开发并打包静态库](http://www.cnblogs.com/brycezhang/p/4117180.html)\n","slug":"私有pod创建进阶-如何通过pod管理静态库","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i80000mbxya97m5hf9u","content":"<p>在<a href=\"http://www.ileafly.com/2016/08/12/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Pod/\">搭建私有Pod</a>一文中我们已经总结了如何创建私有的Pod，这次来总结一下如果利用Pod生成和管理静态库。</p>\n<h2 id=\"创建并发布Pod项目\"><a href=\"#创建并发布Pod项目\" class=\"headerlink\" title=\"创建并发布Pod项目\"></a>创建并发布Pod项目</h2><p>首先，我们需要参考<a href=\"http://www.ileafly.com/2016/08/12/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Pod/\">搭建私有Pod</a>创建一个pod项目至<strong>pod lib lint</strong>验证无误。</p>\n<h2 id=\"打包类库\"><a href=\"#打包类库\" class=\"headerlink\" title=\"打包类库\"></a>打包类库</h2><p>我们需要使用一个cocoapods的插件<a href=\"https://github.com/CocoaPods/cocoapods-packager\" target=\"_blank\" rel=\"external\">cocoapods-packager</a>来完成类库的打包。当然也可以手动编译打包，只是过程会很繁琐。</p>\n<ol>\n<li><p>安装打包插件</p>\n<p>  sudo gem install cocoapods-packager</p>\n</li>\n<li><p>打包</p>\n<p>  pod package Lib.podspec –library –force</p>\n<p><strong>–library</strong>指定打包成 <strong>.a</strong> 文件，如果不带上将会打包成 <strong>.framework</strong> 文件。 <strong>–force</strong>是指强制覆盖。</p>\n</li>\n</ol>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>打包完成后我们就能在当前工程的目录下找到类库文件，将类库拖拽到项目中集成遇到了编译报错</p>\n<p><img src=\"images/私有pod创建进阶-如何通过pod管理静态库_类库加入项目后报错.png\" alt=\"类库加入项目后报错截图\"></p>\n<p>造成编译通不过的原因是无法找到类库中使用的一些系统方法，这是因为我们没有在<code>podspec</code>文件里添加系统库的引用和开放头文件。</p>\n<pre><code>s.public_header_files = &apos;ZYLib/Classes/**/*.h&apos;\n\ns.frameworks = &apos;UIKit&apos;, &apos;CoreFoundation&apos;, &apos;QuartzCore&apos;, &apos;AssetsLibrary&apos;, &apos;ImageIO&apos;, &apos;Accelerate&apos;, &apos;MobileCoreServices&apos;, &apos;sqlite3&apos;, &apos;libz&apos;\n</code></pre><h2 id=\"管理类库\"><a href=\"#管理类库\" class=\"headerlink\" title=\"管理类库\"></a>管理类库</h2><p>打包完成之后，我们能够在对应项目根目录里找到打包好的文件，我们可以直接将他们拖拽到项目中使用。当然，我们也可以利用Pod来帮我们管理打包好的类库。</p>\n<ol>\n<li>在项目根目录中建一个文件夹命名为Release，里面存放一个podspec文件和项目打包成功的.a文件以及.h文件</li>\n<li><p>修改podspec   </p>\n<pre><code>// 指定.h代码源文件地址\ns.source_files = &apos;Release/**/*.h&apos;\n// 指定.a库地址\ns.vendored_libraries = &apos;Release/Lib.a&apos;\n</code></pre></li>\n<li><p>上传Release代码到git master分支，并打上对应tag</p>\n</li>\n<li>发布pod</li>\n</ol>\n<p>贴上Demo中的podspec供参考</p>\n<pre><code>Pod::Spec.new do |s|\n   s.name             = &apos;ZYLib&apos;\n   s.version          = &apos;0.1.0&apos;\n   s.summary          = &apos;A short description of ZYLib.&apos;\n\n   s.homepage         = &apos;https://coding.net/u/ileafly/p/ZYLib/git&apos;\n   s.license          = { :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; }\n   s.author           = { &apos;luzy&apos; =&gt; &apos;luzy@2345.com&apos; }\n   s.source           = { :git =&gt; &apos;https://coding.net/u/ileafly/p/ZYLib/git&apos;, :tag =&gt; s.version.to_s }\n\n   s.ios.deployment_target = &apos;7.0&apos;\n\n   s.source_files = &apos;Release/**/*&apos;\n\n   s.vendored_frameworks = &apos;Release/ZYLib.a&apos;\n\n   #s.resource_bundles = {\n   #  &apos;ZYLib&apos; =&gt; [&apos;ZYLib/Assets/*.png&apos;]\n   #}\n\n   s.public_header_files = &apos;ZYLib/Classes/**/*.h&apos;\n   s.frameworks = &apos;UIKit&apos;, &apos;CoreFoundation&apos;, &apos;QuartzCore&apos;, &apos;AssetsLibrary&apos;, &apos;ImageIO&apos;, &apos;Accelerate&apos;, &apos;MobileCoreServices&apos;, &apos;sqlite3&apos;, &apos;libz&apos;\n   s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;\nend \n</code></pre><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.cnblogs.com/brycezhang/p/4117180.html\" target=\"_blank\" rel=\"external\">使用CocoaPods开发并打包静态库</a></p>\n","excerpt":"","more":"<p>在<a href=\"http://www.ileafly.com/2016/08/12/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Pod/\">搭建私有Pod</a>一文中我们已经总结了如何创建私有的Pod，这次来总结一下如果利用Pod生成和管理静态库。</p>\n<h2 id=\"创建并发布Pod项目\"><a href=\"#创建并发布Pod项目\" class=\"headerlink\" title=\"创建并发布Pod项目\"></a>创建并发布Pod项目</h2><p>首先，我们需要参考<a href=\"http://www.ileafly.com/2016/08/12/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Pod/\">搭建私有Pod</a>创建一个pod项目至<strong>pod lib lint</strong>验证无误。</p>\n<h2 id=\"打包类库\"><a href=\"#打包类库\" class=\"headerlink\" title=\"打包类库\"></a>打包类库</h2><p>我们需要使用一个cocoapods的插件<a href=\"https://github.com/CocoaPods/cocoapods-packager\">cocoapods-packager</a>来完成类库的打包。当然也可以手动编译打包，只是过程会很繁琐。</p>\n<ol>\n<li><p>安装打包插件</p>\n<p>  sudo gem install cocoapods-packager</p>\n</li>\n<li><p>打包</p>\n<p>  pod package Lib.podspec –library –force</p>\n<p><strong>–library</strong>指定打包成 <strong>.a</strong> 文件，如果不带上将会打包成 <strong>.framework</strong> 文件。 <strong>–force</strong>是指强制覆盖。</p>\n</li>\n</ol>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>打包完成后我们就能在当前工程的目录下找到类库文件，将类库拖拽到项目中集成遇到了编译报错</p>\n<p><img src=\"images/私有pod创建进阶-如何通过pod管理静态库_类库加入项目后报错.png\" alt=\"类库加入项目后报错截图\"></p>\n<p>造成编译通不过的原因是无法找到类库中使用的一些系统方法，这是因为我们没有在<code>podspec</code>文件里添加系统库的引用和开放头文件。</p>\n<pre><code>s.public_header_files = &apos;ZYLib/Classes/**/*.h&apos;\n\ns.frameworks = &apos;UIKit&apos;, &apos;CoreFoundation&apos;, &apos;QuartzCore&apos;, &apos;AssetsLibrary&apos;, &apos;ImageIO&apos;, &apos;Accelerate&apos;, &apos;MobileCoreServices&apos;, &apos;sqlite3&apos;, &apos;libz&apos;\n</code></pre><h2 id=\"管理类库\"><a href=\"#管理类库\" class=\"headerlink\" title=\"管理类库\"></a>管理类库</h2><p>打包完成之后，我们能够在对应项目根目录里找到打包好的文件，我们可以直接将他们拖拽到项目中使用。当然，我们也可以利用Pod来帮我们管理打包好的类库。</p>\n<ol>\n<li>在项目根目录中建一个文件夹命名为Release，里面存放一个podspec文件和项目打包成功的.a文件以及.h文件</li>\n<li><p>修改podspec   </p>\n<pre><code>// 指定.h代码源文件地址\ns.source_files = &apos;Release/**/*.h&apos;\n// 指定.a库地址\ns.vendored_libraries = &apos;Release/Lib.a&apos;\n</code></pre></li>\n<li><p>上传Release代码到git master分支，并打上对应tag</p>\n</li>\n<li>发布pod</li>\n</ol>\n<p>贴上Demo中的podspec供参考</p>\n<pre><code>Pod::Spec.new do |s|\n   s.name             = &apos;ZYLib&apos;\n   s.version          = &apos;0.1.0&apos;\n   s.summary          = &apos;A short description of ZYLib.&apos;\n\n   s.homepage         = &apos;https://coding.net/u/ileafly/p/ZYLib/git&apos;\n   s.license          = { :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; }\n   s.author           = { &apos;luzy&apos; =&gt; &apos;luzy@2345.com&apos; }\n   s.source           = { :git =&gt; &apos;https://coding.net/u/ileafly/p/ZYLib/git&apos;, :tag =&gt; s.version.to_s }\n\n   s.ios.deployment_target = &apos;7.0&apos;\n\n   s.source_files = &apos;Release/**/*&apos;\n\n   s.vendored_frameworks = &apos;Release/ZYLib.a&apos;\n\n   #s.resource_bundles = {\n   #  &apos;ZYLib&apos; =&gt; [&apos;ZYLib/Assets/*.png&apos;]\n   #}\n\n   s.public_header_files = &apos;ZYLib/Classes/**/*.h&apos;\n   s.frameworks = &apos;UIKit&apos;, &apos;CoreFoundation&apos;, &apos;QuartzCore&apos;, &apos;AssetsLibrary&apos;, &apos;ImageIO&apos;, &apos;Accelerate&apos;, &apos;MobileCoreServices&apos;, &apos;sqlite3&apos;, &apos;libz&apos;\n   s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;\nend \n</code></pre><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.cnblogs.com/brycezhang/p/4117180.html\">使用CocoaPods开发并打包静态库</a></p>\n"},{"title":"移除Pod管理的库后编译报Link错误","date":"2016-10-24T05:59:00.000Z","categries":"iOS","_content":"\n在将项目中用pod管理的一个库移除后编译居然报错，查看了一下报错信息，编译时还会link被删除的那个库，但是无法link成功，不论是重新执行`pod install`还是清除缓存，clean项目，都无法解决这个问题。\n\n![pod移除第三方库后编译报错截图](/images/pod移除第三方库后编译报错截图.jpeg)\n\n这是因为虽然我们将库已经从pod管理中删除，但是我们的项目还在link这个库，我们需要去除掉这个link，具体移除步骤如下：\n\n1. 点击项目工程文件进入Build Setting\n2. 找到Other Linker Flags一栏\n3. 删除到相关库的link\n4. 重新编译即可\n\n","source":"_posts/移除Pod管理的库后编译报Link错误.md","raw":"---\ntitle: 移除Pod管理的库后编译报Link错误\ndate: 2016-10-24 13:59:00\ntags: CocoaPods\ncategries: iOS\n---\n\n在将项目中用pod管理的一个库移除后编译居然报错，查看了一下报错信息，编译时还会link被删除的那个库，但是无法link成功，不论是重新执行`pod install`还是清除缓存，clean项目，都无法解决这个问题。\n\n![pod移除第三方库后编译报错截图](/images/pod移除第三方库后编译报错截图.jpeg)\n\n这是因为虽然我们将库已经从pod管理中删除，但是我们的项目还在link这个库，我们需要去除掉这个link，具体移除步骤如下：\n\n1. 点击项目工程文件进入Build Setting\n2. 找到Other Linker Flags一栏\n3. 删除到相关库的link\n4. 重新编译即可\n\n","slug":"移除Pod管理的库后编译报Link错误","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i83000obxya4vjodvs1","content":"<p>在将项目中用pod管理的一个库移除后编译居然报错，查看了一下报错信息，编译时还会link被删除的那个库，但是无法link成功，不论是重新执行<code>pod install</code>还是清除缓存，clean项目，都无法解决这个问题。</p>\n<p><img src=\"/images/pod移除第三方库后编译报错截图.jpeg\" alt=\"pod移除第三方库后编译报错截图\"></p>\n<p>这是因为虽然我们将库已经从pod管理中删除，但是我们的项目还在link这个库，我们需要去除掉这个link，具体移除步骤如下：</p>\n<ol>\n<li>点击项目工程文件进入Build Setting</li>\n<li>找到Other Linker Flags一栏</li>\n<li>删除到相关库的link</li>\n<li>重新编译即可</li>\n</ol>\n","excerpt":"","more":"<p>在将项目中用pod管理的一个库移除后编译居然报错，查看了一下报错信息，编译时还会link被删除的那个库，但是无法link成功，不论是重新执行<code>pod install</code>还是清除缓存，clean项目，都无法解决这个问题。</p>\n<p><img src=\"/images/pod移除第三方库后编译报错截图.jpeg\" alt=\"pod移除第三方库后编译报错截图\"></p>\n<p>这是因为虽然我们将库已经从pod管理中删除，但是我们的项目还在link这个库，我们需要去除掉这个link，具体移除步骤如下：</p>\n<ol>\n<li>点击项目工程文件进入Build Setting</li>\n<li>找到Other Linker Flags一栏</li>\n<li>删除到相关库的link</li>\n<li>重新编译即可</li>\n</ol>\n"},{"title":"自定义xopen命令打开工程","date":"2016-10-08T08:15:53.000Z","_content":"\n通常我们在终端中对代码进行版本控制或者使用CocoaPods命令安装完依赖库后，都需要手动去打开工程。对于追求快捷和逼格的我们来说怎样才能进一步提升我们的逼格呢？\n\n今天就跟大家分享一个通过ruby脚本来帮助我们在终端中直接打开工程的方法。\n\n如果大家足够细心的话应该能注意到CocoaPods管理的项目后缀是`projectname.xcworkspace`而普通工程的后缀是`projectname.xcodeproj`,下面我们就通过ruby脚本来判断后缀，帮助我们优先打开`projectname.xcworkspace`。\n\n       #!/usr/bin/env ruby\n \n       require 'shellwords'\n \n       proj = Dir['*.xcworkspace'].first\n       proj = Dir['*.xcodeproj'].first unless proj\n \n       if proj\n         puts \"Opening #{proj}\"\n         `open #{proj}`\n       else\n         puts \"No xcworkspace|xcproj file found\"\n       end\n       \n将以上内容命名为`xopen`保存，并将文件拷贝到`/usr/local/bin`目录下，添加权限：`chmod 777 xopen`\n\n执行完以上操作后你就可以方便的使用`xopen`命令来打开工程啦。","source":"_posts/自定义xopen命令打开工程.md","raw":"---\ntitle: 自定义xopen命令打开工程\ndate: 2016-10-08 16:15:53\ntags: Xcode\ncategories: iOS\n---\n\n通常我们在终端中对代码进行版本控制或者使用CocoaPods命令安装完依赖库后，都需要手动去打开工程。对于追求快捷和逼格的我们来说怎样才能进一步提升我们的逼格呢？\n\n今天就跟大家分享一个通过ruby脚本来帮助我们在终端中直接打开工程的方法。\n\n如果大家足够细心的话应该能注意到CocoaPods管理的项目后缀是`projectname.xcworkspace`而普通工程的后缀是`projectname.xcodeproj`,下面我们就通过ruby脚本来判断后缀，帮助我们优先打开`projectname.xcworkspace`。\n\n       #!/usr/bin/env ruby\n \n       require 'shellwords'\n \n       proj = Dir['*.xcworkspace'].first\n       proj = Dir['*.xcodeproj'].first unless proj\n \n       if proj\n         puts \"Opening #{proj}\"\n         `open #{proj}`\n       else\n         puts \"No xcworkspace|xcproj file found\"\n       end\n       \n将以上内容命名为`xopen`保存，并将文件拷贝到`/usr/local/bin`目录下，添加权限：`chmod 777 xopen`\n\n执行完以上操作后你就可以方便的使用`xopen`命令来打开工程啦。","slug":"自定义xopen命令打开工程","published":1,"updated":"2016-11-02T01:30:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ0g2i8g000tbxya6yxdxcoj","content":"<p>通常我们在终端中对代码进行版本控制或者使用CocoaPods命令安装完依赖库后，都需要手动去打开工程。对于追求快捷和逼格的我们来说怎样才能进一步提升我们的逼格呢？</p>\n<p>今天就跟大家分享一个通过ruby脚本来帮助我们在终端中直接打开工程的方法。</p>\n<p>如果大家足够细心的话应该能注意到CocoaPods管理的项目后缀是<code>projectname.xcworkspace</code>而普通工程的后缀是<code>projectname.xcodeproj</code>,下面我们就通过ruby脚本来判断后缀，帮助我们优先打开<code>projectname.xcworkspace</code>。</p>\n<pre><code>#!/usr/bin/env ruby\n\nrequire &apos;shellwords&apos;\n\nproj = Dir[&apos;*.xcworkspace&apos;].first\nproj = Dir[&apos;*.xcodeproj&apos;].first unless proj\n\nif proj\n  puts &quot;Opening #{proj}&quot;\n  `open #{proj}`\nelse\n  puts &quot;No xcworkspace|xcproj file found&quot;\nend\n</code></pre><p>将以上内容命名为<code>xopen</code>保存，并将文件拷贝到<code>/usr/local/bin</code>目录下，添加权限：<code>chmod 777 xopen</code></p>\n<p>执行完以上操作后你就可以方便的使用<code>xopen</code>命令来打开工程啦。</p>\n","excerpt":"","more":"<p>通常我们在终端中对代码进行版本控制或者使用CocoaPods命令安装完依赖库后，都需要手动去打开工程。对于追求快捷和逼格的我们来说怎样才能进一步提升我们的逼格呢？</p>\n<p>今天就跟大家分享一个通过ruby脚本来帮助我们在终端中直接打开工程的方法。</p>\n<p>如果大家足够细心的话应该能注意到CocoaPods管理的项目后缀是<code>projectname.xcworkspace</code>而普通工程的后缀是<code>projectname.xcodeproj</code>,下面我们就通过ruby脚本来判断后缀，帮助我们优先打开<code>projectname.xcworkspace</code>。</p>\n<pre><code>#!/usr/bin/env ruby\n\nrequire &apos;shellwords&apos;\n\nproj = Dir[&apos;*.xcworkspace&apos;].first\nproj = Dir[&apos;*.xcodeproj&apos;].first unless proj\n\nif proj\n  puts &quot;Opening #{proj}&quot;\n  `open #{proj}`\nelse\n  puts &quot;No xcworkspace|xcproj file found&quot;\nend\n</code></pre><p>将以上内容命名为<code>xopen</code>保存，并将文件拷贝到<code>/usr/local/bin</code>目录下，添加权限：<code>chmod 777 xopen</code></p>\n<p>执行完以上操作后你就可以方便的使用<code>xopen</code>命令来打开工程啦。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"civ0g2i6y0000bxyauicvccs0","category_id":"civ0g2i780003bxyaxxz90klw","_id":"civ0g2i7q000bbxya69oepre8"},{"post_id":"civ0g2i7k0007bxya3ez5t70z","category_id":"civ0g2i780003bxyaxxz90klw","_id":"civ0g2i7u000fbxyadesflaqz"},{"post_id":"civ0g2i720001bxyav6tnmmwh","category_id":"civ0g2i7m0008bxyaw0sitzx5","_id":"civ0g2i7z000jbxya4ahb5o0r"},{"post_id":"civ0g2i790004bxyaxhl769pz","category_id":"civ0g2i7u000ebxyaml3mo9yb","_id":"civ0g2i86000qbxyadixd3gaz"},{"post_id":"civ0g2i7x000ibxyao5vqtnfg","category_id":"civ0g2i780003bxyaxxz90klw","_id":"civ0g2i8i000vbxyavnvryqsf"},{"post_id":"civ0g2i80000mbxya97m5hf9u","category_id":"civ0g2i780003bxyaxxz90klw","_id":"civ0g2i8j000xbxya8hmxyuau"},{"post_id":"civ0g2i7c0005bxyafgq441y3","category_id":"civ0g2i7z000lbxya0f6m8f5d","_id":"civ0g2i8l0011bxyaix0hd24k"},{"post_id":"civ0g2i8g000tbxya6yxdxcoj","category_id":"civ0g2i780003bxyaxxz90klw","_id":"civ0g2i8m0013bxya2h1dnrse"},{"post_id":"civ0g2i7o000abxya0ejhc26a","category_id":"civ0g2i8g000sbxyawfz7xdhi","_id":"civ0g2i8m0016bxya2n37ywp9"},{"post_id":"civ0g2i7q000cbxyavwmjr9sx","category_id":"civ0g2i8g000sbxyawfz7xdhi","_id":"civ0g2i8n0018bxya7pjp2521"},{"post_id":"civ0g2i7v000hbxyajn0j2xx3","category_id":"civ0g2i8g000sbxyawfz7xdhi","_id":"civ0g2i8n001bbxyafvxwvjh2"}],"PostTag":[{"post_id":"civ0g2i6y0000bxyauicvccs0","tag_id":"civ0g2i750002bxyaxwtf6jz4","_id":"civ0g2i7n0009bxya1w34gbrq"},{"post_id":"civ0g2i720001bxyav6tnmmwh","tag_id":"civ0g2i7j0006bxyah2c5iazy","_id":"civ0g2i7v000gbxyawcrwhr6k"},{"post_id":"civ0g2i790004bxyaxhl769pz","tag_id":"civ0g2i7t000dbxyaxce40tg0","_id":"civ0g2i82000nbxyah1yunpik"},{"post_id":"civ0g2i7x000ibxyao5vqtnfg","tag_id":"civ0g2i750002bxyaxwtf6jz4","_id":"civ0g2i85000pbxyarnaxoxq8"},{"post_id":"civ0g2i80000mbxya97m5hf9u","tag_id":"civ0g2i750002bxyaxwtf6jz4","_id":"civ0g2i8i000ubxyapw2a0qq4"},{"post_id":"civ0g2i7c0005bxyafgq441y3","tag_id":"civ0g2i7z000kbxya4nbvss5q","_id":"civ0g2i8j000wbxya1v236m5s"},{"post_id":"civ0g2i83000obxya4vjodvs1","tag_id":"civ0g2i750002bxyaxwtf6jz4","_id":"civ0g2i8k0010bxyaeh46pev4"},{"post_id":"civ0g2i7k0007bxya3ez5t70z","tag_id":"civ0g2i8g000rbxya7gjw3n66","_id":"civ0g2i8l0012bxyah5hbbjou"},{"post_id":"civ0g2i7o000abxya0ejhc26a","tag_id":"civ0g2i8j000ybxyaufifv5nc","_id":"civ0g2i8n0017bxya385yaq68"},{"post_id":"civ0g2i7q000cbxyavwmjr9sx","tag_id":"civ0g2i8m0015bxyaeyayrr58","_id":"civ0g2i8n001abxyaei9swcsf"},{"post_id":"civ0g2i7v000hbxyajn0j2xx3","tag_id":"civ0g2i8m0015bxyaeyayrr58","_id":"civ0g2i8o001dbxyap2f0l0sc"},{"post_id":"civ0g2i8g000tbxya6yxdxcoj","tag_id":"civ0g2i8o001cbxyaqa2nsee8","_id":"civ0g2i8o001ebxyalrf75kly"}],"Tag":[{"name":"CocoaPods","_id":"civ0g2i750002bxyaxwtf6jz4"},{"name":"博客, Hexo","_id":"civ0g2i7j0006bxyah2c5iazy"},{"name":"ReactNative, JavaScript","_id":"civ0g2i7t000dbxyaxce40tg0"},{"name":"Git","_id":"civ0g2i7z000kbxya4nbvss5q"},{"name":"iOS","_id":"civ0g2i8g000rbxya7gjw3n66"},{"name":"Markdown","_id":"civ0g2i8j000ybxyaufifv5nc"},{"name":"博客","_id":"civ0g2i8m0015bxyaeyayrr58"},{"name":"Xcode","_id":"civ0g2i8o001cbxyaqa2nsee8"}]}}